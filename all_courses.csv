,Title,Description,Link,Source
0,Mathematics for Computer Science,"This course covers elementary discrete mathematics for computer science and engineering. It emphasizes mathematical definitions and proofs as well as applicable methods. Topics include formal logic notation, proof methods; induction, well-ordering; sets, relations; elementary graph theory; integer congruences; asymptotic notation and growth of functions; permutations and combinations, counting principles; discrete probability. Further selected topics may also be covered, such as recursive definition and structural induction; state machines and invariants; recurrences; generating functions.",https://ocw.mit.edu/courses/6-042j-mathematics-for-computer-science-fall-2010/,MIT OpenCourseware
1,Mathematics for Computer Science,"This is an introductory course in Discrete Mathematics oriented toward Computer Science and Engineering. The course divides roughly into thirds:

Fundamental Concepts of Mathematics: Definitions, Proofs, Sets, Functions, Relations
Discrete Structures: Modular Arithmetic, Graphs, State Machines, Counting
Discrete Probability Theory

A version of this course from a previous term was also taught as part of the Singapore-MIT Alliance (SMA) programme as course number SMA 5512 (Mathematics for Computer Science).
",https://ocw.mit.edu/courses/6-042j-mathematics-for-computer-science-fall-2005/,MIT OpenCourseware
2,Mathematics for Computer Science,"This subject offers an interactive introduction to discrete mathematics oriented toward computer science and engineering. The subject coverage divides roughly into thirds:

Fundamental concepts of mathematics: Definitions, proofs, sets, functions, relations.
Discrete structures: graphs, state machines, modular arithmetic, counting.
Discrete probability theory.

On completion of 6.042J, students will be able to explain and apply the basic methods of discrete (noncontinuous) mathematics in computer science. They will be able to use these methods in subsequent courses in the design and analysis of algorithms, computability theory, software engineering, and computer systems.
This course is part of the Open Learning Library, which is free to use. You have the option to sign up and enroll in the course if you want to track your progress, or you can view and use all the materials without enrolling.
",https://ocw.mit.edu/courses/6-042j-mathematics-for-computer-science-spring-2015/,MIT OpenCourseware
3,Computational Cognitive Science,"This course is an introduction to computational theories of human cognition. Drawing on formal models from classic and contemporary artificial intelligence, students will explore fundamental issues in human knowledge representation, inductive learning and reasoning. What are the forms that our knowledge of the world takes? What are the inductive principles that allow us to acquire new knowledge from the interaction of prior knowledge with observed data? What kinds of data must be available to human learners, and what kinds of innate knowledge (if any) must they have?",https://ocw.mit.edu/courses/9-66j-computational-cognitive-science-fall-2004/,MIT OpenCourseware
4,Introduction to Computer Science and Programming,6.00 Intro to CS and Programming has been retired from OCW. You can access the archived course on DSpace – MIT’s digital repository. Please see the list of introductory programming courses and other programming courses from recent years.,https://ocw.mit.edu/courses/6-00-introduction-to-computer-science-and-programming-fall-2008/,MIT OpenCourseware
5,Great Ideas in Theoretical Computer Science,"This course provides a challenging introduction to some of the central ideas of theoretical computer science. It attempts to present a vision of “computer science beyond computers”: that is, CS as a set of mathematical tools for understanding complex systems such as universes and minds. Beginning in antiquity—with Euclid’s algorithm and other ancient examples of computational thinking—the course will progress rapidly through propositional logic, Turing machines and computability, finite automata, Gödel’s theorems, efficient algorithms and reducibility, NP-completeness, the P versus NP problem, decision trees and other concrete computational models, the power of randomness, cryptography and one-way functions, computational theories of learning, interactive proofs, and quantum computing and the physical limits of computation. Class participation is essential, as the class will include discussion and debate about the implications of many of these ideas.",https://ocw.mit.edu/courses/6-080-great-ideas-in-theoretical-computer-science-spring-2008/,MIT OpenCourseware
6,Introduction to Computer Science and Programming,6.00SC Intro to CS and Programming has been retired from OCW. You can access the archived course on DSpace – MIT’s digital repository. Please see the list of introductory programming courses and other programming courses from recent years.,https://ocw.mit.edu/courses/6-00sc-introduction-to-computer-science-and-programming-spring-2011/,MIT OpenCourseware
7,Introduction to Computer Science and Programming in Python,"6.0001 Introduction to Computer Science and Programming in Python is intended for students with little or no programming experience. It aims to provide students with an understanding of the role computation can play in solving problems and to help students, regardless of their major, feel justifiably confident of their ability to write small programs that allow them to accomplish useful goals. The class uses the Python 3.5 programming language.",https://ocw.mit.edu/courses/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/,MIT OpenCourseware
8,Introduction to Electrical Engineering and Computer Science I,"This course provides an integrated introduction to electrical engineering and computer science, taught using substantial laboratory experiments with mobile robots. Our primary goal is for you to learn to appreciate and use the fundamental design principles of modularity and abstraction in a variety of contexts from electrical engineering and computer science.
Our second goal is to show you that making mathematical models of real systems can help in the design and analysis of those systems. Finally, we have the more typical goals of teaching exciting and important basic material from electrical engineering and computer science, including modern software engineering, linear systems analysis, electronic circuits, and decision-making.
Course Format
This course has been designed for independent study. It includes all of the materials you will need to understand the concepts covered in this subject. The materials in this course include:

Lecture videos from Spring 2011, taught by Prof. Dennis Freeman
Recitation videos, developed for OCW Scholar by teaching assistant Kendra Pugh
Course notes
Software and design labs
Homework assignments and additional exercises
Nano-quizzes and exams with solutions

Content Development
Leslie Kaelbling 
Jacob White 
Harold Abelson 
Dennis Freeman
Tomás Lozano-Pérez 
Isaac Chuang
",https://ocw.mit.edu/courses/6-01sc-introduction-to-electrical-engineering-and-computer-science-i-spring-2011/,MIT OpenCourseware
9,Introduction to Computational Thinking and Data Science,"6.0002 is the continuation of 6.0001 Introduction to Computer Science and Programming in Python and is intended for students with little or no programming experience. It aims to provide students with an understanding of the role computation can play in solving problems and to help students, regardless of their major, feel justifiably confident of their ability to write small programs that allow them to accomplish useful goals. The class uses the Python 3.5 programming language.",https://ocw.mit.edu/courses/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/,MIT OpenCourseware
10,Computational Biology,"This course covers the algorithmic and machine learning foundations of computational biology combining theory with practice. We cover both foundational topics in computational biology, and current research frontiers. We study fundamental techniques, recent advances in the field, and work directly with current large-scale biological datasets.",https://ocw.mit.edu/courses/6-047-computational-biology-fall-2015/,MIT OpenCourseware
11,Algorithms for Computer Animation,"Animation is a compelling and effective form of expression; it engages viewers and makes difficult concepts easier to grasp. Today’s animation industry creates films, special effects, and games with stunning visual detail and quality. This graduate class will investigate the algorithms that make these animations possible: keyframing, inverse kinematics, physical simulation, optimization, optimal control, motion capture, and data-driven methods. Our study will also reveal the shortcomings of these sophisticated tools. The students will propose improvements and explore new methods for computer animation in semester-long research projects. The course should appeal to both students with general interest in computer graphics and students interested in new applications of machine learning, robotics, biomechanics, physics, applied mathematics and scientific computing.",https://ocw.mit.edu/courses/6-838-algorithms-for-computer-animation-fall-2002/,MIT OpenCourseware
12,Network and Computer Security,"6.857 Network and Computer Security is an upper-level undergraduate, first-year graduate course on network and computer security. It fits within the Computer Systems and Architecture Engineering concentration.",https://ocw.mit.edu/courses/6-857-network-and-computer-security-spring-2014/,MIT OpenCourseware
13,Theory of Computation,"This course emphasizes computability and computational complexity theory. Topics include regular and context-free languages, decidable and undecidable problems, reducibility, recursive function theory, time and space measures on computation, completeness, hierarchy theorems, inherently complex problems, oracles, probabilistic computation, and interactive proof systems.",https://ocw.mit.edu/courses/18-404j-theory-of-computation-fall-2020/,MIT OpenCourseware
14,Parallel Computing,"This is an advanced interdisciplinary introduction to applied parallel computing on modern supercomputers. It has a hands-on emphasis on understanding the realities and myths of what is possible on the world’s fastest machines. We will make prominent use of the Julia Language, a free, open-source, high-performance dynamic programming language for technical computing.",https://ocw.mit.edu/courses/18-337j-parallel-computing-fall-2011/,MIT OpenCourseware
15,Computation Structures,"This course introduces architecture of digital systems, emphasizing structural principles common to a wide range of technologies. It covers the topics including multilevel implementation strategies, definition of new primitives (e.g., gates, instructions, procedures, processes) and their mechanization using lower-level elements. It also includes analysis of potential concurrency, precedence constraints and performance measures, pipelined and multidimensional systems, instruction set design issues and architectural support for contemporary software structures.",https://ocw.mit.edu/courses/6-004-computation-structures-spring-2017/,MIT OpenCourseware
16,"Automata, Computability, and Complexity","This course provides a challenging introduction to some of the central ideas of theoretical computer science. Beginning in antiquity, the course will progress through finite automata, circuits and decision trees, Turing machines and computability, efficient algorithms and reducibility, the P versus NP problem, NP-completeness, the power of randomness, cryptography and one-way functions, computational learning theory, and quantum computing. It examines the classes of problems that can and cannot be solved by various kinds of machines. It tries to explain the key differences between computational models that affect their power.",https://ocw.mit.edu/courses/6-045j-automata-computability-and-complexity-spring-2011/,MIT OpenCourseware
17,Computation Structures,"6.004 offers an introduction to the engineering of digital systems. Starting with MOS transistors, the course develops a series of building blocks — logic gates, combinational and sequential circuits, finite-state machines, computers and finally complete systems. Both hardware and software mechanisms are explored through a series of design examples.
6.004 is required material for any EECS undergraduate who wants to understand (and ultimately design) digital systems. A good grasp of the material is essential for later courses in digital design, computer architecture and systems. The problem sets and lab exercises are intended to give students “hands-on” experience in designing digital systems; each student completes a gate-level design for a reduced instruction set computer (RISC) processor during the semester.
",https://ocw.mit.edu/courses/6-004-computation-structures-spring-2009/,MIT OpenCourseware
18,Principles of Computer Systems,"6.826 provides an introduction to the basic principles of computer systems, with emphasis on the use of rigorous techniques as an aid to understanding and building modern computing systems. Particular attention is paid to concurrent and distributed systems. Topics covered include: specification and verification, concurrent algorithms, synchronization, naming, networking, replication techniques (including distributed cache management), and principles and algorithms for achieving reliability.",https://ocw.mit.edu/courses/6-826-principles-of-computer-systems-spring-2002/,MIT OpenCourseware
19,Introduction to Computational Thinking,"This is an introductory course on computational thinking. We use the Julia programming language to approach real-world problems in varied areas, applying data analysis and computational and mathematical modeling. In this class you will learn computer science, software, algorithms, applications, and mathematics as an integrated whole. Topics include image analysis, particle dynamics and ray tracing, epidemic propagation, and climate modeling.",https://ocw.mit.edu/courses/18-s191-introduction-to-computational-thinking-fall-2020/,MIT OpenCourseware
20,Biomedical Computing,"Analyzes computational needs of clinical medicine reviews systems and approaches that have been used to support those needs, and the relationship between clinical data and gene and protein measurements. Topics: the nature of clinical data; architecture and design of healthcare information systems; privacy and security issues; medical expertsystems; introduction to bioinformatics. Case studies and guest lectures describe contemporary systems and research projects. Term project using large clinical and genomic data sets integrates classroom topics.",https://ocw.mit.edu/courses/hst-950j-biomedical-computing-fall-2010/,MIT OpenCourseware
21,Computational Functional Genomics,"The course focuses on casting contemporary problems in systems biology and functional genomics in computational terms and providing appropriate tools and methods to solve them. Topics include genome structure and function, transcriptional regulation, and stem cell biology in particular; measurement technologies such as microarrays (expression, protein-DNA interactions, chromatin structure); statistical data analysis, predictive and causal inference, and experiment design. The emphasis is on coupling problem structures (biological questions) with appropriate computational approaches.",https://ocw.mit.edu/courses/7-90j-computational-functional-genomics-spring-2005/,MIT OpenCourseware
22,Introduction to Computational Thinking,"This class uses revolutionary programmable interactivity to combine material from three fields – Computer Science + Mathematics + Applications – creating an engaging, efficient learning solution to prepare students to be sophisticated and intuitive thinkers, programmers, and solution providers for the modern interconnected online world.
Upon completion, students are well trained to be scientific “trilinguals,” seeing and experimenting with mathematics interactively as math is meant to be seen, and ready to participate and contribute to open source development of large projects and ecosystems.
",https://ocw.mit.edu/courses/18-s191-introduction-to-computational-thinking-fall-2022/,MIT OpenCourseware
23,Computer Systems Security,"6.858 Computer Systems Security is a class about the design and implementation of secure computer systems. Lectures cover threat models, attacks that compromise security, and techniques for achieving security, based on recent research papers. Topics include operating system (OS) security, capabilities, information flow control, language security, network protocols, hardware security, and security in web applications.",https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/,MIT OpenCourseware
24,Computer System Engineering,"This class covers topics on the engineering of computer software and hardware systems. Topics include techniques for controlling complexity; strong modularity using client-server design, operating systems; performance, networks; naming; security and privacy; fault-tolerant systems, atomicity and coordination of concurrent activities, and recovery; impact of computer systems on society.",https://ocw.mit.edu/courses/6-033-computer-system-engineering-spring-2018/,MIT OpenCourseware
25,Computer Networks,"How does the global network infrastructure work and what are the design principles on which it is based? In what ways are these design principles compromised in practice? How do we make it work better in today’s world? How do we ensure that it will work well in the future in the face of rapidly growing scale and heterogeneity? And how should Internet applications be written, so they can obtain the best possible performance both for themselves and for others using the infrastructure? These are some issues that are grappled with in this course. The course will focus on the design, implementation, analysis, and evaluation of large-scale networked systems.
Topics include internetworking philosophies, unicast and multicast routing, congestion control, network quality of service, mobile networking, router architectures, network-aware applications, content dissemination systems, network security, and performance issues. Material for the course will be drawn from research papers, industry white papers, and Internet RFCs.
",https://ocw.mit.edu/courses/6-829-computer-networks-fall-2002/,MIT OpenCourseware
26,Medical Computing,"The focus of the course is on medical science and practice in the age of automation and the genome, both present and future.
It ncludes an analysis of the computational needs of clinical medicine, a review systems and approaches that have been used to support those needs, and an examination of new technologies.",https://ocw.mit.edu/courses/hst-950j-medical-computing-spring-2003/,MIT OpenCourseware
27,Computer Language Engineering,"This course analyzes issues associated with the implementation of higher-level programming languages. Topics covered include: fundamental concepts, functions, and structures of compilers, the interaction of theory and practice, and using tools in building software. The course includes a multi-person project on compiler design and implementation.",https://ocw.mit.edu/courses/6-035-computer-language-engineering-spring-2010/,MIT OpenCourseware
28,Computational Evolutionary Biology,"Why has it been easier to develop a vaccine to eliminate polio than to control influenza or AIDS? Has there been natural selection for a ’language gene’? Why are there no animals with wheels? When does ‘maximizing fitness’ lead to evolutionary extinction? How are sex and parasites related? Why don’t snakes eat grass? Why don’t we have eyes in the back of our heads? How does modern genomics illustrate and challenge the field?
This course analyzes evolution from a computational, modeling, and engineering perspective. The course has extensive hands-on laboratory exercises in model-building and analyzing evolutionary data.
",https://ocw.mit.edu/courses/6-877j-computational-evolutionary-biology-fall-2005/,MIT OpenCourseware
29,Algorithms for Computational Biology,"This course is offered to undergraduates and addresses several algorithmic challenges in computational biology. The principles of algorithmic design for biological datasets are studied and existing algorithms analyzed for application to real datasets. Topics covered include: biological sequence analysis, gene identification, regulatory motif discovery, genome assembly, genome duplication and rearrangements, evolutionary theory, clustering algorithms, and scale-free networks.",https://ocw.mit.edu/courses/6-096-algorithms-for-computational-biology-spring-2005/,MIT OpenCourseware
30,Algorithms for Computational Biology,"This course is offered to undergraduates and addresses several algorithmic challenges in computational biology. The principles of algorithmic design for biological datasets are studied and existing algorithms analyzed for application to real datasets. Topics covered include: biological sequence analysis, gene identification, regulatory motif discovery, genome assembly, genome duplication and rearrangements, evolutionary theory, clustering algorithms, and scale-free networks.",https://ocw.mit.edu/courses/6-096-algorithms-for-computational-biology-spring-2005/,MIT OpenCourseware
31,Computer Graphics,"This course provides introduction to computer graphics algorithms, software and hardware. Topics include: ray tracing, the graphics pipeline, transformations, texture mapping, shadows, sampling, global illumination, splines, animation and color. This course offers 6 Engineering Design Points in MIT’s EECS program.",https://ocw.mit.edu/courses/6-837-computer-graphics-fall-2012/,MIT OpenCourseware
32,Computational Models of Discourse,"This course is a graduate level introduction to automatic discourse processing. The emphasis will be on methods and models that have applicability to natural language and speech processing.
The class will cover the following topics: discourse structure, models of coherence and cohesion, plan recognition algorithms, and text segmentation. We will study symbolic as well as machine learning methods for discourse analysis. We will also discuss the use of these methods in a variety of applications ranging from dialogue systems to automatic essay writing.
This subject qualifies as an Artificial Intelligence and Applications concentration subject.
",https://ocw.mit.edu/courses/6-892-computational-models-of-discourse-spring-2004/,MIT OpenCourseware
33,Projects in Microscale Engineering for the Life Sciences,"This course is a project-based introduction to manipulating and characterizing cells and biological molecules using microfabricated tools. It is designed for first year undergraduate students. In the first half of the term, students perform laboratory exercises designed to introduce (1) the design, manufacture, and use of microfluidic channels, (2) techniques for sorting and manipulating cells and biomolecules, and (3) making quantitative measurements using optical detection and fluorescent labeling. In the second half of the term, students work in small groups to design and test a microfluidic device to solve a real-world problem of their choosing. Includes exercises in written and oral communication and team building.",https://ocw.mit.edu/courses/hst-410j-projects-in-microscale-engineering-for-the-life-sciences-spring-2007/,MIT OpenCourseware
34,Ethics for Engineers: Artificial Intelligence,"Artificial Intelligence (AI), and the algorithmic judgment at its core, is developing at breakneck speed. This version of the popular Ethics for Engineers course focuses on the ethics issues involved in the latest developments of computer science.",https://ocw.mit.edu/courses/10-01-ethics-for-engineers-artificial-intelligence-spring-2020/,MIT OpenCourseware
35,Structure and Interpretation of Computer Programs,"This course introduces students to the principles of computation. Upon completion of 6.001, students should be able to explain and apply the basic methods from programming languages to analyze computational systems, and to generate computational solutions to abstract problems. Substantial weekly programming assignments are an integral part of the course. This course is worth 4 Engineering Design Points.",https://ocw.mit.edu/courses/6-001-structure-and-interpretation-of-computer-programs-spring-2005/,MIT OpenCourseware
36,Foundations of Computational and Systems Biology,"This course is an introduction to computational biology emphasizing the fundamentals of nucleic acid and protein sequence and structural analysis; it also includes an introduction to the analysis of complex biological systems. Topics covered in the course include principles and methods used for sequence alignment, motif finding, structural modeling, structure prediction and network modeling, as well as currently emerging research areas.",https://ocw.mit.edu/courses/7-91j-foundations-of-computational-and-systems-biology-spring-2014/,MIT OpenCourseware
37,The Art of Approximation in Science and Engineering,"This course teaches simple reasoning techniques for complex phenomena: divide and conquer, dimensional analysis, extreme cases, continuity, scaling, successive approximation, balancing, cheap calculus, and symmetry. Applications are drawn from the physical and biological sciences, mathematics, and engineering. Examples include bird and machine flight, neuron biophysics, weather, prime numbers, and animal locomotion. Emphasis is on low-cost experiments to test ideas and on fostering curiosity about phenomena in the world.",https://ocw.mit.edu/courses/6-055j-the-art-of-approximation-in-science-and-engineering-spring-2008/,MIT OpenCourseware
38,Teaching College-Level Science and Engineering,"This participatory seminar focuses on the knowledge and skills necessary for teaching science and engineering in higher education. It is designed for graduate students interested in an academic career, and anyone else interested in teaching. Students research and present a relevant topic of particular interest. The subject is appropriate for both novices and those with teaching experience.",https://ocw.mit.edu/courses/5-95j-teaching-college-level-science-and-engineering-fall-2015/,MIT OpenCourseware
39,Foundations of Algorithms and Computational Techniques in Systems Biology,"This subject describes and illustrates computational approaches to solving problems in systems biology. A series of case-studies will be explored that demonstrate how an effective match between the statement of a biological problem and the selection of an appropriate algorithm or computational technique can lead to fundamental advances. The subject will cover several discrete and numerical algorithms used in simulation, feature extraction, and optimization for molecular, network, and systems models in biology.",https://ocw.mit.edu/courses/20-482j-foundations-of-algorithms-and-computational-techniques-in-systems-biology-spring-2006/,MIT OpenCourseware
40,Computer System Architecture,6.823 is a course in the department’s “Computer Systems and Architecture” concentration. 6.823 is a study of the evolution of computer architecture and the factors influencing the design of hardware and software elements of computer systems. Topics may include: instruction set design; processor micro-architecture and pipelining; cache and virtual memory organizations; protection and sharing; I/O and interrupts; in-order and out-of-order superscalar architectures; VLIW machines; vector supercomputers; multithreaded architectures; symmetric multiprocessors; and parallel computers.,https://ocw.mit.edu/courses/6-823-computer-system-architecture-fall-2005/,MIT OpenCourseware
41,Quantum Information Science,"This is an advanced graduate course on quantum computation and quantum information, for which prior knowledge of quantum mechanics is required. Topics include quantum computation, advanced quantum error correction codes, fault tolerance, quantum algorithms beyond factoring, properties of quantum entanglement, and quantum protocols and communication complexity.",https://ocw.mit.edu/courses/mas-865j-quantum-information-science-spring-2006/,MIT OpenCourseware
42,Computer Language Engineering (SMA 5502),"6.035 is a course within the department’s “Computer Systems and Architecture” concentration. This course analyzes issues associated with the implementation of high-level programming languages. Topics covered include: fundamental concepts, functions, and structures of compilers, basic program optimization techniques, the interaction of theory and practice, and using tools in building software. The course features a multi-person project on design and implementation of a compiler that is written in Java® and generates MIPS executable machine code. This course is worth 8 Engineering Design Points.
This course was also taught as part of the Singapore-MIT Alliance (SMA) programme as course number SMA 5502 (Computer Language Engineering).
",https://ocw.mit.edu/courses/6-035-computer-language-engineering-sma-5502-fall-2005/,MIT OpenCourseware
43,Teaching College-Level Science and Engineering,"This participatory seminar focuses on the knowledge and skills necessary for teaching science and engineering in higher education. This course is designed for graduate students interested in an academic career, and anyone else interested in teaching. Readings and discussions include: teaching equations for understanding, designing exam and homework questions, incorporating histories of science, creating absorbing lectures, teaching for transfer, the evils of PowerPoint, and planning a course. The subject is appropriate for both novices and those with teaching experience.",https://ocw.mit.edu/courses/5-95j-teaching-college-level-science-and-engineering-spring-2009/,MIT OpenCourseware
44,Distributed Computer Systems Engineering,"This course covers abstractions and implementation techniques for the design of distributed systems. Topics include: server design, network programming, naming, storage systems, security, and fault tolerance. The assigned readings for the course are from current literature. This course is worth 6 Engineering Design Points.",https://ocw.mit.edu/courses/6-824-distributed-computer-systems-engineering-spring-2006/,MIT OpenCourseware
45,Classical Mechanics: A Computational Approach,"We will study the fundamental principles of classical mechanics, with a modern emphasis on the qualitative structure of phase space. We will use computational ideas to formulate the principles of mechanics precisely. Expression in a computational framework encourages clear thinking and active exploration.
We will consider the following topics: the Lagrangian formulation; action, variational principles, and equations of motion; Hamilton’s principle; conserved quantities; rigid bodies and tops; Hamiltonian formulation and canonical equations; surfaces of section; chaos; canonical transformations and generating functions; Liouville’s theorem and Poincaré integral invariants; Poincaré-Birkhoff and KAM theorems; invariant curves and cantori; nonlinear resonances; resonance overlap and transition to chaos; properties of chaotic motion.
Ideas will be illustrated and supported with physical examples. We will make extensive use of computing to capture methods, for simulation, and for symbolic analysis.
",https://ocw.mit.edu/courses/12-620j-classical-mechanics-a-computational-approach-fall-2008/,MIT OpenCourseware
46,Advanced Algorithms,"This is a graduate course on the design and analysis of algorithms, covering several advanced topics not studied in typical introductory courses on algorithms. It is especially designed for doctoral students interested in theoretical computer science.",https://ocw.mit.edu/courses/6-854j-advanced-algorithms-fall-2008/,MIT OpenCourseware
47,Computational Personal Genomics: Making Sense of Complete Genomes,"With the growing availability and lowering costs of genotyping and personal genome sequencing, the focus has shifted from the ability to obtain the sequence to the ability to make sense of the resulting information. This course is aimed at exploring the computational challenges associated with interpreting how sequence differences between individuals lead to phenotypic differences in gene expression, disease predisposition, or response to treatment.",https://ocw.mit.edu/courses/6-881-computational-personal-genomics-making-sense-of-complete-genomes-spring-2016/,MIT OpenCourseware
48,Natural Language and the Computer Representation of Knowledge,"6.863 is a laboratory-oriented course on the theory and practice of building computer systems for human language processing, with an emphasis on the linguistic, cognitive, and engineering foundations for understanding their design.",https://ocw.mit.edu/courses/6-863j-natural-language-and-the-computer-representation-of-knowledge-spring-2003/,MIT OpenCourseware
49,Pervasive Human Centric Computing (SMA 5508),"This course is broad, covering a wide range of topics that have to do with the post-pc era of computing. It is a hands-on project course that also includes some foundational subjects. Students will program iPAQ handheld computers, cell phones (series 60 phones), speech processing, vision, Cricket location systems, GPS, and more. Most of the programming will be using Python®, but Python® can be learned and mastered during the course.
This course was also taught as part of the Singapore-MIT Alliance (SMA) programme as course number SMA 5508 (Pervasive Computing).
",https://ocw.mit.edu/courses/6-883-pervasive-human-centric-computing-sma-5508-spring-2006/,MIT OpenCourseware
50,Cryptography and Cryptanalysis,"This course features a rigorous introduction to modern cryptography, with an emphasis on the fundamental cryptographic primitives of public-key encryption, digital signatures, pseudo-random number generation, and basic protocols and their computational complexity requirements.",https://ocw.mit.edu/courses/6-875-cryptography-and-cryptanalysis-spring-2005/,MIT OpenCourseware
51,Essential Coding Theory,"This course introduces the theory of error-correcting codes to computer scientists. This theory, dating back to the works of Shannon and Hamming from the late 40’s, overflows with theorems, techniques, and notions of interest to theoretical computer scientists. The course will focus on results of asymptotic and algorithmic significance. Principal topics include:

Construction and existence results for error-correcting codes.
Limitations on the combinatorial performance of error-correcting codes.
Decoding algorithms.
Applications in computer science.

",https://ocw.mit.edu/courses/6-895-essential-coding-theory-fall-2004/,MIT OpenCourseware
52,Climate Change Seminar,"This course provides a broad overview of issues related to climate change, with an emphasis on those aspects most relevant to computer scientists. Topics include climate science, climate models and simulations, decision-making under uncertainty, economics, mitigation strategies, adaptation strategies, geoengineering, policy-making, messaging, and politics.The course will culminate in a presentation of a research project which might include a paper, a blog, software etc.",https://ocw.mit.edu/courses/6-s898-climate-change-seminar-fall-2019/,MIT OpenCourseware
53,Information and Entropy,"This course explores the ultimate limits to communication and computation, with an emphasis on the physical nature of information and information processing. Topics include: information and computation, digital signals, codes and compression, applications such as biological representations of information, logic circuits, computer architectures, and algorithmic information, noise, probability, error correction, reversible and irreversible operations, physics of computation, and quantum computation. The concept of entropy is applied to channel capacity and to the second law of thermodynamics.",https://ocw.mit.edu/courses/6-050j-information-and-entropy-spring-2008/,MIT OpenCourseware
54,"Introduction to Computational Thinking with Julia, with Applications to Modeling the COVID-19 Pandemic","This half-semester course introduces computational thinking through applications of data science, artificial intelligence, and mathematical models using the Julia programming language. This Spring 2020 version is a fast-tracked curriculum adaptation to focus on applications to COVID-19 responses.
See the MIT News article Computational Thinking Class Enables Students to Engage in Covid-19 Response
",https://ocw.mit.edu/courses/18-s190-introduction-to-computational-thinking-with-julia-with-applications-to-modeling-the-covid-19-pandemic-spring-2020/,MIT OpenCourseware
55,Advanced Topics in Cryptography,"The topics covered in this course include interactive proofs, zero-knowledge proofs, zero-knowledge proofs of knowledge, non-interactive zero-knowledge proofs, secure protocols, two-party secure computation, multiparty secure computation, and chosen-ciphertext security.",https://ocw.mit.edu/courses/6-876j-advanced-topics-in-cryptography-spring-2003/,MIT OpenCourseware
56,Quantum Complexity Theory,"This course is an introduction to quantum computational complexity theory, the study of the fundamental capabilities and limitations of quantum computers. Topics include complexity classes, lower bounds, communication complexity, proofs, advice, and interactive proof systems in the quantum world. The objective is to bring students to the research frontier.",https://ocw.mit.edu/courses/6-845-quantum-complexity-theory-fall-2010/,MIT OpenCourseware
57,Applied Superconductivity,"This course provides a phenomenological approach to superconductivity, with emphasis on superconducting electronics. Topics include: electrodynamics of superconductors, London’s model, flux quantization, Josephson Junctions, superconducting quantum devices, equivalent circuits, high-speed superconducting electronics, and quantized circuits for quantum computing. The course also provides an overview of type II superconductors, critical magnetic fields, pinning, the critical state model, superconducting materials, and microscopic theory of superconductivity.",https://ocw.mit.edu/courses/6-763-applied-superconductivity-fall-2005/,MIT OpenCourseware
58,Multivariable Control Systems,This course uses computer-aided design methodologies for synthesis of multivariable feedback control systems. Topics covered include: performance and robustness trade-offs; model-based compensators; Q-parameterization; ill-posed optimization problems; dynamic augmentation; linear-quadratic optimization of controllers; H-infinity controller design; Mu-synthesis; model and compensator simplification; and nonlinear effects. The assignments for the course comprise of computer-aided (MATLAB®) design problems.,https://ocw.mit.edu/courses/6-245-multivariable-control-systems-spring-2004/,MIT OpenCourseware
59,Theory of Parallel Hardware (SMA 5511),"6.896 covers mathematical foundations of parallel hardware, from computer arithmetic to physical design, focusing on algorithmic underpinnings. Topics covered include: arithmetic circuits, parallel prefix, systolic arrays, retiming, clocking methodologies, boolean logic, sorting networks, interconnection networks, hypercubic networks, P-completeness, VLSI layout theory, reconfigurable wiring, fat-trees, and area-time complexity.
This course was also taught as part of the Singapore-MIT Alliance (SMA) programme as course number SMA 5511 (Theory of Parallel Hardware).
",https://ocw.mit.edu/courses/6-896-theory-of-parallel-hardware-sma-5511-spring-2004/,MIT OpenCourseware
60,Nonlinear Programming,"6.252J is a course in the department’s “Communication, Control, and Signal Processing” concentration. This course provides a unified analytical and computational approach to nonlinear optimization problems. The topics covered in this course include: unconstrained optimization methods, constrained optimization methods, convex analysis, Lagrangian relaxation, nondifferentiable optimization, and applications in integer programming. There is also a comprehensive treatment of optimality conditions, Lagrange multiplier theory, and duality theory. Throughout the course, applications are drawn from control, communications, power systems, and resource allocation problems.",https://ocw.mit.edu/courses/6-252j-nonlinear-programming-spring-2003/,MIT OpenCourseware
61,Advanced Complexity Theory,"This graduate-level course focuses on current research topics in computational complexity theory. Topics include: Nondeterministic, alternating, probabilistic, and parallel computation models; Boolean circuits; Complexity classes and complete sets; The polynomial-time hierarchy; Interactive proof systems; Relativization; Definitions of randomness; Pseudo-randomness and derandomizations;Interactive proof systems and probabilistically checkable proofs.",https://ocw.mit.edu/courses/18-405j-advanced-complexity-theory-spring-2016/,MIT OpenCourseware
62,Introduction to Algorithms,"This course provides an introduction to mathematical modeling of computational problems. It covers the common algorithms, algorithmic paradigms, and data structures used to solve these problems. The course emphasizes the relationship between algorithms and programming, and introduces basic performance measures and analysis techniques for these problems.",https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2008/,MIT OpenCourseware
63,Design and Analysis of Algorithms,"Techniques for the design and analysis of efficient algorithms, emphasizing methods useful in practice. Topics include sorting; search trees, heaps, and hashing; divide-and-conquer; dynamic programming; greedy algorithms; amortized analysis; graph algorithms; and shortest paths. Advanced topics may include network flow, computational geometry, number-theoretic algorithms, polynomial and matrix calculations, caching, and parallel computing.",https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2012/,MIT OpenCourseware
64,A Gentle Introduction to Programming Using Python,"This course will provide a gentle introduction to programming using Python™ for highly motivated students with little or no prior experience in programming computers. The course will focus on planning and organizing programs, as well as the grammar of the Python programming language. Lectures will be interactive featuring in-class exercises with lots of support from the course staff.
This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.
",https://ocw.mit.edu/courses/6-189-a-gentle-introduction-to-programming-using-python-january-iap-2008/,MIT OpenCourseware
65,The Society of Mind,"This course is an introduction to the theory that tries to explain how minds are made from collections of simpler processes. It treats such aspects of thinking as vision, language, learning, reasoning, memory, consciousness, ideals, emotions, and personality. It incorporates ideas from psychology, artificial intelligence, and computer science to resolve theoretical issues such as wholes vs. parts, structural vs. functional descriptions, declarative vs. procedural representations, symbolic vs. connectionist models, and logical vs. common-sense theories of learning.",https://ocw.mit.edu/courses/6-868j-the-society-of-mind-fall-2011/,MIT OpenCourseware
66,Advanced Data Structures,"Data structures play a central role in modern computer science. You interact with data structures even more often than with algorithms (think Google, your mail server, and even your network routers). In addition, data structures are essential building blocks in obtaining efficient algorithms. This course covers major results and current directions of research in data structure.
Acknowledgments
Thanks to videographers Martin Demaine and Justin Zhang.
",https://ocw.mit.edu/courses/6-851-advanced-data-structures-spring-2012/,MIT OpenCourseware
67,Probabilistic Systems Analysis and Applied Probability,"Welcome to 6.041/6.431, a subject on the modeling and analysis of random phenomena and processes, including the basics of statistical inference. Nowadays, there is broad consensus that the ability to think probabilistically is a fundamental component of scientific literacy. For example:

The concept of statistical significance (to be touched upon at the end of this course) is considered by the Financial Times as one of “The Ten Things Everyone Should Know About Science”.
A recent Scientific American article argues that statistical literacy is crucial in making health-related decisions.
Finally, an article in the New York Times identifies statistical data analysis as an upcoming profession, valuable everywhere, from Google and Netflix to the Office of Management and Budget.

The aim of this class is to introduce the relevant models, skills, and tools, by combining mathematics with conceptual understanding and intuition.
",https://ocw.mit.edu/courses/6-041-probabilistic-systems-analysis-and-applied-probability-fall-2010/,MIT OpenCourseware
68,"Introduction to Electronics, Signals, and Measurement","The course is designed to provide a practical - hands on - introduction to electronics with a focus on measurement and signals. The prerequisites are courses in differential equations, as well as electricity and magnetism. No prior experience with electronics is necessary. The course will integrate demonstrations and laboratory examples with lectures on the foundations. Throughout the course we will use modern “virtual instruments” as test-beds for understanding electronics. The aim of the course is to provide students with the practical knowledge necessary to work in a modern science or engineering setting.",https://ocw.mit.edu/courses/6-071j-introduction-to-electronics-signals-and-measurement-spring-2006/,MIT OpenCourseware
69,Bioinformatics and Proteomics,"This interdisciplinary course provides a hands-on approach to students in the topics of bioinformatics and proteomics. Lectures and labs cover sequence analysis, microarray expression analysis, Bayesian methods, control theory, scale-free networks, and biotechnology applications. Designed for those with a computational and/or engineering background, it will include current real-world examples, actual implementations, and engineering design issues. Where applicable, engineering issues from signal processing, network theory, machine learning, robotics and other domains will be expounded upon.",https://ocw.mit.edu/courses/6-092-bioinformatics-and-proteomics-january-iap-2005/,MIT OpenCourseware
70,Bioinformatics and Proteomics,"This interdisciplinary course provides a hands-on approach to students in the topics of bioinformatics and proteomics. Lectures and labs cover sequence analysis, microarray expression analysis, Bayesian methods, control theory, scale-free networks, and biotechnology applications. Designed for those with a computational and/or engineering background, it will include current real-world examples, actual implementations, and engineering design issues. Where applicable, engineering issues from signal processing, network theory, machine learning, robotics and other domains will be expounded upon.",https://ocw.mit.edu/courses/6-092-bioinformatics-and-proteomics-january-iap-2005/,MIT OpenCourseware
71,Introduction to Numerical Simulation (SMA 5211),"6.336J is an introduction to computational techniques for the simulation of a large variety of engineering and physical systems. Applications are drawn from aerospace, mechanical, electrical, chemical and biological engineering, and materials science. Topics include: mathematical formulations; network problems; sparse direct and iterative matrix solution techniques; Newton methods for nonlinear problems; discretization methods for ordinary, time-periodic and partial differential equations, fast methods for partial differential and integral equations, techniques for dynamical system model reduction and approaches for molecular dynamics.
This course was also taught as part of the Singapore-MIT Alliance (SMA) programme as course number SMA 5211 (Introduction to Numerical Simulation).
",https://ocw.mit.edu/courses/6-336j-introduction-to-numerical-simulation-sma-5211-fall-2003/,MIT OpenCourseware
72,Theory of Parallel Systems (SMA 5509),"6.895 covers theoretical foundations of general-purpose parallel computing systems, from languages to architecture. The focus is on the algorithmic underpinnings of parallel systems. The topics for the class will vary depending on student interest, but will likely include multithreading, synchronization, race detection, load balancing, memory consistency, routing networks, message-routing algorithms, and VLSI layout theory. The class will emphasize randomized algorithms and probabilistic analysis, including high-probability arguments.
This course was also taught as part of the Singapore-MIT Alliance (SMA) programme as course number SMA 5509 (Theory of Parallel Systems).
",https://ocw.mit.edu/courses/6-895-theory-of-parallel-systems-sma-5509-fall-2003/,MIT OpenCourseware
73,Network Optimization,"15.082J/6.855J/ESD.78J is a graduate subject in the theory and practice of network flows and its extensions. Network flow problems form a subclass of linear programming problems with applications to transportation, logistics, manufacturing, computer science, project management, and finance, as well as a number of other domains. This subject will survey some of the applications of network flows and focus on key special cases of network flow problems including the following: the shortest path problem, the maximum flow problem, the minimum cost flow problem, and the multi-commodity flow problem. We will also consider other extensions of network flow problems.",https://ocw.mit.edu/courses/15-082j-network-optimization-fall-2010/,MIT OpenCourseware
74,Introduction to Bioengineering (BE.010J),Bioengineering at MIT is represented by the diverse curricula offered by most Departments in the School of Engineering. This course samples the wide variety of bioengineering options for students who plan to major in one of the undergraduate Engineering degree programs. The beginning lectures describe the science basis for bioengineering with particular emphasis on molecular cell biology and systems biology. Bioengineering faculty will then describe the bioengineering options in a particular engineering course as well as the type of research conducted by faculty in the department.,https://ocw.mit.edu/courses/20-010j-introduction-to-bioengineering-be-010j-spring-2006/,MIT OpenCourseware
75,Probabilistic Systems Analysis and Applied  Probability,"This course is offered both to undergraduates (6.041) and graduates (6.431), but the assignments differ. 6.041/6.431 introduces students to the modeling, quantification, and analysis of uncertainty. Topics covered include: formulation and solution in sample space, random variables, transform techniques, simple random processes and their probability distributions, Markov processes, limit theorems, and elements of statistical inference.",https://ocw.mit.edu/courses/6-041-probabilistic-systems-analysis-and-applied-probability-spring-2006/,MIT OpenCourseware
76,Distributed Algorithms,"Distributed algorithms are algorithms designed to run on multiple processors, without tight centralized control. In general, they are harder to design and harder to understand than single-processor sequential algorithms. Distributed algorithms are used in many practical systems, ranging from large computer networks to multiprocessor shared-memory systems. They also have a rich theory, which forms the subject matter for this course.
The core of the material will consist of basic distributed algorithms and impossibility results, as covered in Prof. Lynch’s book Distributed Algorithms. This will be supplemented by some updated material on topics such as self-stabilization, wait-free computability, and failure detectors, and some new material on scalable shared-memory concurrent programming.
",https://ocw.mit.edu/courses/6-852j-distributed-algorithms-fall-2009/,MIT OpenCourseware
77,Seminar in Electric Power Systems,"This course comprises of a seminar on planning and operation of modern electric power systems. Content varies with current interests of instructor and class; emphasis on engineering aspects, but economic issues may be examined too. Core topics include: overview of power system structure and operation; representation of components, including transmission lines, transformers, generating plants, loads; power flow analysis, dynamics and control of multimachine systems, steady-state and transient stability, system protection; economic dispatch; mobile and isolated power systems; computation and simulation.",https://ocw.mit.edu/courses/6-691-seminar-in-electric-power-systems-spring-2006/,MIT OpenCourseware
78,Autonomous Robot Design Competition,"6.270 is a hands-on, learn-by-doing class, in which participants design and build a robot that will play in a competition at the end of January. The goal for the students is to design a machine that will be able to navigate its way around the playing surface, recognize other opponents, and manipulate game objects. Unlike the machines in Design and Manufacturing I (2.007), 6.270 robots are totally autonomous, so once a round begins, there is no human intervention.
The goal of 6.270 is to teach students about robotic design by giving them the hardware, software, and information they need to design, build, and debug their own robot. The subject includes concepts and applications that are related to various MIT classes (e.g. 6.001, 6.002, 6.004, and 2.007), though there are no formal prerequisites for 6.270.
",https://ocw.mit.edu/courses/6-270-autonomous-robot-design-competition-january-iap-2005/,MIT OpenCourseware
79,Probabilistic Systems Analysis and Applied Probability,"This course introduces students to the modeling, quantification, and analysis of uncertainty.  The tools of probability theory, and of the related field of statistical inference, are the keys for being able to analyze and make sense of data. These tools underlie important advances in many fields, from the basic sciences to engineering and management.
Course Format

 This course has been designed for independent study. It provides everything you will need to understand the concepts covered in the course. The materials include:

Lecture Videos by MIT Professor John Tsitsiklis
Lecture Slides and Readings
Recitation Problems and Solutions
Recitation Help Videos by MIT Teaching Assistants
Tutorial Problems and Solutions
Tutorial Help Videos by MIT Teaching Assistants
Problem Sets with Solutions
Exams with Solutions

Related Resource

A complementary resource, Introduction to Probability, is provided by the videos developed for an EdX version of 6.041. These videos cover more or less the same content, in somewhat different order, and in somewhat more detail than the videotaped live lectures.
",https://ocw.mit.edu/courses/6-041sc-probabilistic-systems-analysis-and-applied-probability-fall-2013/,MIT OpenCourseware
80,Artificial Intelligence,"This course introduces students to the basic knowledge representation, problem solving, and learning methods of artificial intelligence. Upon completion of 6.034, students should be able to develop intelligent systems by assembling solutions to concrete computational problems; understand the role of knowledge representation, problem solving, and learning in intelligent-system engineering; and appreciate the role of problem solving, vision, and language in understanding human intelligence from a computational perspective.",https://ocw.mit.edu/courses/6-034-artificial-intelligence-fall-2010/,MIT OpenCourseware
81,User Interface Design and Implementation,"6.831/6.813 examines human-computer interaction in the context of graphical user interfaces. The course covers human capabilities, design principles, prototyping techniques, evaluation techniques, and the implementation of graphical user interfaces. Deliverables include short programming assignments and a semester-long group project. Students taking the graduate version also have readings from current literature and additional assignments.",https://ocw.mit.edu/courses/6-831-user-interface-design-and-implementation-spring-2011/,MIT OpenCourseware
82,Introduction to Algorithms,"This course provides an introduction to mathematical modeling of computational problems. It covers the common algorithms, algorithmic paradigms, and data structures used to solve these problems. The course emphasizes the relationship between algorithms and programming, and introduces basic performance measures and analysis techniques for these problems.",https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-fall-2011/,MIT OpenCourseware
83,Nanomaker,"This course links clean energy sources and storage technology to energy consumption case studies to give students a concept of the full circle of production and consumption. Specifically, photovoltaic, organic photovoltaic, piezoelectricity and thermoelectricity sources are applied to electrophoresis, lab on a chip, and paper microfluidic applications–relevant analytical techniques in biology and chemistry. Hands-on experimentation with everyday materials and equipment help connect the theory with the implementation. Complementary laboratories fabricating LEDs, organic LEDs and spectrometers introduce the diagnostic tools used to characterize energy efficiency.
This course is one of many OCW Energy Courses, and it is an elective subject in MIT’s undergraduate Energy Studies Minor. This Institute-wide program complements the deep expertise obtained in any major with a broad understanding of the interlinked realms of science, technology, and social sciences as they relate to energy and associated environmental challenges.
",https://ocw.mit.edu/courses/6-s079-nanomaker-spring-2013/,MIT OpenCourseware
84,Queues: Theory and Applications,"This class deals with the modeling and analysis of queueing systems, with applications in communications, manufacturing, computers, call centers, service industries and transportation. Topics include birth-death processes and simple Markovian queues, networks of queues and product form networks, single and multi-server queues, multi-class queueing networks, fluid models, adversarial queueing networks, heavy-traffic theory and diffusion approximations. The course will cover state of the art results which lead to research opportunities.",https://ocw.mit.edu/courses/15-072j-queues-theory-and-applications-spring-2006/,MIT OpenCourseware
85,Electromagnetics and Applications,"This course explores electromagnetic phenomena in modern applications, including wireless and optical communications, circuits, computer interconnects and peripherals, microwave communications and radar, antennas, sensors, micro-electromechanical systems, and power generation and transmission. Fundamentals include quasistatic and dynamic solutions to Maxwell’s equations; waves, radiation, and diffraction; coupling to media and structures; guided waves; resonance; acoustic analogs; and forces, power, and energy.",https://ocw.mit.edu/courses/6-013-electromagnetics-and-applications-spring-2009/,MIT OpenCourseware
86,Quantitative Physiology: Organ Transport Systems,"This course elaborates on the application of the principles of energy and mass flow to major human organ systems. It discusses mechanisms of regulation and homeostasis. It also discusses anatomical, physiological, and pathophysiological features of the cardiovascular, respiratory, and renal systems. There is emphasis on those systems, features, and devices that are most illuminated by the methods of physical sciences.",https://ocw.mit.edu/courses/hst-542j-quantitative-physiology-organ-transport-systems-spring-2004/,MIT OpenCourseware
87,Advanced Stochastic Processes,"This class covers the analysis and modeling of stochastic processes. Topics include measure theoretic probability, martingales, filtration, and stopping theorems, elements of large deviations theory, Brownian motion and reflected Brownian motion, stochastic integration and Ito calculus and functional limit theorems. In addition, the class will go over some applications to finance theory, insurance, queueing and inventory models.",https://ocw.mit.edu/courses/15-070j-advanced-stochastic-processes-fall-2013/,MIT OpenCourseware
88,A Gentle Introduction to Programming Using Python,"This course will provide a gentle, yet intense, introduction to programming using Python for highly motivated students with little or no prior experience in programming. The course will focus on planning and organizing programs, as well as the grammar of the Python programming language.
The course is designed to help prepare students for 6.01 Introduction to EECS I. 6.01 assumes some knowledge of Python upon entering; the course material for 6.189 has been specially designed to make sure that concepts important to 6.01 are covered.
This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.
",https://ocw.mit.edu/courses/6-189-a-gentle-introduction-to-programming-using-python-january-iap-2011/,MIT OpenCourseware
89,Algorithms for Inference,"This is a graduate-level introduction to the principles of statistical inference with probabilistic models defined using graphical representations. The material in this course constitutes a common foundation for work in machine learning, signal processing, artificial intelligence, computer vision, control, and communication. Ultimately, the subject is about teaching you contemporary approaches to, and perspectives on, problems of statistical inference.",https://ocw.mit.edu/courses/6-438-algorithms-for-inference-fall-2014/,MIT OpenCourseware
90,Circuits and Electronics,"6.002 is designed to serve as a first course in an undergraduate electrical engineering (EE), or electrical engineering and computer science (EECS) curriculum. At MIT, 6.002 is in the core of department subjects required for all undergraduates in EECS.
The course introduces the fundamentals of the lumped circuit abstraction. Topics covered include: resistive elements and networks; independent and dependent sources; switches and MOS transistors; digital abstraction; amplifiers; energy storage elements; dynamics of first- and second-order networks; design in the time and frequency domains; and analog and digital circuits and applications. Design and lab exercises are also significant components of the course. 6.002 is worth 4 Engineering Design Points. The 6.002 content was created collaboratively by Profs. Anant Agarwal and Jeffrey H. Lang.
The course uses the required textbook Foundations of Analog and Digital Electronic Circuits. Agarwal, Anant, and Jeffrey H. Lang. San Mateo, CA: Morgan Kaufmann Publishers, Elsevier, July 2005. ISBN: 9781558607354.
",https://ocw.mit.edu/courses/6-002-circuits-and-electronics-spring-2007/,MIT OpenCourseware
91,Electromagnetics and Applications,"This course explores electromagnetic phenomena in modern applications, including wireless communications, circuits, computer interconnects and peripherals, optical fiber links and components, microwave communications and radar, antennas, sensors, micro-electromechanical systems, motors, and power generation and transmission. Fundamentals covered include: quasistatic and dynamic solutions to Maxwell’s equations; waves, radiation, and diffraction; coupling to media and structures; guided and unguided waves; resonance; and forces, power, and energy.
Acknowledgments
The instructors would like to thank Robert Haussman for transcribing into LaTeX the problem set and Quiz 2 solutions.
",https://ocw.mit.edu/courses/6-013-electromagnetics-and-applications-fall-2005/,MIT OpenCourseware
92,Artificial Intelligence,"This course introduces representations, techniques, and architectures used to build applied systems and to account for intelligence from a computational point of view. This course also explores applications of rule chaining, heuristic search, logic, constraint propagation, constrained search, and other problem-solving paradigms. In addition, it covers applications of decision trees, neural nets, SVMs and other learning paradigms.",https://ocw.mit.edu/courses/6-034-artificial-intelligence-spring-2005/,MIT OpenCourseware
93,Quantum Optical Communication,"6.453 Quantum Optical Communication is one of a collection of MIT classes that deals with aspects of an emerging field known as quantum information science. This course covers Quantum Optics, Single-Mode and Two-Mode Quantum Systems, Multi-Mode Quantum Systems, Nonlinear Optics, and Quantum System Theory.",https://ocw.mit.edu/courses/6-453-quantum-optical-communication-fall-2016/,MIT OpenCourseware
94,Introduction to EECS II: Digital Communication Systems,"An introduction to several fundamental ideas in electrical engineering and computer science, using digital communication systems as the vehicle. The three parts of the course—bits, signals, and packets—cover three corresponding layers of abstraction that form the basis of communication systems like the Internet.
The course teaches ideas that are useful in other parts of EECS: abstraction, probabilistic analysis, superposition, time and frequency-domain representations, system design principles and trade-offs, and centralized and distributed algorithms. The course emphasizes connections between theoretical concepts and practice using programming tasks and some experiments with real-world communication channels.
",https://ocw.mit.edu/courses/6-02-introduction-to-eecs-ii-digital-communication-systems-fall-2012/,MIT OpenCourseware
95,Introduction to CS and Programming using Python,"This subject is aimed at students with little to no programming experience. It aims to provide students with an understanding of the role computation can play in solving problems. It also aims to help students, regardless of their major, feel justifiably confident in their ability to write simple programs that allow them to accomplish useful goals. The class will use the Python 3 programming language.",https://ocw.mit.edu/courses/6-100l-introduction-to-cs-and-programming-using-python-fall-2022/,MIT OpenCourseware
96,Introduction to Algorithms,"This course is an introduction to mathematical modeling of computational problems, as well as common algorithms, algorithmic paradigms, and data structures used to solve these problems. It emphasizes the relationship between algorithms and programming and introduces basic performance measures and analysis techniques for these problems.",https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-spring-2020/,MIT OpenCourseware
97,Programming for the Puzzled,"This class builds a bridge between the recreational world of algorithmic puzzles (puzzles that can be solved by algorithms) and the pragmatic world of computer programming, teaching students to program while solving puzzles. Python syntax and semantics required to understand the code are explained as needed for each puzzle.",https://ocw.mit.edu/courses/6-s095-programming-for-the-puzzled-january-iap-2018/,MIT OpenCourseware
98,Introduction to Algorithms (SMA 5503),"This course teaches techniques for the design and analysis of efficient algorithms, emphasizing methods useful in practice. Topics covered include: sorting; search trees, heaps, and hashing; divide-and-conquer; dynamic programming; amortized analysis; graph algorithms; shortest paths; network flow; computational geometry; number-theoretic algorithms; polynomial and matrix calculations; caching; and parallel computing.
This course was also taught as part of the Singapore-MIT Alliance (SMA) programme as course number SMA 5503 (Analysis and Design of Algorithms).
",https://ocw.mit.edu/courses/6-046j-introduction-to-algorithms-sma-5503-fall-2005/,MIT OpenCourseware
99,Database Systems,"This course relies on primary readings from the database community to introduce graduate students to the foundations of database systems, focusing on basics such as the relational algebra and data model, schema normalization, query optimization, and transactions. It is designed for students who have taken 6.033 (or equivalent); no prior database experience is assumed, though students who have taken an undergraduate course in databases are encouraged to attend.",https://ocw.mit.edu/courses/6-830-database-systems-fall-2010/,MIT OpenCourseware
100,The Human Intelligence Enterprise,"This course analyzes seminal work directed at the development of a computational understanding of human intelligence, such as work on learning, language, vision, event representation, commonsense reasoning, self reflection, story understanding, and analogy. It reviews visionary ideas of Turing, Minsky, and other influential thinkers and examines the implications of work on brain scanning, developmental psychology, and cognitive psychology. There is an emphasis on discussion and analysis of original papers; students taking the graduate version complete additional exercises and a substantial term project.",https://ocw.mit.edu/courses/6-803-the-human-intelligence-enterprise-spring-2019/,MIT OpenCourseware
101,Selected Topics in Cryptography,"This course covers a number of advanced “selected topics” in the field of cryptography. The first part of the course tackles the foundational question of how to define security of cryptographic protocols in a way that is appropriate for modern computer networks, and how to construct protocols that satisfy these security definitions. For this purpose, the framework of “universally composable security” is studied and used. The second part of the course concentrates on the many challenges involved in building secure electronic voting systems, from both theoretical and practical points of view. In the third part, an introduction to cryptographic constructions based on bilinear pairings is given.",https://ocw.mit.edu/courses/6-897-selected-topics-in-cryptography-spring-2004/,MIT OpenCourseware
102,Electromagnetics,"6.630 is an introductory subject on electromagnetics, emphasizing fundamental concepts and applications of Maxwell equations. Topics covered include: polarization, dipole antennas, wireless communications, forces and energy, phase matching, dielectric waveguides and optical fibers, transmission line theory and circuit concepts, antennas, and equivalent principle. Examples deal with electrodynamics, propagation, guidance, and radiation of electromagnetic waves.",https://ocw.mit.edu/courses/6-630-electromagnetics-fall-2006/,MIT OpenCourseware
103,"Optical Signals, Devices, and Systems","6.637 covers the fundamentals of optical signals and modern optical devices and systems from a practical point of view. Its goal is to help students develop a thorough understanding of the underlying physical principles such that device and system design and performance can be predicted, analyzed, and understood.
Most optical systems involve the use of one or more of the following: sources (e.g., lasers and light-emitting diodes), light modulation components (e.g., liquid-crystal light modulators), transmission media (e.g., free space or fibers), photodetectors (e.g., photodiodes, photomultiplier tubes), information storage devices (e.g., optical disk), processing systems (e.g., imaging and spatial filtering systems) and displays (LCOS microdisplays). These are the topics covered by this course.
",https://ocw.mit.edu/courses/6-637-optical-signals-devices-and-systems-spring-2003/,MIT OpenCourseware
104,Machine Vision,"Machine Vision provides an intensive introduction to the process of generating a symbolic description of an environment from an image. Lectures describe the physics of image formation, motion vision, and recovering shapes from shading. Binary image processing and filtering are presented as preprocessing steps. Further topics include photogrammetry, object representation alignment, analog VLSI and computational vision. Applications to robotics and intelligent machine interaction are discussed.",https://ocw.mit.edu/courses/6-801-machine-vision-fall-2004/,MIT OpenCourseware
105,Inventions and Patents,"This course explores the history of private and public rights in scientific discoveries and applied engineering, leading to the development of worldwide patent systems. The classes of invention protectable under the patent laws of the U.S., including the procedures in protecting inventions in the Patent Office and the courts will be examined. A review of past cases involving inventions and patents in:

the chemical process industry and medical pharmaceutical, biological, and genetic-engineering fields;
devices in the mechanical, ocean exploration, civil, and/or aeronautical fields;
the electrical, computer, software, and electronic areas, including key radio, solid-state, computer and software inventions; and also
software protection afforded under copyright laws.

Periodic joint real-time class sessions and discussions by video-audio Internet conferencing, with other universities will also be conducted.
",https://ocw.mit.edu/courses/6-901-inventions-and-patents-fall-2005/,MIT OpenCourseware
106,Power Electronics,"6.334 examines the application of electronics to energy conversion and control. Topics covered include: modeling, analysis, and control techniques; design of power circuits including inverters, rectifiers, and DC-DC converters; analysis and design of magnetic components and filters; and characteristics of power semiconductor devices. Numerous application examples will be presented such as motion control systems, power supplies, and radio-frequency power amplifiers. The course is worth 6 engineering design points.",https://ocw.mit.edu/courses/6-334-power-electronics-spring-2007/,MIT OpenCourseware
107,Advanced Algorithms,"This course is a first-year graduate course in algorithms. Emphasis is placed on fundamental algorithms and advanced methods of algorithmic design, analysis, and implementation. Techniques to be covered include amortization, randomization, fingerprinting, word-level parallelism, bit scaling, dynamic programming, network flow, linear programming, fixed-parameter algorithms, and approximation algorithms. Domains include string algorithms, network optimization, parallel algorithms, computational geometry, online algorithms, external memory, cache, and streaming algorithms, and data structures.",https://ocw.mit.edu/courses/6-854j-advanced-algorithms-fall-2005/,MIT OpenCourseware
108,"Stochastic Processes, Detection, and Estimation","This course examines the fundamentals of detection and estimation for signal processing, communications, and control. Topics covered include: vector spaces of random variables; Bayesian and Neyman-Pearson hypothesis testing; Bayesian and nonrandom parameter estimation; minimum-variance unbiased estimators and the Cramer-Rao bounds; representations for stochastic processes, shaping and whitening filters, and Karhunen-Loeve expansions; and detection and estimation from waveform observations. Advanced topics include: linear prediction and spectral estimation, and Wiener and Kalman filters.",https://ocw.mit.edu/courses/6-432-stochastic-processes-detection-and-estimation-spring-2004/,MIT OpenCourseware
109,Software Engineering for Web Applications,"6.171 is a course for students who already have some programming and software engineering experience. The goal is to give students some experience in dealing with those challenges that are unique to Internet applications, such as:

concurrency;
unpredictable load;
security risks;
opportunity for wide-area distributed computing;
creating a reliable and stateful user experience on top of unreliable connections and stateless protocols;
extreme requirements and absurd development schedules;
requirements that change mid-way through a project, sometimes because of experience gained from testing with users;
user demands for a multi-modal interface.

",https://ocw.mit.edu/courses/6-171-software-engineering-for-web-applications-fall-2003/,MIT OpenCourseware
110,Introductory Analog Electronics Laboratory,"6.101 is an introductory experimental laboratory that explores the design, construction, and debugging of analog electronic circuits. Lectures and six laboratory projects investigate the performance characteristics of diodes, transistors, JFETs, and op-amps, including the construction of a small audio amplifier and preamplifier. Seven weeks are devoted to the design and implementation, and written and oral presentation of a project in an environment similar to that of engineering design teams in industry. The course provides opportunity to simulate real-world problems and solutions that involve trade offs and the use of engineering judgment. Engineers from local analog engineering companies come to campus to help students with their design projects.",https://ocw.mit.edu/courses/6-101-introductory-analog-electronics-laboratory-spring-2007/,MIT OpenCourseware
111,"Laboratory on the Physiology, Acoustics, and Perception of Speech","The course focuses on experimental investigations of speech processes. Topics include: measurement of articulatory movements, measurements of pressures and airflows in speech production, computer-aided waveform analysis and spectral analysis of speech, synthesis of speech, perception and discrimination of speechlike sounds, speech prosody, models for speech recognition, speech disorders, and other topics.

Two 1-hour lectures per week
Two labs per week
Brief lab reports
Term project, with short term paper
No exams

",https://ocw.mit.edu/courses/6-542j-laboratory-on-the-physiology-acoustics-and-perception-of-speech-fall-2005/,MIT OpenCourseware
112,Applied Quantum and Statistical Physics,"6.728 is offered under the department’s “Devices, Circuits, and Systems” concentration. The course covers concepts in elementary quantum mechanics and statistical physics, introduces applied quantum physics, and emphasizes an experimental basis for quantum mechanics. Concepts covered include: Schrodinger’s equation applied to the free particle, tunneling, the harmonic oscillator, and hydrogen atom, variational methods, Fermi-Dirac, Bose-Einstein, and Boltzmann distribution functions, and simple models for metals, semiconductors, and devices such as electron microscopes, scanning tunneling microscope, thermonic emitters, atomic force microscope, and others.",https://ocw.mit.edu/courses/6-728-applied-quantum-and-statistical-physics-fall-2006/,MIT OpenCourseware
113,Microelectronic Devices and Circuits,"6.012 is the header course for the department’s “Devices, Circuits and Systems” concentration. The topics covered include: modeling of microelectronic devices, basic microelectronic circuit analysis and design, physical electronics of semiconductor junction and metal-on-silicon (MOS) devices, relation of electrical behavior to internal physical processes, development of circuit models, and understanding the uses and limitations of various models. The course uses incremental and large-signal techniques to analyze and design bipolar and field effect transistor circuits, with examples chosen from digital circuits, single-ended and differential linear amplifiers, and other integrated circuits.",https://ocw.mit.edu/courses/6-012-microelectronic-devices-and-circuits-spring-2009/,MIT OpenCourseware
114,Electromagnetic Wave Theory,"6.632 is a graduate subject on electromagnetic wave theory, emphasizing mathematical approaches, problem solving, and physical interpretation. Topics covered include: waves in media, equivalence principle, duality and complementarity, Huygens’ principle, Fresnel and Fraunhofer diffraction, dyadic Green’s functions, Lorentz transformation, and Maxwell-Minkowski theory. Examples deal with limiting cases of Maxwell’s theory and diffraction and scattering of electromagnetic waves.",https://ocw.mit.edu/courses/6-632-electromagnetic-wave-theory-spring-2003/,MIT OpenCourseware
115,Introduction to Numerical Methods,"This course offers an advanced introduction to numerical analysis, with a focus on accuracy and efficiency of numerical algorithms. Topics include sparse-matrix/iterative and dense-matrix algorithms in numerical linear algebra (for linear systems and eigenproblems), floating-point arithmetic, backwards error analysis, conditioning, and stability. Other computational topics (e.g., numerical integration or nonlinear optimization) are also surveyed.",https://ocw.mit.edu/courses/18-335j-introduction-to-numerical-methods-spring-2019/,MIT OpenCourseware
116,Advanced Natural Language Processing,"This course is a graduate introduction to natural language processing - the study of human language from a computational perspective. It covers syntactic, semantic and discourse processing models, emphasizing machine learning or corpus-based methods and algorithms. It also covers applications of these methods and models in syntactic parsing, information extraction, statistical machine translation, dialogue systems, and summarization. The subject qualifies as an Artificial Intelligence and Applications concentration subject.",https://ocw.mit.edu/courses/6-864-advanced-natural-language-processing-fall-2005/,MIT OpenCourseware
117,Data Communication Networks,"6.263J / 16.37J focuses on the fundamentals of data communication networks. One goal is to give some insight into the rationale of why networks are structured the way they are today and to understand the issues facing the designers of next-generation data networks. Much of the course focuses on network algorithms and their performance. Students are expected to have a strong mathematical background and an understanding of probability theory. Topics discussed include: layered network architecture, Link Layer protocols, high-speed packet switching, queueing theory, Local Area Networks, and Wide Area Networking issues, including routing and flow control.",https://ocw.mit.edu/courses/6-263j-data-communication-networks-fall-2002/,MIT OpenCourseware
118,Principles of Wireless Communications,"This course is an introduction to the design, analysis, and fundamental limits of wireless transmission systems. Topics to be covered include: wireless channel and system models; fading and diversity; resource management and power control; multiple-antenna and MIMO systems; space-time codes and decoding algorithms; multiple-access techniques and multiuser detection; broadcast codes and precoding; cellular and ad-hoc network topologies; OFDM and ultrawideband systems; and architectural issues.",https://ocw.mit.edu/courses/6-452-principles-of-wireless-communications-spring-2006/,MIT OpenCourseware
119,Representation and Modeling for Image Analysis,"Most algorithms in computer vision and image analysis can be understood in terms of two important components: a representation and a modeling/estimation algorithm. The representation defines what information is important about the objects and is used to describe them. The modeling techniques extract the information from images to instantiate the representation for the particular objects present in the scene. In this seminar, we will discuss popular representations (such as contours, level sets, deformation fields) and useful methods that allow us to extract and manipulate image information, including manifold fitting, markov random fields, expectation maximization, clustering and others.
For each concept – a new representation or an estimation algorithm – a lecture on the mathematical foundations of the concept will be followed by a discussion of two or three relevant research papers in computer vision, medical and biological imaging, that use the concept in different ways. We will aim to understand the fundamental techniques and to recognize situations in which these techniques promise to improve the quality of the analysis.
",https://ocw.mit.edu/courses/6-881-representation-and-modeling-for-image-analysis-spring-2005/,MIT OpenCourseware
120,Data Communication Networks,"6.263J / 16.37J focuses on the fundamentals of data communication networks. One goal is to give some insight into the rationale of why networks are structured the way they are today and to understand the issues facing the designers of next-generation data networks. Much of the course focuses on network algorithms and their performance. Students are expected to have a strong mathematical background and an understanding of probability theory. Topics discussed include: layered network architecture, Link Layer protocols, high-speed packet switching, queueing theory, Local Area Networks, and Wide Area Networking issues, including routing and flow control.",https://ocw.mit.edu/courses/6-263j-data-communication-networks-fall-2002/,MIT OpenCourseware
121,Adventures in Advanced Symbolic Programming,"This course covers concepts and techniques for the design and implementation of large software systems that can be adapted to uses not anticipated by the designer. Applications include compilers, computer-algebra systems, deductive systems, and some artificial intelligence applications. Topics include combinators, generic operations, pattern matching, pattern-directed invocation, rule systems, backtracking, dependencies, indeterminacy, memoization, constraint propagation, and incremental refinement. Substantial weekly programming assignments are an integral part of the subject.
There will be extensive programming assignments, using MIT/GNU Scheme. Students should have significant programming experience in Scheme, Common Lisp, Haskell, CAML or some other “functional” language.
",https://ocw.mit.edu/courses/6-945-adventures-in-advanced-symbolic-programming-spring-2009/,MIT OpenCourseware
122,Principles of Wireless Communications,"This course is an introduction to the design, analysis, and fundamental limits of wireless transmission systems. Topics to be covered include: wireless channel and system models; fading and diversity; resource management and power control; multiple-antenna and MIMO systems; space-time codes and decoding algorithms; multiple-access techniques and multiuser detection; broadcast codes and precoding; cellular and ad-hoc network topologies; OFDM and ultrawideband systems; and architectural issues.",https://ocw.mit.edu/courses/6-452-principles-of-wireless-communications-spring-2006/,MIT OpenCourseware
123,Numerical Methods for Partial Differential Equations (SMA 5212),"A presentation of the fundamentals of modern numerical techniques for a wide range of linear and nonlinear elliptic, parabolic and hyperbolic partial differential equations and integral equations central to a wide variety of applications in science, engineering, and other fields. Topics include: Mathematical Formulations; Finite Difference and Finite Volume Discretizations; Finite Element Discretizations; Boundary Element Discretizations; Direct and Iterative Solution Methods.
This course was also taught as part of the Singapore-MIT Alliance (SMA) programme as course number SMA 5212 (Numerical Methods for Partial Differential Equations).
",https://ocw.mit.edu/courses/16-920j-numerical-methods-for-partial-differential-equations-sma-5212-spring-2003/,MIT OpenCourseware
124,Algorithmic Lower Bounds: Fun with Hardness Proofs,"6.890 Algorithmic Lower Bounds: Fun with Hardness Proofs is a class taking a practical approach to proving problems can’t be solved efficiently (in polynomial time and assuming standard complexity-theoretic assumptions like P ≠ NP). The class focuses on reductions and techniques for proving problems are computationally hard for a variety of complexity classes. Along the way, the class will create many interesting gadgets, learn many hardness proof styles, explore the connection between games and computation, survey several important problems and complexity classes, and crush hopes and dreams (for fast optimal solutions).",https://ocw.mit.edu/courses/6-890-algorithmic-lower-bounds-fun-with-hardness-proofs-fall-2014/,MIT OpenCourseware
125,Semiconductor Optoelectronics: Theory and Design,"6.977 focuses on the physics of the interaction of photons with semiconductor materials. The band theory of solids is used to calculate the absorption and gain of semiconductor media. The rate equation formalism is used to develop the concepts of laser threshold, population inversion and modulation response. Matrix methods and coupled mode theory are applied to resonator structures such as distributed feedback lasers, tunable lasers and microring devices. The course is also intended to introduce students to noise models for semiconductor devices and to applications of optoelectronic devices to fiber optic communications. This course is worth 12 Engineering Design points.",https://ocw.mit.edu/courses/6-977-semiconductor-optoelectronics-theory-and-design-fall-2002/,MIT OpenCourseware
126,Algebraic Techniques and Semidefinite Optimization,"This research-oriented course will focus on algebraic and computational techniques for optimization problems involving polynomial equations and inequalities with particular emphasis on the connections with semidefinite optimization. The course will develop in a parallel fashion several algebraic and numerical approaches to polynomial systems, with a view towards methods that simultaneously incorporate both elements. We will study both the complex and real cases, developing techniques of general applicability, and stressing convexity-based ideas, complexity results, and efficient implementations. Although we will use examples from several engineering areas, particular emphasis will be given to those arising from systems and control applications.",https://ocw.mit.edu/courses/6-972-algebraic-techniques-and-semidefinite-optimization-spring-2006/,MIT OpenCourseware
127,System Identification,"This course is offered to graduates and includes topics such as mathematical models of systems from observations of their behavior; time series, state-space, and input-output models; model structures, parametrization, and identifiability; non-parametric methods; prediction error methods for parameter estimation, convergence, consistency, and asymptotic distribution; relations to maximum likelihood estimation; recursive estimation; relation to Kalman filters; structure determination; order estimation; Akaike criterion; bounded but unknown noise model; and robustness and practical issues.",https://ocw.mit.edu/courses/6-435-system-identification-spring-2005/,MIT OpenCourseware
128,Interactive Music Systems,"This course explores audio synthesis, musical structure, human computer interaction (HCI), and visual presentation for the creation of interactive musical experiences. Topics include audio synthesis; mixing and looping; MIDI sequencing; generative composition; motion sensors; music games; and graphics for UI, visualization, and aesthetics. Weekly programming assignments in python are included. Student teams build an original, dynamic, and engaging interactive music system for their final project.",https://ocw.mit.edu/courses/21m-385-interactive-music-systems-fall-2016/,MIT OpenCourseware
129,"Signals, Systems and Inference","This course covers signals, systems and inference in communication, control and signal processing. Topics include input-output and state-space models of linear systems driven by deterministic and random signals; time- and transform-domain representations in discrete and continuous time; and group delay. State feedback and observers. Probabilistic models; stochastic processes, correlation functions, power spectra, spectral factorization. Least-mean square error estimation; Wiener filtering. Hypothesis testing; detection; matched filters.",https://ocw.mit.edu/courses/6-011-signals-systems-and-inference-spring-2018/,MIT OpenCourseware
130,Randomized Algorithms,"This course examines how randomization can be used to make algorithms simpler and more efficient via random sampling, random selection of witnesses, symmetry breaking, and Markov chains. Topics covered include: randomized computation; data structures (hash tables, skip lists); graph algorithms (minimum spanning trees, shortest paths, minimum cuts); geometric algorithms (convex hulls, linear programming in fixed or arbitrary dimension); approximate counting; parallel algorithms; online algorithms; derandomization techniques; and tools for probabilistic analysis of algorithms.",https://ocw.mit.edu/courses/6-856j-randomized-algorithms-fall-2002/,MIT OpenCourseware
131,Hands-On Introduction to Electrical Engineering Lab Skills,"This course introduces students to both passive and active electronic components (op-amps, 555 timers, TTL digital circuits). Basic analog and digital circuits and theory of operation are covered. The labs allow the students to master the use of electronic instruments and construct and/or solder several circuits. The labs also reinforce the concepts discussed in class with a hands-on approach and allow the students to gain significant experience with electrical instruments such as function generators, digital multimeters, oscilloscopes, logic analyzers and power supplies. In the last lab, the students build an electronic circuit that they can keep. The course is geared to freshmen and others who want an introduction to electronics circuits.
This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.
",https://ocw.mit.edu/courses/6-091-hands-on-introduction-to-electrical-engineering-lab-skills-january-iap-2008/,MIT OpenCourseware
132,Modern Optics Project Laboratory,"6.161 offers an introduction to laboratory optics, optical principles, and optical devices and systems. This course covers a wide range of topics, including: polarization properties of light, reflection and refraction, coherence and interference, Fraunhofer and Fresnel diffraction, holography, imaging and transforming properties of lenses, spatial filtering, two-lens coherent optical processor, optical properties of materials, lasers, electro-optic, acousto-optic and liquid-crystal light modulators, optical detectors, optical waveguides and fiber-optic communication systems. Students engage in extensive oral and written communication exercises. There are 12 engineering design points associated with this subject.",https://ocw.mit.edu/courses/6-161-modern-optics-project-laboratory-fall-2005/,MIT OpenCourseware
133,Introduction to Copyright Law,"This course is an introduction to copyright law and American law in general. Topics covered include: structure of federal law; basics of legal research; legal citations; how to use LexisNexis®; the 1976 Copyright Act; copyright as applied to music, computers, broadcasting, and education; fair use; Napster®, Grokster®, and Peer-to-Peer file-sharing; Library Access to Music Project; The 1998 Digital Millennium Copyright Act; DVDs and encryption; software licensing; the GNU® General Public License and free software.",https://ocw.mit.edu/courses/6-912-introduction-to-copyright-law-january-iap-2006/,MIT OpenCourseware
134,High Speed Communication Circuits,"6.776 covers circuit level design issues of high speed communication systems, with primary focus being placed on wireless and broadband data link applications. Specific circuit topics include transmission lines, high speed and low noise amplifiers, VCO’s, mixers, power amps, high speed digital circuits, and frequency synthesizers. In addition to learning analysis skills for the above items, students will gain a significant amount of experience in simulating RF circuits in SPICE and also building RF circuits within a lab project.",https://ocw.mit.edu/courses/6-776-high-speed-communication-circuits-spring-2005/,MIT OpenCourseware
135,Introduction to Mathematical Programming,"This course is an introduction to linear optimization and its extensions emphasizing the underlying mathematical structures, geometrical ideas, algorithms and solutions of practical problems. The topics covered include: formulations, the geometry of linear optimization, duality theory, the simplex method, sensitivity analysis, robust optimization, large scale optimization network flows, solving problems with an exponential number of constraints and the ellipsoid method, interior point methods, semidefinite optimization, solving real world problems problems with computer software, discrete optimization formulations and algorithms.",https://ocw.mit.edu/courses/6-251j-introduction-to-mathematical-programming-fall-2009/,MIT OpenCourseware
136,Discrete-Time Signal Processing,"This class addresses the representation, analysis, and design of discrete time signals and systems. The major concepts covered include: Discrete-time processing of continuous-time signals; decimation, interpolation, and sampling rate conversion; flowgraph structures for DT systems; time-and frequency-domain design techniques for recursive (IIR) and non-recursive (FIR) filters; linear prediction; discrete Fourier transform, FFT algorithm; short-time Fourier analysis and filter banks; multirate techniques; Hilbert transforms; Cepstral analysis and various applications.
Acknowledgements
I would like to express my thanks to Thomas Baran, Myung Jin Choi, and Xiaomeng Shi for compiling the lecture notes on this site from my individual lectures and handouts and their class notes during the semesters that they were students in the course. These lecture notes, the text book and included problem sets and solutions will hopefully be helpful as you learn and explore the topic of Discrete-Time Signal Processing.
",https://ocw.mit.edu/courses/6-341-discrete-time-signal-processing-fall-2005/,MIT OpenCourseware
137,Robocraft Programming Competition,"The 6.370 Robocraft programming competition is a unique challenge that combines battle strategy and software engineering. In short, the objective is to write the best player program for the computer game Robocraft.",https://ocw.mit.edu/courses/6-370-robocraft-programming-competition-january-iap-2005/,MIT OpenCourseware
138,Introductory Digital Systems Laboratory,"6.111 consists of lectures and labs on digital logic, flipflops, PALs, counters, timing, synchronization, finite-state machines, and microprogrammed systems. Students are expected to design and implement a final project of their choice: games, music, digital filters, graphics, etc. The course requires extensive use of VHDL for describing and implementing digital logic designs. 6.111 is worth 12 Engineering Design Points.",https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-fall-2002/,MIT OpenCourseware
139,Solid-State Circuits,"6.301 is a course in analog circuit analysis and design. We cover the tools and methods necessary for the creative design of useful circuits using active devices. The class stresses insight and intuition, applied to the design of transistor circuits and the estimation of their performance. We concentrate on circuits using the bipolar junction transistor, but the techniques that we study can be equally applied to circuits using JFETs, MOSFETs, MESFETs, future exotic devices, or even vacuum tubes.",https://ocw.mit.edu/courses/6-301-solid-state-circuits-fall-2010/,MIT OpenCourseware
140,Dynamics of Nonlinear Systems,"This course provides an introduction to nonlinear deterministic dynamical systems. Topics covered include: nonlinear ordinary differential equations; planar autonomous systems; fundamental theory: Picard iteration, contraction mapping theorem, and Bellman-Gronwall lemma; stability of equilibria by Lyapunov’s first and second methods; feedback linearization; and application to nonlinear circuits and control systems.",https://ocw.mit.edu/courses/6-243j-dynamics-of-nonlinear-systems-fall-2003/,MIT OpenCourseware
141,Introduction to Nanoelectronics,"Traditionally, progress in electronics has been driven by miniaturization. But as electronic devices approach the molecular scale, classical models for device behavior must be abandoned. To prepare for the next generation of electronic devices, this class teaches the theory of current, voltage and resistance from atoms up. To describe electrons at the nanoscale, we will begin with an introduction to the principles of quantum mechanics, including quantization, the wave-particle duality, wavefunctions and Schrödinger’s equation. Then we will consider the electronic properties of molecules, carbon nanotubes and crystals, including energy band formation and the origin of metals, insulators and semiconductors. Electron conduction will be taught beginning with ballistic transport and concluding with a derivation of Ohm’s law. We will then compare ballistic to bulk MOSFETs. The class will conclude with a discussion of possible fundamental limits to computation.",https://ocw.mit.edu/courses/6-701-introduction-to-nanoelectronics-spring-2010/,MIT OpenCourseware
142,Ethics and the Law on the Electronic Frontier,"This course considers the interaction between law, policy, and technology as they relate to the evolving controversies over control of the Internet. In addition, there will be an in-depth treatment of privacy and the notion of “transparency” – regulations and technologies that govern the use of information, as well as access to information. Topics explored will include:

Legal Background for Regulation of the Internet
Fourth Amendment Law and Electronic Surveillance
Profiling, Data Mining, and the U.S. PATRIOT Act
Technologies for Anonymity and Transparency
The Policy-Aware Web

",https://ocw.mit.edu/courses/6-805-ethics-and-the-law-on-the-electronic-frontier-fall-2005/,MIT OpenCourseware
143,The Lexicon and Its Features,"This course provides an overview of the distinctive features which distinguish sound categories of languages of the world. Theories which relate these categories to their acoustic and articulatory correlates, both universally and in particular languages, are covered. Models of word recognition by listeners, features, and phonological structure are also discussed. In addition, the course offers a variety of perspectives on these issues, drawn from Electrical Engineering, Linguistics and Cognitive Science.",https://ocw.mit.edu/courses/24-941j-the-lexicon-and-its-features-spring-2007/,MIT OpenCourseware
144,Medical Decision Support,"This course presents the main concepts of decision analysis, artificial intelligence and predictive model construction and evaluation in the specific context of medical applications. It emphasizes the advantages and disadvantages of using these methods in real-world systems and provides hands-on experience. Its technical focus is on decision support, knowledge-based systems (qualitative and quantitative), learning systems (including logistic regression, classification trees, neural networks, rough sets), and techniques to evaluate the performance of such systems. It reviews computer-based diagnosis, planning and monitoring of therapeutic interventions. It also discusses implemented medical applications and the software tools used in their construction. Students produce a final project using the machine learning methods learned in the course, based on actual clinical data.
Lecturers
Prof. Stephan Dreiseitl
Prof. Ju Jan Kim
Prof. Bill Long
Prof. Marco Ramoni
Prof. Fred Resnic
Prof. David Wypij
",https://ocw.mit.edu/courses/hst-951j-medical-decision-support-spring-2003/,MIT OpenCourseware
145,Introduction to Programming in Java,"This course is an introduction to software engineering, using the Java™ programming language. It covers concepts useful to 6.005. Students will learn the fundamentals of Java. The focus is on developing high quality, working software that solves real problems.
The course is designed for students with some programming experience, but if you have none and are motivated you will do fine. Students who have taken 6.005 should not take this course. Each class is composed of one hour of lecture and one hour of assisted lab work.
This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.
",https://ocw.mit.edu/courses/6-092-introduction-to-programming-in-java-january-iap-2010/,MIT OpenCourseware
146,Algorithm Engineering,"This is a research-oriented course on algorithm engineering, which will cover both the theory and practice of algorithms and data structures. Students will learn about models of computation, algorithm design and analysis, and performance engineering of algorithm implementations. We will study the design and implementation of sequential, parallel, cache-efficient, external-memory, and write-efficient algorithms for fundamental problems in computing. Many of the principles of algorithm engineering will be illustrated in the context of parallel algorithms and graph problems.",https://ocw.mit.edu/courses/6-5060-algorithm-engineering-spring-2023/,MIT OpenCourseware
147,"Receivers, Antennas, and Signals","This course explores the detection and measurement of radio and optical signals encountered in communications, astronomy, remote sensing, instrumentation, and radar. Topics covered include: statistical analysis of signal processing systems, including radiometers, spectrometers, interferometers, and digital correlation systems; matched filters and ambiguity functions; communications channel performance; measurement of random electromagnetic fields, angular filtering properties of antennas, interferometers, and aperture synthesis systems; and radiative transfer and parameter estimation.",https://ocw.mit.edu/courses/6-661-receivers-antennas-and-signals-spring-2003/,MIT OpenCourseware
148,Introduction to Electric Power Systems,"This course is an introductory subject in the field of electric power systems and electrical to mechanical energy conversion. Electric power has become increasingly important as a way of transmitting and transforming energy in industrial, military and transportation uses. Electric power systems are also at the heart of alternative energy systems, including wind and solar electric, geothermal and small scale hydroelectric generation.",https://ocw.mit.edu/courses/6-061-introduction-to-electric-power-systems-spring-2011/,MIT OpenCourseware
149,Networks,"This course will highlight common principles that permeate the functioning of networks and how the same issues related to robustness, fragility and interlinkages arise in several different types of networks. It will both introduce conceptual tools from dynamical systems, random graph models, optimization and game theory, and cover a wide variety of applications.",https://ocw.mit.edu/courses/14-15j-networks-spring-2018/,MIT OpenCourseware
150,Algorithm Engineering,"This is a research-oriented course on algorithm engineering, which will cover both the theory and practice of algorithms and data structures. Students will learn about models of computation, algorithm design and analysis, and performance engineering of algorithm implementations. We will study the design and implementation of sequential, parallel, cache-efficient, external-memory, and write-efficient algorithms for fundamental problems in computing. Many of the principles of algorithm engineering will be illustrated in the context of parallel algorithms and graph problems.",https://ocw.mit.edu/courses/6-5060-algorithm-engineering-spring-2023/,MIT OpenCourseware
151,Introduction to Electric Power Systems,"This course is an introductory subject in the field of electric power systems and electrical to mechanical energy conversion. Electric power has become increasingly important as a way of transmitting and transforming energy in industrial, military and transportation uses. Electric power systems are also at the heart of alternative energy systems, including wind and solar electric, geothermal and small scale hydroelectric generation.",https://ocw.mit.edu/courses/6-061-introduction-to-electric-power-systems-spring-2011/,MIT OpenCourseware
152,The Structure of Engineering Revolutions,"6.933J / STS.420J provides an integrated approach to engineering practice in the real world. Students of 6.933J / STS.420J research the life cycle of a major engineering project, new technology, or startup company from multiple perspectives: technical, economic, political, and cultural. Research involves interviewing inventors, reading laboratory notebooks, evaluating patents, and looking over the shoulders of engineers as they developed today’s technologies. This subject is for students who recognize that technical proficiency alone is only part of the formula for success in technology.",https://ocw.mit.edu/courses/6-933j-the-structure-of-engineering-revolutions-fall-2001/,MIT OpenCourseware
153,Game Theory with Engineering Applications,"This course is an introduction to the fundamentals of game theory and mechanism design. Motivations are drawn from engineered/networked systems (including distributed control of wireline and wireless communication networks, incentive-compatible/dynamic resource allocation, multi-agent systems, pricing and investment decisions in the Internet), and social models (including social and economic networks). The course emphasizes theoretical foundations, mathematical tools, modeling, and equilibrium notions in different environments.",https://ocw.mit.edu/courses/6-254-game-theory-with-engineering-applications-spring-2010/,MIT OpenCourseware
154,Practical Programming in C,"This course provides a thorough introduction to the C programming language, the workhorse of the UNIX operating system and lingua franca of embedded processors and micro-controllers. The first two weeks will cover basic syntax and grammar, and expose students to practical programming techniques. The remaining lectures will focus on more advanced concepts, such as dynamic memory allocation, concurrency and synchronization, UNIX signals and process control, library development and usage. Daily programming assignments and weekly laboratory exercises are required. Knowledge of C is highly marketable for summer internships, UROPs, and full-time positions in software and embedded systems development.",https://ocw.mit.edu/courses/6-087-practical-programming-in-c-january-iap-2010/,MIT OpenCourseware
155,Machine Learning for Inverse Graphics,"This course covers fundamental and advanced techniques in this field at the intersection of computer vision, computer graphics, and geometric deep learning. It will lay the foundations of how cameras see the world, how we can represent 3D scenes for artificial intelligence, how we can learn to reconstruct these representations from only a single image, how we can guarantee certain kinds of generalizations, and how we can train these models in a self-supervised way.",https://ocw.mit.edu/courses/6-s980-machine-learning-for-inverse-graphics-fall-2022/,MIT OpenCourseware
156,High Speed Communication Circuits and Systems,"6.976 covers circuit and system level design issues of high speed communication systems, with primary focus being placed on wireless and broadband data link applications. Specific circuit topics include transmission lines, high speed and low noise amplifiers, VCO’s, and high speed digital circuits. Specific system topics include frequency synthesizers, clock and data recovery circuits, and GMSK transceivers. In addition to learning analysis skills for the above items, students will gain a significant amount of experience in simulating circuits in SPICE and systems in CppSim (a custom C++ simulator).",https://ocw.mit.edu/courses/6-976-high-speed-communication-circuits-and-systems-spring-2003/,MIT OpenCourseware
157,Quantitative Physiology: Cells and Tissues,"In this subject, we consider two basic topics in cellular biophysics, posed here as questions:

Which molecules are transported across cellular membranes, and what are the mechanisms of transport? How do cells maintain their compositions, volume, and membrane potential?
How are potentials generated across the membranes of cells? What do these potentials do?

Although the questions posed are fundamentally biological questions, the methods for answering these questions are inherently multidisciplinary. As we will see throughout the course, the role of mathematical models is to express concepts precisely enough that precise conclusions can be drawn. In connection with all the topics covered, we will consider both theory and experiment. For the student, the educational value of examining the interplay between theory and experiment transcends the value of the specific knowledge gained in the subject matter.
This course is jointly offered through four departments, available to both undergraduates and graduates.
",https://ocw.mit.edu/courses/6-021j-quantitative-physiology-cells-and-tissues-fall-2004/,MIT OpenCourseware
158,Transcribing Prosodic Structure of Spoken Utterances with ToBI,"This course presents a tutorial on the ToBI (Tones and Break Indices) system, for labelling certain aspects of prosody in Mainstream American English (MAE-ToBI). The course is appropriate for undergrad or grad students with background in linguistics (phonology or phonetics), cognitive psychology (psycholinguistics), speech acoustics or music, who wish to learn about the prosody of speech, i.e. the intonation, rhythm, grouping and prominence patterns of spoken utterances, prosodic differences that signal meaning and phonetic implementation.
Please submit any feedback about the course content using the user survey.
",https://ocw.mit.edu/courses/6-911-transcribing-prosodic-structure-of-spoken-utterances-with-tobi-january-iap-2006/,MIT OpenCourseware
159,Integrated Microelectronic Devices,"6.720 examines the physics of microelectronic semiconductor devices for silicon integrated circuit applications. Topics covered include: semiconductor fundamentals, p-n junction, metal-oxide semiconductor structure, metal-semiconductor junction, MOS field-effect transistor, and bipolar junction transistor. The course emphasizes physical understanding of device operation through energy band diagrams and short-channel MOSFET device design. Issues in modern device scaling are also outlined. The course is worth 2 Engineering Design Points.
Acknowledgments
Prof. Jesús del Alamo would like to thank Prof. Harry Tuller for his support of and help in teaching the course.
",https://ocw.mit.edu/courses/6-720j-integrated-microelectronic-devices-spring-2007/,MIT OpenCourseware
160,Software Studio,"This course on software engineering covers design and implementation of medium-scale software systems, using web applications as a platform. In the course, students learn the fundamentals of structuring a web application and writing modular code, with an emphasis on conceptual design to achieve clarity, simplicity, and modularity. Topics also include functional programming, relational databases, and security.",https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/,MIT OpenCourseware
161,Fundamentals of Program Analysis,"This course offers a comprehensive introduction to the field of program analysis. It covers some of the major forms of program analysis including Type Checking, Abstract Interpretation and Model Checking. For each of these, the course covers the underlying theories as well as modern techniques and applications.",https://ocw.mit.edu/courses/6-820-fundamentals-of-program-analysis-fall-2015/,MIT OpenCourseware
162,Knowledge-Based Applications Systems,"This course covers the development of programs containing a significant amount of knowledge about their application domain. The course includes a brief review of relevant AI techniques; case studies from a number of application domains, chosen to illustrate principles of system development; a discussion of technical issues encountered in building a system, including selection of knowledge representation, knowledge acquisition, etc.; and a discussion of current and future research. The course also provides hands-on experience in building an expert system (term project).",https://ocw.mit.edu/courses/6-871-knowledge-based-applications-systems-spring-2005/,MIT OpenCourseware
163,Compound Semiconductor Devices,"This course outlines the physics, modeling, application, and technology of compound semiconductors (primarily III-Vs) in electronic, optoelectronic, and photonic devices and integrated circuits. Topics include: properties, preparation, and processing of compound semiconductors; theory and practice of heterojunctions, quantum structures, and pseudomorphic strained layers; metal-semiconductor field effect transistors (MESFETs); heterojunction field effect transistors (HFETs) and bipolar transistors (HBTs); photodiodes, vertical-and in-plane-cavity laser diodes, and other optoelectronic devices.",https://ocw.mit.edu/courses/6-772-compound-semiconductor-devices-spring-2003/,MIT OpenCourseware
164,Physics for Solid-State Applications,"This course examines classical and quantum models of electrons and lattice vibrations in solids, emphasizing physical models for elastic properties, electronic transport, and heat capacity. Topics covered include: crystal lattices, electronic energy band structures, phonon dispersion relatons, effective mass theorem, semiclassical equations of motion, and impurity states in semiconductors, band structure and transport properties of selected semiconductors, and connection of quantum theory of solids with quasifermi levels and Boltzmann transport used in device modeling.",https://ocw.mit.edu/courses/6-730-physics-for-solid-state-applications-spring-2003/,MIT OpenCourseware
165,Microelectronic Devices and Circuits,"6.012 is the header course for the department’s “Devices, Circuits and Systems” concentration. The topics covered include modeling of microelectronic devices, basic microelectronic circuit analysis and design, physical electronics of semiconductor junction and MOS devices, relation of electrical behavior to internal physical processes, development of circuit models, and understanding the uses and limitations of various models. The course uses incremental and large-signal techniques to analyze and design bipolar and field effect transistor circuits, with examples chosen from digital circuits, single-ended and differential linear amplifiers, and other integrated circuits.",https://ocw.mit.edu/courses/6-012-microelectronic-devices-and-circuits-fall-2009/,MIT OpenCourseware
166,Electric Machines,"This course teaches the principles and analysis of electromechanical systems. Students will develop analytical techniques for predicting device and system interaction characteristics as well as learn to design major classes of electric machines. Problems used in the course are intended to strengthen understanding of the phenomena and interactions in electromechanics, and include examples from current research.",https://ocw.mit.edu/courses/6-685-electric-machines-fall-2013/,MIT OpenCourseware
167,"Fields, Forces and Flows in Biological Systems","This course introduces the basic driving forces for electric current, fluid flow, and mass transport, plus their application to a variety of biological systems. Basic mathematical and engineering tools will be introduced, in the context of biology and physiology. Various electrokinetic phenomena are also considered as an example of coupled nature of chemical-electro-mechanical driving forces. Applications include transport in biological tissues and across membranes, manipulation of cells and biomolecules, and microfluidics.",https://ocw.mit.edu/courses/20-330j-fields-forces-and-flows-in-biological-systems-spring-2007/,MIT OpenCourseware
168,Operating System Engineering,"This course studies fundamental design and implementation ideas in the engineering of operating systems. Lectures are based on a study of UNIX and research papers. Topics include virtual memory, threads, context switches, kernels, interrupts, system calls, interprocess communication, coordination, and the interaction between software and hardware. Individual laboratory assignments involve implementation of a small operating system in C, with some x86 assembly.",https://ocw.mit.edu/courses/6-828-operating-system-engineering-fall-2012/,MIT OpenCourseware
169,Acoustics of Speech and Hearing,"The Acoustics of Speech and Hearing is an H-Level graduate course that reviews the physical processes involved in the production, propagation and reception of human speech. Particular attention is paid to how the acoustics and mechanics of the speech and auditory system define what sounds we are capable of producing and what sounds we can sense. Areas of discussion include:


the acoustic cues used in determining the direction of a sound source,


the acoustic and mechanical mechanisms involved in speech production and


the acoustic and mechanical mechanism used to transduce and analyze sounds in the ear.


",https://ocw.mit.edu/courses/6-551j-acoustics-of-speech-and-hearing-fall-2004/,MIT OpenCourseware
170,"Fields, Forces and Flows in Biological Systems","This course introduces the basic driving forces for electric current, fluid flow, and mass transport, plus their application to a variety of biological systems. Basic mathematical and engineering tools will be introduced, in the context of biology and physiology. Various electrokinetic phenomena are also considered as an example of coupled nature of chemical-electro-mechanical driving forces. Applications include transport in biological tissues and across membranes, manipulation of cells and biomolecules, and microfluidics.",https://ocw.mit.edu/courses/20-330j-fields-forces-and-flows-in-biological-systems-spring-2007/,MIT OpenCourseware
171,"Electromagnetic Fields, Forces, and Motion","6.641 examines electric and magnetic quasistatic forms of Maxwell’s equations applied to dielectric, conduction, and magnetization boundary value problems. Topics covered include: electromagnetic forces, force densities, and stress tensors, including magnetization and polarization; thermodynamics of electromagnetic fields, equations of motion, and energy conservation; applications to synchronous, induction, and commutator machines; sensors and transducers; microelectromechanical systems; propagation and stability of electromechanical waves; and charge transport phenomena.
Acknowledgement
The instructor would like to thank Thomas Larsen for transcribing into LaTeX selected homework problems, homework solutions, and exams.
",https://ocw.mit.edu/courses/6-641-electromagnetic-fields-forces-and-motion-spring-2005/,MIT OpenCourseware
172,Principles of Digital Communication I,"The course serves as an introduction to the theory and practice behind many of today’s communications systems. 6.450 forms the first of a two-course sequence on digital communication. The second class, 6.451 Principles of Digital Communication II, is offered in the spring.
Topics covered include: digital communications at the block diagram level, data compression, Lempel-Ziv algorithm, scalar and vector quantization, sampling and aliasing, the Nyquist criterion, PAM and QAM modulation, signal constellations, finite-energy waveform spaces, detection, and modeling and system design for wireless communication.
",https://ocw.mit.edu/courses/6-450-principles-of-digital-communication-i-fall-2009/,MIT OpenCourseware
173,Strobe Project Laboratory,"This is a laboratory experience course with a focus on photography, electronic imaging, and light measurement, much of it at short duration. In addition to teaching these techniques, the course provides students with experience working in a laboratory and teaches good work habits and techniques for approaching laboratory work. A major purpose of 6.163 is to provide students with many opportunities to sharpen their communication skills: oral, written, and visual.",https://ocw.mit.edu/courses/6-163-strobe-project-laboratory-fall-2005/,MIT OpenCourseware
174,Introductory Digital Systems Laboratory,"6.111 is reputed to be one of the most demanding classes at MIT, exhausting many students’ time and creativity. The course covers digital design topics such as digital logic, sequential building blocks, finite-state machines, FPGAs, timing and synchronization. The semester begins with lectures and problem sets, to introduce fundamental topics before students embark on lab assignments and ultimately, a digital design project. The students design and implement a final digital project of their choice, in areas such as games, music, digital filters, wireless communications, video, and graphics. The course relies on extensive use of Verilog® for describing and implementing digital logic designs on state-of-the-art FPGA.",https://ocw.mit.edu/courses/6-111-introductory-digital-systems-laboratory-spring-2006/,MIT OpenCourseware
175,Electromagnetic Energy: From Motors to Lasers,"This course discusses applications of electromagnetic and equivalent quantum mechanical principles to classical and modern devices. It covers energy conversion and power flow in both macroscopic and quantum-scale electrical and electromechanical systems, including electric motors and generators, electric circuit elements, quantum tunneling structures and instruments. It studies photons as waves and particles and their interaction with matter in optoelectronic devices, including solar cells, displays, and lasers.
The instructors would like to thank Scott Bradley, David Friend, Ta-Ming Shih, and Yasuhiro Shirasaki for helping to develop the course, and Kyle Hounsell, Ethan Koether, and Dmitri Megretski for their work preparing the lecture notes for OCW publication.
",https://ocw.mit.edu/courses/6-007-electromagnetic-energy-from-motors-to-lasers-spring-2011/,MIT OpenCourseware
176,Introduction to C and C++,"This course provides a fast-paced introduction to the C and C++ programming languages. You will learn the required background knowledge, including memory management, pointers, preprocessor macros, object-oriented programming, and how to find bugs when you inevitably use any of those incorrectly. There will be daily assignments and a small-scale individual project.
This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.
",https://ocw.mit.edu/courses/6-s096-introduction-to-c-and-c-january-iap-2013/,MIT OpenCourseware
177,NextLab I: Designing Mobile Technologies for the Next Billion Users,"Can you make a cellphone change the world?
NextLab is a hands-on year-long design course in which students research, develop and deploy mobile technologies for the next billion mobile users in developing countries. Guided by real-world needs as observed by local partners, students work in multidisciplinary teams on term-long projects, closely collaborating with NGOs and communities at the local level, field practitioners, and experts in relevant fields.
Students are expected to leverage technical ingenuity in both mobile and internet technologies together with social insight in order to address social challenges in areas such as health, microfinance, entrepreneurship, education, and civic activism. Students with technically and socially viable prototypes may obtain funding for travel to their target communities, in order to obtain the first-hand feedback necessary to prepare their technologies for full fledged deployment into the real world (subject to guidelines and limitations).
",https://ocw.mit.edu/courses/mas-965-nextlab-i-designing-mobile-technologies-for-the-next-billion-users-fall-2008/,MIT OpenCourseware
178,AI 101,"Machine vision. Data wrangling. Reinforcement learning. What do these terms even mean? In AI 101, MIT researcher Brandon Leshchinskiy offers an introduction to artificial intelligence that’s designed specifically for those with little to no background in the subject. The workshop starts with a summary of key concepts in AI, followed by an interactive exercise where participants train their own algorithm. Finally, it closes with a summary of key takeaways and Q/A. All are welcome!",https://ocw.mit.edu/courses/res-6-013-ai-101-fall-2021/,MIT OpenCourseware
179,Physics of Microfabrication: Front End Processing,"This course is offered to graduates and focuses on understanding the fundamental principles of the “front-end” processes used in the fabrication of devices for silicon integrated circuits. This includes advanced physical models and practical aspects of major processes, such as oxidation, diffusion, ion implantation, and epitaxy. Other topics covered include: high performance MOS and bipolar devices including ultra-thin gate oxides, implant-damage enhanced diffusion, advanced metrology, and new materials such as Silicon Germanium (SiGe).",https://ocw.mit.edu/courses/6-774-physics-of-microfabrication-front-end-processing-fall-2004/,MIT OpenCourseware
180,AI 101,"Machine vision. Data wrangling. Reinforcement learning. What do these terms even mean? In AI 101, MIT researcher Brandon Leshchinskiy offers an introduction to artificial intelligence that’s designed specifically for those with little to no background in the subject. The workshop starts with a summary of key concepts in AI, followed by an interactive exercise where participants train their own algorithm. Finally, it closes with a summary of key takeaways and Q/A. All are welcome!",https://ocw.mit.edu/courses/res-6-013-ai-101-fall-2021/,MIT OpenCourseware
181,Development of Inventions and Creative Ideas,"This course examines the role of the engineer as patent expert and as technical witness in court and patent interference and related proceedings. It discusses the rights and obligations of engineers in connection with educational institutions, government, and large and small businesses. It compares various manners of transplanting inventions into business operations, including development of New England and other U.S. electronics and biotechnology industries and their different types of institutions. The course also considers American systems of incentive to creativity apart from the patent laws in the atomic energy and space fields.
Acknowledgment
The instructors would like to thank Joanne Rines and Elijah Ercolino for their efforts in preparing this course.
",https://ocw.mit.edu/courses/6-931-development-of-inventions-and-creative-ideas-spring-2008/,MIT OpenCourseware
182,Control of Manufacturing Processes (SMA 6303),"This course explores statistical modeling and control in manufacturing processes. Topics include the use of experimental design and response surface modeling to understand manufacturing process physics, as well as defect and parametric yield modeling and optimization. Various forms of process control, including statistical process control, run by run and adaptive control, and real-time feedback control, are covered. Application contexts include semiconductor manufacturing, conventional metal and polymer processing, and emerging micro-nano manufacturing processes.",https://ocw.mit.edu/courses/2-830j-control-of-manufacturing-processes-sma-6303-spring-2008/,MIT OpenCourseware
183,Biomedical Devices Design Laboratory,"This course provides intensive coverage of the theory and practice of electromechanical instrument design with application to biomedical devices. Students will work with MGH doctors to develop new medical products from concept to prototype development and testing. Lectures will present techniques for designing electronic circuits as part of complete sensor systems. Topics covered include: basic electronics circuits, principles of accuracy, op amp circuits, analog signal conditioning, power supplies, microprocessors, wireless communications, sensors, and sensor interface circuits. Labs will cover practical printed circuit board (PCB) design including component selection, PCB layout, assembly, and planning and budgeting for large projects. Problem sets and labs in the first six weeks are in support of the project. Major team-based design, build, and test project in the last six weeks. Student teams will be composed of both electrical engineering and mechanical engineering students.",https://ocw.mit.edu/courses/2-996-biomedical-devices-design-laboratory-fall-2007/,MIT OpenCourseware
184,Analysis and Design of Digital Integrated Circuits,"6.374 examines the device and circuit level optimization of digital building blocks. Topics covered include: MOS device models including Deep Sub-Micron effects; circuit design styles for logic, arithmetic and sequential blocks; estimation and minimization of energy consumption; interconnect models and parasitics; device sizing and logical effort; timing issues (clock skew and jitter) and active clock distribution techniques; memory architectures, circuits (sense amplifiers) and devices; testing of integrated circuits. The course employs extensive use of circuit layout and SPICE in design projects and software labs.",https://ocw.mit.edu/courses/6-374-analysis-and-design-of-digital-integrated-circuits-fall-2003/,MIT OpenCourseware
185,"Molecular, Cellular and Tissue Biomechanics (BE.410J)","This course develops and applies scaling laws and the methods of continuum mechanics to biomechanical phenomena over a range of length scales. Topics include: structure of tissues and the molecular basis for macroscopic properties; chemical and electrical effects on mechanical behavior; cell mechanics, motility and adhesion; biomembranes; biomolecular mechanics and molecular motors. Experimental methods for probing structures at the tissue, cellular, and molecular levels will also be investigated.
This course was originally co-developed by Professors Alan Grodzinsky, Roger Kamm, and L. Mahadevan.
",https://ocw.mit.edu/courses/20-410j-molecular-cellular-and-tissue-biomechanics-be-410j-spring-2003/,MIT OpenCourseware
186,Underactuated Robotics,"Robots today move far too conservatively, using control systems that attempt to maintain full control authority at all times. Humans and animals move much more aggressively by routinely executing motions which involve a loss of instantaneous control authority. Controlling nonlinear systems without complete control authority requires methods that can reason about and exploit the natural dynamics of our machines.
This course discusses nonlinear dynamics and control of underactuated mechanical systems, with an emphasis on machine learning methods. Topics include nonlinear dynamics of passive robots (walkers, swimmers, flyers), motion planning, partial feedback linearization, energy-shaping control, analytical optimal control, reinforcement learning/approximate optimal control, and the influence of mechanical design on control. Discussions include examples from biology and applications to legged locomotion, compliant manipulation, underwater robots, and flying machines.
Professor Tedrake offered an updated version of this course that can be accessed through the edX platform.
Acknowledgements
Professor Tedrake would like to thank John Roberts for his help with the course and videotaping the lectures.
",https://ocw.mit.edu/courses/6-832-underactuated-robotics-spring-2009/,MIT OpenCourseware
187,Effective Programming in C and C++,"This course is a fast-paced introduction to the C and C++ programming languages, with an emphasis on good programming practices and how to be an effective programmer in these languages. Topics include object-oriented programming, memory management, advantages of C and C++, optimization, and others. Students are given weekly coding assignments and a final project to hone their skills. Recommended for programmers with some background and experience in other languages.
This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.
",https://ocw.mit.edu/courses/6-s096-effective-programming-in-c-and-c-january-iap-2014/,MIT OpenCourseware
188,Optimization Methods,"This course introduces the principal algorithms for linear, network, discrete, nonlinear, dynamic optimization and optimal control. Emphasis is on methodology and the underlying mathematical structures. Topics include the simplex method, network flow methods, branch and bound and cutting plane methods for discrete optimization, optimality conditions for nonlinear optimization, interior point methods for convex optimization, Newton’s method, heuristic methods, and dynamic programming and optimal control methods.",https://ocw.mit.edu/courses/15-093j-optimization-methods-fall-2009/,MIT OpenCourseware
189,Ultrafast Optics,"This course is offered to graduate students and addresses issues regarding ultrafast optics. Topics covered include: Generation, propagation and applications of ultrashort pulses (nano-, pico-, femto-, attosecond pulses); Linear and nonlinear pulse shaping processes: Optical solitons, Pulse compression; Laser principles: Single- and multi-mode laser dynamics, Q-switching, Active and passive mode-locking; Pulse characterization: Autocorrelation, FROG, SPIDER; Noise in mode-locked lasers and its limitations in measurements; Laser amplifiers, optical parametric amplifiers, and oscillators; Applications in research and industry: Pump-probe techniques, Optical imaging, Frequency metrology, Laser ablation, High harmonic generation.",https://ocw.mit.edu/courses/6-977-ultrafast-optics-spring-2005/,MIT OpenCourseware
190,Communications and Information Policy,"This course provides an introduction to the technology and policy context of public communications networks, through critical discussion of current issues in communications policy and their historical roots. The course focuses on underlying rationales and models for government involvement and the complex dynamics introduced by co-evolving technologies, industry structure, and public policy objectives. Cases drawn from cellular, fixed-line, and Internet applications include evolution of spectrum policy and current proposals for reform; the migration to broadband and implications for universal service policies; and property rights associated with digital content. The course lays a foundation for thesis research in this domain.",https://ocw.mit.edu/courses/esd-68j-communications-and-information-policy-spring-2006/,MIT OpenCourseware
191,Submicrometer and Nanometer Technology,"This course surveys techniques to fabricate and analyze submicron and nanometer structures, with applications. Optical and electron microscopy is reviewed. Additional topics that are covered include: surface characterization, preparation, and measurement techniques, resist technology, optical projection, interferometric, X-ray, ion, and electron lithography; Aqueous, ion, and plasma etching techniques; lift-off and electroplating; and ion implantation. Applications in microelectronics, microphotonics, information storage, and nanotechnology will also be explored.
Acknowledgements
The Instructors would like to thank Bob Barsotti, Bryan Cord, and Ben Wunsch for their work on the Atomic Force Microscope video. They would also like to thank Bryan Cord for creating each video.
",https://ocw.mit.edu/courses/6-781j-submicrometer-and-nanometer-technology-spring-2006/,MIT OpenCourseware
192,Introduction to Convex Optimization,"This course aims to give students the tools and training to recognize convex optimization problems that arise in scientific and engineering applications, presenting the basic theory, and concentrating on modeling aspects and results that are useful in applications. Topics include convex sets, convex functions, optimization problems, least-squares, linear and quadratic programs, semidefinite programming, optimality conditions, and duality theory. Applications to signal processing, control, machine learning, finance, digital and analog circuit design, computational geometry, statistics, and mechanical engineering are presented. Students complete hands-on exercises using high-level numerical software.
Acknowledgements
The course materials were developed jointly by Prof. Stephen Boyd (Stanford), who was a visiting professor at MIT when this course was taught, and Prof. Lieven Vanderberghe (UCLA).
",https://ocw.mit.edu/courses/6-079-introduction-to-convex-optimization-fall-2009/,MIT OpenCourseware
193,Dynamic Programming and Stochastic Control,"The course covers the basic models and solution techniques for problems of sequential decision making under uncertainty (stochastic control). We will consider optimal control of a dynamical system over both a finite and an infinite number of stages. This includes systems with finite or infinite state spaces, as well as perfectly or imperfectly observed systems. We will also discuss approximation methods for problems involving large state spaces. Applications of dynamic programming in a variety of fields will be covered in recitations.",https://ocw.mit.edu/courses/6-231-dynamic-programming-and-stochastic-control-fall-2015/,MIT OpenCourseware
194,Organic Optoelectronics,"The course examines optical and electronic processes in organic molecules and polymers that govern the behavior of practical organic optoelectronic devices. Electronic structure of a single organic molecule is used as a guide to the electronic behavior of organic aggregate structures. Emphasis is placed on the use of organic thin films in active organic devices including organic LEDs, solar cells, photodetectors, transistors, chemical sensors, memory cells, electrochromic devices, as well as xerography and organic non-linear optics. How to reach the ultimate miniaturization limit of molecular electronics and related nanoscale patterning techniques of organic materials will also be discussed. The class encompasses three laboratory sessions during which the students will practice the use of select vacuum and non-vacuum organic deposition techniques by making their own active organic devices.",https://ocw.mit.edu/courses/6-973-organic-optoelectronics-spring-2003/,MIT OpenCourseware
195,Semiconductor Manufacturing,"6.780 covers statistical modeling and the control of semiconductor fabrication processes and plants. Topics covered include: design of experiments, response surface modeling, and process optimization; defect and parametric yield modeling; process/device/circuit yield optimization; monitoring, diagnosis, and feedback control of equipment and processes; and analysis and scheduling of semiconductor manufacturing operations.",https://ocw.mit.edu/courses/6-780-semiconductor-manufacturing-spring-2003/,MIT OpenCourseware
196,Complex Digital Systems,"This course is offered to graduates and is a project-oriented course to teach new methodologies for designing multi-million-gate CMOS VLSI chips using high-level synthesis tools in conjunction with standard commercial EDA tools. The emphasis is on modular and robust designs, reusable modules, correctness by construction, architectural exploration, and meeting the area, timing, and power constraints within standard cell and FPGA frameworks.",https://ocw.mit.edu/courses/6-884-complex-digital-systems-spring-2005/,MIT OpenCourseware
197,"Patents, Copyrights, and the Law of Intellectual Property","This course is an intensive introduction to the U.S. law of intellectual property with major emphasis on patents, including what can be patented, the process of patent application, and the remedies for patent infringement.",https://ocw.mit.edu/courses/15-628j-patents-copyrights-and-the-law-of-intellectual-property-spring-2013/,MIT OpenCourseware
198,Engineering Risk-Benefit Analysis,"ERBA (ESD.72) emphasizes three methodologies - reliability and probabilistic risk assessment (RPRA), decision analysis (DA), and cost-benefit analysis (CBA). In this class, the issues of interest are: the risks associated with large engineering projects such as nuclear power reactors, the International Space Station, and critical infrastructures; the development of new products; the design of processes and operations with environmental externalities; and infrastructure renewal projects.",https://ocw.mit.edu/courses/esd-72-engineering-risk-benefit-analysis-spring-2007/,MIT OpenCourseware
199,Automatic Speech Recognition,"6.345 introduces students to the rapidly developing field of automatic speech recognition. Its content is divided into three parts. Part I deals with background material in the acoustic theory of speech production, acoustic-phonetics, and signal representation. Part II describes algorithmic aspects of speech recognition systems including pattern classification, search algorithms, stochastic modelling, and language modelling techniques. Part III compares and contrasts the various approaches to speech recognition, and describes advanced techniques used for acoustic-phonetic modelling, robust speech recognition, speaker adaptation, processing paralinguistic information, speech understanding, and multimodal processing.",https://ocw.mit.edu/courses/6-345-automatic-speech-recognition-spring-2003/,MIT OpenCourseware
200,Organic Optoelectronics,"The course examines optical and electronic processes in organic molecules and polymers that govern the behavior of practical organic optoelectronic devices. Electronic structure of a single organic molecule is used as a guide to the electronic behavior of organic aggregate structures. Emphasis is placed on the use of organic thin films in active organic devices including organic LEDs, solar cells, photodetectors, transistors, chemical sensors, memory cells, electrochromic devices, as well as xerography and organic non-linear optics. How to reach the ultimate miniaturization limit of molecular electronics and related nanoscale patterning techniques of organic materials will also be discussed. The class encompasses three laboratory sessions during which the students will practice the use of select vacuum and non-vacuum organic deposition techniques by making their own active organic devices.",https://ocw.mit.edu/courses/6-973-organic-optoelectronics-spring-2003/,MIT OpenCourseware
201,Complex Digital Systems,"This course is offered to graduates and is a project-oriented course to teach new methodologies for designing multi-million-gate CMOS VLSI chips using high-level synthesis tools in conjunction with standard commercial EDA tools. The emphasis is on modular and robust designs, reusable modules, correctness by construction, architectural exploration, and meeting the area, timing, and power constraints within standard cell and FPGA frameworks.",https://ocw.mit.edu/courses/6-884-complex-digital-systems-spring-2005/,MIT OpenCourseware
202,Speech Communication,"6.541J surveys the structural properties of natural languages, with special emphasis on the sound pattern. Topics covered include: representation of the lexicon; physiology of speech production; articulatory phonetics; acoustical theory of speech production; acoustical and articulatory descriptions of phonetic features and of prosodic aspects of speech; perception of speech; models of lexical access and of speech production and planning; and applications to recognition and generation of speech by machine, and to the study of speech disorders.",https://ocw.mit.edu/courses/6-541j-speech-communication-spring-2004/,MIT OpenCourseware
203,"Patents, Copyrights, and the Law of Intellectual Property","This course is an intensive introduction to the U.S. law of intellectual property with major emphasis on patents, including what can be patented, the process of patent application, and the remedies for patent infringement.",https://ocw.mit.edu/courses/15-628j-patents-copyrights-and-the-law-of-intellectual-property-spring-2013/,MIT OpenCourseware
204,Multicore Programming Primer,"The course serves as an introductory course in parallel programming. It offers a series of lectures on parallel programming concepts as well as a group project providing hands-on experience with parallel programming. The students will have the unique opportunity to use the cutting-edge PLAYSTATION 3 development platform as they learn how to design and implement exciting applications for multicore architectures. At the end of the course, students will have an understanding of:

Fundamental design philosophies that multicore architectures address.
Parallel programming philosophies and emerging best practices.

This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month. The course can be tailored to a normal semester time line.
Acknowledgements
The course instructors are extremely grateful to Sony, IBM, and Toshiba for their support.
",https://ocw.mit.edu/courses/6-189-multicore-programming-primer-january-iap-2007/,MIT OpenCourseware
205,"Geometric Folding Algorithms: Linkages, Origami, Polyhedra","This course focuses on the algorithms for analyzing and designing geometric foldings. Topics include reconfiguration of foldable structures, linkages made from one-dimensional rods connected by hinges, folding two-dimensional paper (origami), and unfolding and folding three-dimensional polyhedra. Applications to architecture, robotics, manufacturing, and biology are also covered in this course.
Acknowledgments
Thanks to videographers Martin Demaine and Jayson Lynch.
",https://ocw.mit.edu/courses/6-849-geometric-folding-algorithms-linkages-origami-polyhedra-fall-2012/,MIT OpenCourseware
206,Micro/Nano Processing Technology,"This course introduces the theory and technology of micro/nano fabrication. Lectures and laboratory sessions focus on basic processing techniques such as diffusion, oxidation, photolithography, chemical vapor deposition, and more. Through team lab assignments, students are expected to gain an understanding of these processing techniques, and how they are applied in concert to device fabrication. Students enrolled in this course have a unique opportunity to fashion and test micro/nano-devices, using modern techniques and technology.",https://ocw.mit.edu/courses/6-152j-micro-nano-processing-technology-fall-2005/,MIT OpenCourseware
207,Introduction to MATLAB,"This is an accelerated introduction to MATLAB® and its popular toolboxes. Lectures are interactive, with students conducting sample MATLAB problems in real time. The course includes problem-based MATLAB assignments. Students must provide their own laptop and software. This is great preparation for classes that use MATLAB.",https://ocw.mit.edu/courses/6-057-introduction-to-matlab-january-iap-2019/,MIT OpenCourseware
208,Principles and Practice of Assistive Technology,"6.811: Principles and Practice of Assistive Technology (PPAT) is an interdisciplinary, project-based course, centered around a design project in which small teams of students work closely with a person with a disability in the Cambridge area to design a device, piece of equipment, app, or other solution that helps them live more independently.",https://ocw.mit.edu/courses/6-811-principles-and-practice-of-assistive-technology-fall-2014/,MIT OpenCourseware
209,Elements of Software Construction,"This course provides an introduction to the fundamental principles and techniques of software development that have greatest impact on practice. Topics include capturing the essence of a problem by recognizing and inventing suitable abstractions; key paradigms, including state machines, functional programming, and object-oriented programming; use of design patterns to bridge gap between models and code; the role of interfaces and specification in achieving modularity and decoupling; reasoning about code using invariants; testing, test-case generation and coverage; and essentials of programming with objects, functions, and abstract types. The course includes exercises in modeling, design, implementation and reasoning.",https://ocw.mit.edu/courses/6-005-elements-of-software-construction-fall-2008/,MIT OpenCourseware
210,Laboratory in Software Engineering,"This course introduces concepts and techniques relevant to the production of large software systems. Students are taught a programming method based on the recognition and description of useful abstractions. Topics include modularity, specification, data abstraction, object modeling, design patterns, and testing. Students complete several programming projects of varying size, working individually and in groups.
Students are now introduced to software engineering in 6.005 Elements of Software Construction, which is available on OCW in two versions, as taught in Fall 2008 and Fall 2011.
",https://ocw.mit.edu/courses/6-170-laboratory-in-software-engineering-fall-2005/,MIT OpenCourseware
211,Mobile Autonomous Systems Laboratory,"MASLab (Mobile Autonomous System Laboratory), also known as 6.186, is a robotics contest. The contest takes place during MIT’s Independent Activities Period and participants earn 6 units of P/F credit and 6 Engineering Design Points. Teams of three to four students have less than a month to build and program sophisticated robots which must explore an unknown playing field and perform a series of tasks.
MASLab provides a significantly more difficult robotics problem than many other university-level robotics contests. Although students know the general size, shape, and color of the floors and walls, the students do not know the exact layout of the playing field. In addition, MASLab robots are completely autonomous, or in other words, the robots operate, calculate, and plan without human intervention. Finally, MASLab is one of the few robotics contests in the country to use a vision based robotics problem.
",https://ocw.mit.edu/courses/6-186-mobile-autonomous-systems-laboratory-january-iap-2005/,MIT OpenCourseware
212,Dynamic Systems and Control,"The course addresses dynamic systems, i.e., systems that evolve with time. Typically these systems have inputs and outputs; it is of interest to understand how the input affects the output (or, vice-versa, what inputs should be given to generate a desired output). In particular, we will concentrate on systems that can be modeled by Ordinary Differential Equations (ODEs), and that satisfy certain linearity and time-invariance conditions.
We will analyze the response of these systems to inputs and initial conditions. It is of particular interest to analyze systems obtained as interconnections (e.g., feedback) of two or more other systems. We will learn how to design (control) systems that ensure desirable properties (e.g., stability, performance) of the interconnection with a given dynamic system.
",https://ocw.mit.edu/courses/6-241j-dynamic-systems-and-control-spring-2011/,MIT OpenCourseware
213,Cognitive Robotics,"This is a class about applying autonomy to real-world systems. The overarching theme uniting the many different topics in this course will center around programming a cognitive robotic. This class takes the approach of introducing new reasoning techniques and ideas incrementally. We start with the current paradigm of programming you’re likely familiar with, and evolve it over the semester—continually adding in new features and reasoning capabilities—ending with a robust, intelligent system. These techniques and topics will include algorithms for allowing a robot to: Monitor itself for potential problems (both observable and hidden), scheduling tasks in time, coming up with novel plans to achieve desired goals over time, dealing with the continuous world, collaborating with other (autonomous) agents, dealing with risk, and more.",https://ocw.mit.edu/courses/16-412j-cognitive-robotics-spring-2016/,MIT OpenCourseware
214,Program Analysis,"6.883 is a graduate seminar that investigates a variety of program analysis techniques that address software engineering tasks. Static analysis topics include abstract interpretation (dataflow), type systems, model checking, decision procedures (SAT, BDDs), theorem-proving. Dynamic analysis topics include testing, fault isolation (debugging), model inference, and visualization. While the course focuses on the design and implementation of programming tools, the material will be useful to anyone who wishes to improve his or her programming or understand the state of the art. Students are expected to read classic and current technical papers, actively participate in class discussion, perform small exercises that provide experience with a variety of tools, and complete a team research project.",https://ocw.mit.edu/courses/6-883-program-analysis-fall-2005/,MIT OpenCourseware
215,"Introduction to Communication, Control, and Signal Processing","This course examines signals, systems and inference as unifying themes in communication, control and signal processing. Topics include input-output and state-space models of linear systems driven by deterministic and random signals; time- and transform-domain representations in discrete and continuous time; group delay; state feedback and observers; probabilistic models; stochastic processes, correlation functions, power spectra, spectral factorization; least-mean square error estimation; Wiener filtering; hypothesis testing; detection; matched filters.",https://ocw.mit.edu/courses/6-011-introduction-to-communication-control-and-signal-processing-spring-2010/,MIT OpenCourseware
216,"Molecular, Cellular, and Tissue Biomechanics","This course develops and applies scaling laws and the methods of continuum and statistical mechanics to biomechanical phenomena over a range of length scales, from molecular to cellular to tissue or organ level.",https://ocw.mit.edu/courses/20-310j-molecular-cellular-and-tissue-biomechanics-spring-2015/,MIT OpenCourseware
217,Machine Vision,"This course is an introduction to the process of generating a symbolic description of the environment from an image. It covers the physics of image formation, image analysis, binary image processing, and filtering. Machine vision has applications in robotics and the intelligent interaction of machines with their environment. Students taking the graduate version complete additional assignments.",https://ocw.mit.edu/courses/6-801-machine-vision-fall-2020/,MIT OpenCourseware
218,Information Theory,"This is a graduate-level introduction to mathematics of information theory. We will cover both classical and modern topics, including information entropy, lossless data compression, binary hypothesis testing, channel coding, and lossy data compression.",https://ocw.mit.edu/courses/6-441-information-theory-spring-2016/,MIT OpenCourseware
219,Design and Fabrication of Microelectromechanical Devices,"6.777J / 2.372J is an introduction to microsystem design. Topics covered include: material properties, microfabrication technologies, structural behavior, sensing methods, fluid flow, microscale transport, noise, and amplifiers feedback systems. Student teams design microsystems (sensors, actuators, and sensing/control systems) of a variety of types, (e.g., optical MEMS, bioMEMS, inertial sensors) to meet a set of performance specifications (e.g., sensitivity, signal-to-noise) using a realistic microfabrication process. There is an emphasis on modeling and simulation in the design process. Prior fabrication experience is desirable. The course is worth 4 Engineering Design Points.",https://ocw.mit.edu/courses/6-777j-design-and-fabrication-of-microelectromechanical-devices-spring-2007/,MIT OpenCourseware
220,"Molecular, Cellular, and Tissue Biomechanics","This course develops and applies scaling laws and the methods of continuum and statistical mechanics to biomechanical phenomena over a range of length scales, from molecular to cellular to tissue or organ level.",https://ocw.mit.edu/courses/20-310j-molecular-cellular-and-tissue-biomechanics-spring-2015/,MIT OpenCourseware
221,Information Theory,"This is a graduate-level introduction to mathematics of information theory. We will cover both classical and modern topics, including information entropy, lossless data compression, binary hypothesis testing, channel coding, and lossy data compression.",https://ocw.mit.edu/courses/6-441-information-theory-spring-2016/,MIT OpenCourseware
222,Nonlinear Programming,"This course introduces students to the fundamentals of nonlinear optimization theory and methods. Topics include unconstrained and constrained optimization, linear and quadratic programming, Lagrange and conic duality theory, interior-point algorithms and theory, Lagrangian relaxation, generalized programming, and semi-definite programming. Algorithmic methods used in the class include steepest descent, Newton’s method, conditional gradient and subgradient optimization, interior-point methods and penalty and barrier methods.",https://ocw.mit.edu/courses/15-084j-nonlinear-programming-spring-2004/,MIT OpenCourseware
223,Engineering Innovation and Design,"Learn to produce great designs, be a more effective engineer, and communicate with high emotional and intellectual impact. This project based course gives students the ability to understand, contextualize, and analyze engineering designs and systems. By learning and applying design thinking, students will more effectively solve problems in any domain. Lectures focus on teaching a tested, iterative design process as well as techniques to sharpen creative analysis. Guest lectures from all disciplines illustrate different approaches to design thinking. This course develops students’ skills to conceive, organize, lead, implement, and evaluate successful projects in any engineering discipline. Additionally, students learn how to give compelling in-person presentations. Open to all majors, all years.",https://ocw.mit.edu/courses/esd-051j-engineering-innovation-and-design-fall-2012/,MIT OpenCourseware
224,Creating Video Games,"CMS.611J / 6.073 Creating Video Games is a class that introduces students to the complexities of working in small, multidisciplinary teams to develop video games. Students will learn creative design and production methods, working together in small teams to design, develop, and thoroughly test their own original digital games. Design iteration across all aspects of video game development (game design, audio design, visual aesthetics, fiction and programming) will be stressed. Students will also be required to focus test their games, and will need to support and challenge their game design decisions with appropriate focus testing and data analysis.",https://ocw.mit.edu/courses/cms-611j-creating-video-games-fall-2014/,MIT OpenCourseware
225,Fundamentals of Photonics: Quantum Electronics,"This course explores the fundamentals of optical and optoelectronic phenomena and devices based on classical and quantum properties of radiation and matter culminating in lasers and applications. Fundamentals include: Maxwell’s electromagnetic waves, resonators and beams, classical ray optics and optical systems, quantum theory of light, matter and its interaction, classical and quantum noise, lasers and laser dynamics, continuous wave and short pulse generation, light modulation; examples from integrated optics and semiconductor optoelectronics and nonlinear optics.",https://ocw.mit.edu/courses/6-974-fundamentals-of-photonics-quantum-electronics-spring-2006/,MIT OpenCourseware
226,Integer Programming and Combinatorial Optimization,"The course is a comprehensive introduction to the theory, algorithms and applications of integer optimization and is organized in four parts: formulations and relaxations, algebra and geometry of integer optimization, algorithms for integer optimization, and extensions of integer optimization.",https://ocw.mit.edu/courses/15-083j-integer-programming-and-combinatorial-optimization-fall-2009/,MIT OpenCourseware
227,Introduction to Deep Learning,"This is MIT’s introductory course on deep learning methods with applications to computer vision, natural language processing, biology, and more! Students will gain foundational knowledge of deep learning algorithms and get practical experience in building neural networks in TensorFlow. Course concludes with a project proposal competition with feedback from staff and panel of industry sponsors. Prerequisites assume calculus (i.e. taking derivatives) and linear algebra (i.e. matrix multiplication), and we’ll try to explain everything else along the way! Experience in Python is helpful but not necessary.",https://ocw.mit.edu/courses/6-s191-introduction-to-deep-learning-january-iap-2020/,MIT OpenCourseware
228,Java Preparation for 6.170,"This course focuses on introducing the language, libraries, tools and concepts of Javaᵀᴹ. The course is specifically targeted at students who intend to take 6.170 in the following term and feel they would struggle because they lack the necessary background. Topics include: Object-oriented programming, primitives, arrays, objects, inheritance, interfaces, polymorphism, hashing, data structures, collections, nested classes, floating point precision, defensive programming, and depth-first search algorithm.",https://ocw.mit.edu/courses/6-092-java-preparation-for-6-170-january-iap-2006/,MIT OpenCourseware
229,"Engineering, Economics and Regulation of the Electric Power Sector","The course presents an in-depth interdisciplinary perspective of electric power systems, with regulation providing the link among the engineering, economic, legal and environmental viewpoints. Generation dispatch, demand response, optimal network flows, risk allocation, reliability of service, renewable energy sources, ancillary services, tariff design, distributed generation, rural electrification, environmental impacts and strategic sustainability issues will be among the topics addressed under both traditional and competitive regulatory frameworks.",https://ocw.mit.edu/courses/ids-505j-engineering-economics-and-regulation-of-the-electric-power-sector-spring-2010/,MIT OpenCourseware
230,Programming Languages,"6.821 teaches the principles of functional, imperative, and logic programming languages. Topics covered include: meta-circular interpreters, semantics (operational and denotational), type systems (polymorphism, inference, and abstract types), object oriented programming, modules, and multiprocessing. The course involves substantial programming assignments and problem sets as well as a significant amount of reading. The course uses the Scheme+ programming language for all of its assignments.",https://ocw.mit.edu/courses/6-821-programming-languages-fall-2002/,MIT OpenCourseware
231,"Engineering, Economics and Regulation of the Electric Power Sector","The course presents an in-depth interdisciplinary perspective of electric power systems, with regulation providing the link among the engineering, economic, legal and environmental viewpoints. Generation dispatch, demand response, optimal network flows, risk allocation, reliability of service, renewable energy sources, ancillary services, tariff design, distributed generation, rural electrification, environmental impacts and strategic sustainability issues will be among the topics addressed under both traditional and competitive regulatory frameworks.",https://ocw.mit.edu/courses/ids-505j-engineering-economics-and-regulation-of-the-electric-power-sector-spring-2010/,MIT OpenCourseware
232,Performance Engineering of Software Systems,"6.172 is an 18-unit class that provides a hands-on, project-based introduction to building scalable and high-performance software systems. Topics include performance analysis, algorithmic techniques for high performance, instruction-level optimizations, caching optimizations, parallel programming, and building scalable systems. The course programming language is C.",https://ocw.mit.edu/courses/6-172-performance-engineering-of-software-systems-fall-2018/,MIT OpenCourseware
233,Introduction to C++,"This is a fast-paced introductory course to the C++ programming language. It is intended for those with little programming background, though prior programming experience will make it easier, and those with previous experience will still learn C++-specific constructs and concepts.
This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.
",https://ocw.mit.edu/courses/6-096-introduction-to-c-january-iap-2011/,MIT OpenCourseware
234,Networks,"Networks are ubiquitous in our modern society. The World Wide Web that links us to the rest of the world is the most visible example. But it is only one of many networks in which we are situated. Our social life is organized around networks of friends and colleagues. These networks determine our information, influence our opinions, and shape our political attitudes. They also link us, often through weak but important ties, to everybody else in the United States and in the world. 
This course will introduce the tools for the study of networks. It will show how certain common principles permeate the functioning of these diverse networks and how the same issues related to robustness, fragility, and interlinkages arise in many different types of networks.
",https://ocw.mit.edu/courses/14-15-networks-spring-2022/,MIT OpenCourseware
235,Signals and Systems,"6.003 covers the fundamentals of signal and system analysis, focusing on representations of discrete-time and continuous-time signals (singularity functions, complex exponentials and geometrics, Fourier representations, Laplace and Z transforms, sampling) and representations of linear, time-invariant systems (difference and differential equations, block diagrams, system functions, poles and zeros, convolution, impulse and step responses, frequency responses). Applications are drawn broadly from engineering and physics, including feedback and control, communications, and signal processing.",https://ocw.mit.edu/courses/6-003-signals-and-systems-fall-2011/,MIT OpenCourseware
236,Biomedical Signal and Image Processing,"This course presents the fundamentals of digital signal processing with particular emphasis on problems in biomedical research and clinical medicine. It covers principles and algorithms for processing both deterministic and random signals. Topics include data acquisition, imaging, filtering, coding, feature extraction, and modeling. The focus of the course is a series of labs that provide practical experience in processing physiological data, with examples from cardiology, speech processing, and medical imaging. The labs are done in MATLAB® during weekly lab sessions that take place in an electronic classroom. Lectures cover signal processing topics relevant to the lab exercises, as well as background on the biological signals processed in the labs.",https://ocw.mit.edu/courses/hst-582j-biomedical-signal-and-image-processing-spring-2007/,MIT OpenCourseware
237,Principles of Digital Communications I,"The course serves as an introduction to the theory and practice behind many of today’s communications systems. 6.450 forms the first of a two-course sequence on digital communication. The second class, 6.451, is offered in the spring.
Topics covered include: digital communications at the block diagram level, data compression, Lempel-Ziv algorithm, scalar and vector quantization, sampling and aliasing, the Nyquist criterion, PAM and QAM modulation, signal constellations, finite-energy waveform spaces, detection, and modeling and system design for wireless communication.
",https://ocw.mit.edu/courses/6-450-principles-of-digital-communications-i-fall-2006/,MIT OpenCourseware
238,Microelectronic Devices and Circuits,"6.012 is the header course for the department’s “Devices, Circuits and Systems” concentration. The topics covered include: modeling of microelectronic devices, basic microelectronic circuit analysis and design, physical electronics of semiconductor junction and MOS devices, relation of electrical behavior to internal physical processes, development of circuit models, and understanding the uses and limitations of various models. The course uses incremental and large-signal techniques to analyze and design bipolar and field effect transistor circuits, with examples chosen from digital circuits, single-ended and differential linear amplifiers, and other integrated circuits. This course is 12 units and is worth 4 Engineering Design Points.",https://ocw.mit.edu/courses/6-012-microelectronic-devices-and-circuits-fall-2005/,MIT OpenCourseware
239,Discrete Stochastic Processes,"Discrete stochastic processes are essentially probabilistic systems that evolve in time via random changes occurring at discrete fixed or random intervals. This course aims to help students acquire both the mathematical principles and the intuition necessary to create, analyze, and understand insightful models for a broad range of these processes. The range of areas for which discrete stochastic-process models are useful is constantly expanding, and includes many applications in engineering, physics, biology, operations research and finance.",https://ocw.mit.edu/courses/6-262-discrete-stochastic-processes-spring-2011/,MIT OpenCourseware
240,Communication System Design,"This course presents a top-down approach to communications system design. The course will cover communication theory, algorithms and implementation architectures for essential blocks in modern physical-layer communication systems (coders and decoders, filters, multi-tone modulation, synchronization sub-systems). The course is hands-on, with a project component serving as a vehicle for study of different communication techniques, architectures and implementations. This year, the project is focused on WLAN transceivers. At the end of the course, students will have gone through the complete WLAN System-On-a-Chip design process, from communication theory, through algorithm and architecture all the way to the synthesized standard-cell RTL chip representation.",https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/,MIT OpenCourseware
241,Software Construction,"6.005 Software Construction introduces fundamental principles and techniques of software development, i.e., how to write software that is safe from bugs, easy to understand, and ready for change. The course includes problem sets and a final project. Important topics include specifications and invariants; testing; abstract data types; design patterns for object-oriented programming; concurrent programming and concurrency; and functional programming.
The 6.005 website homepage from Spring 2016, along with all course materials, is available to OpenCourseWare users.
",https://ocw.mit.edu/courses/6-005-software-construction-spring-2016/,MIT OpenCourseware
242,Principles of Digital Communication II,"This course is the second of a two-term sequence with 6.450. The focus is on coding techniques for approaching the Shannon limit of additive white Gaussian noise (AWGN) channels, their performance analysis, and design principles. After a review of 6.450 and the Shannon limit for AWGN channels, the course begins by discussing small signal constellations, performance analysis and coding gain, and hard-decision and soft-decision decoding. It continues with binary linear block codes, Reed-Muller codes, finite fields, Reed-Solomon and BCH codes, binary linear convolutional codes, and the Viterbi algorithm.
More advanced topics include trellis representations of binary linear block codes and trellis-based decoding; codes on graphs; the sum-product and min-sum algorithms; the BCJR algorithm; turbo codes, LDPC codes and RA codes; and performance of LDPC codes with iterative decoding. Finally, the course addresses coding for the bandwidth-limited regime, including lattice codes, trellis-coded modulation, multilevel coding and shaping. If time permits, it covers equalization of linear Gaussian channels.
",https://ocw.mit.edu/courses/6-451-principles-of-digital-communication-ii-spring-2005/,MIT OpenCourseware
243,Underactuated Robotics,"Robots today move far too conservatively, using control systems that attempt to maintain full control authority at all times. Humans and animals move much more aggressively by routinely executing motions which involve a loss of instantaneous control authority. Controlling nonlinear systems without complete control authority requires methods that can reason about and exploit the natural dynamics of our machines.
This course introduces nonlinear dynamics and control of underactuated mechanical systems, with an emphasis on computational methods. Topics include the nonlinear dynamics of robotic manipulators, applied optimal and robust control and motion planning. Discussions include examples from biology and applications to legged locomotion, compliant manipulation, underwater robots, and flying machines.
",https://ocw.mit.edu/courses/6-832-underactuated-robotics-spring-2022/,MIT OpenCourseware
244,The Battlecode Programming Competition,"This course is conducted as an artificial intelligence programming contest in Java. Students work in teams to program virtual robots to play Battlecode, a real-time strategy game. Optional lectures are provided on topics and programming practices relevant to the game, and students learn and improve their programming skills experientially. The competition culminates in a live Battlecode tournament.
This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.
",https://ocw.mit.edu/courses/6-370-the-battlecode-programming-competition-january-iap-2013/,MIT OpenCourseware
245,Advanced Electromagnetism,"In 6.635, topics covered include: special relativity, electrodynamics of moving media, waves in dispersive media, microstrip integrated circuits, quantum optics, remote sensing, radiative transfer theory, scattering by rough surfaces, effective permittivities, random media, Green’s functions for planarly layered media, integral equations in electromagnetics, method of moments, time domain method of moments, EM waves in periodic structures: photonic crystals and negative refraction.",https://ocw.mit.edu/courses/6-635-advanced-electromagnetism-spring-2003/,MIT OpenCourseware
246,Introduction to C Memory Management and C++ Object-Oriented Programming,"Ever hang your head in shame after your Python program wasn’t as fast as your friend’s C program? Ever wish you could use objects without having to use Java? Join us for this fun introduction to C and C++! We will take you through a tour that will start with writing simple C programs, go deep into the caves of C memory manipulation, resurface with an introduction to using C++ classes, dive deeper into advanced C++ class use and the C++ Standard Template Libraries. We’ll wrap up by teaching you some tricks of the trade that you may need for tech interviews.
We see this as a “C/C++ empowerment” course: we want you to come away understanding

why you would want to use C over another language (control over memory, probably for performance reasons),
why you would want to use C++ rather than C (objects), and
how to be useful in C and C++.

This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.
",https://ocw.mit.edu/courses/6-088-introduction-to-c-memory-management-and-c-object-oriented-programming-january-iap-2010/,MIT OpenCourseware
247,Convex Analysis and Optimization,"This course will focus on fundamental subjects in convexity, duality, and convex optimization algorithms. The aim is to develop the core analytical and algorithmic issues of continuous optimization, duality, and saddle point theory using a handful of unifying principles that can be easily visualized and readily understood.",https://ocw.mit.edu/courses/6-253-convex-analysis-and-optimization-spring-2012/,MIT OpenCourseware
248,Techniques in Artificial Intelligence (SMA 5504),"6.825 is a graduate-level introduction to artificial intelligence. Topics covered include: representation and inference in first-order logic, modern deterministic and decision-theoretic planning techniques, basic supervised learning methods, and Bayesian network inference and learning.
This course was also taught as part of the Singapore-MIT Alliance (SMA) programme as course number SMA 5504 (Techniques in Artificial Intelligence).
",https://ocw.mit.edu/courses/6-825-techniques-in-artificial-intelligence-sma-5504-fall-2002/,MIT OpenCourseware
249,Generative Artificial Intelligence in K–12 Education,"The emergence of transformer architectures in 2017 triggered a breakthrough in machine learning that today lets anyone create computer-generated essays, stories, pictures, music, videos, and programs from high-level prompts in natural language, all without the need to code. That has stimulated fervent discussion among educators about the implications of generative AI systems for curricula and teaching methods across a broad range of subjects. It has also raised questions of how to understand both these systems and the at times overstated claims made for them. This class will introduce the foundations of generative AI technology, and participants will explore new opportunities it enables for K–12 education. It will also describe and explore how an analytical frame of mind can help make clear the core issues underlying both the successes and failures of these systems. Much of the work will be project-based, involving implementing innovative teaching and learning tools and testing these with K–12 students and teachers.",https://ocw.mit.edu/courses/6-s062-generative-artificial-intelligence-in-k12-education-fall-2023/,MIT OpenCourseware
250,Street-Fighting Mathematics,"This course teaches the art of guessing results and solving problems without doing a proof or an exact calculation. Techniques include extreme-cases reasoning, dimensional analysis, successive approximation, discretization, generalization, and pictorial analysis. Applications include mental calculation, solid geometry, musical intervals, logarithms, integration, infinite series, solitaire, and differential equations. (No epsilons or deltas are harmed by taking this course.) This course is offered during the Independent Activities Period (IAP), which is a special 4-week term at MIT that runs from the first week of January until the end of the month.",https://ocw.mit.edu/courses/18-098-street-fighting-mathematics-january-iap-2008/,MIT OpenCourseware
251,Computer Science: Programming with a Purpose,"The basis for education in the last millennium was “reading, writing, and arithmetic;” now it is reading, writing, and computing. Learning to program is an essential part of the education of every student, not just in the sciences and engineering, but in the arts, social sciences, and humanities, as well. Beyond direct applications, it is the first step in understanding the nature of computer science’s undeniable impact on the modern world.  This course covers the first half of our book Computer Science: An Interdisciplinary Approach (the second half is covered in our Coursera course Computer Science: Algorithms, Theory, and Machines). Our intent is to teach programming to those who need or want to learn it, in a scientific context.  We begin by introducing basic programming elements such as variables, conditionals, loops, arrays, and I/O. Next, we turn to functions, introducing key concepts such as recursion, modular programming, and code reuse. Then, we present a modern introduction to object-oriented programming.

We use the Java programming language and teach basic skills for computational problem solving that are applicable in many modern computing environments. Proficiency in Java is a goal, but we focus on fundamental concepts in programming, not Java per se.

All the features of this course are available for free. People who are interested in digging deeper into the content may wish to obtain the textbook Computer Science: An Interdisciplinary Approach  (upon which the course is based) or to visit the website introcs.cs.princeton.edu for a wealth of additional material.

This course does not offer a certificate upon completion.",https://www.coursera.org/learn/cs-programming-java,Coursera
252,"Computer Science:  Algorithms, Theory, and Machines","This course  introduces the broader discipline of computer science to people having basic familiarity with Java programming.  It covers the second half of our book Computer Science: An Interdisciplinary Approach (the first half is covered in our Coursera course Computer Science: Programming with a Purpose, to be released in the fall of 2018). Our intent is to demystify computation and to build awareness about the substantial intellectual underpinnings and rich history of the field of computer science. First, we introduce classic algorithms along with scientific techniques for evaluating performance, in the context of modern applications. Next, we introduce classic theoretical models that allow us to address fundamental questions about computation, such as computability, universality, and intractability. We conclude with machine architecture (including machine-language programming and its relationship to coding in Java) and logic design (including a full CPU design built from the ground up).

The course emphasizes the relationships between applications programming, the theory of computation, real computers, and the field's history and evolution, including the nature of the contributions of Boole, Shannon, Turing, von Neumann, and others.

All the features of this course are available for free. People who are interested in digging deeper into the content may wish to obtain the textbook Computer Science: An Interdisciplinary Approach  (upon which the course is based) or to visit the website introcs.cs.princeton.edu for a wealth of additional material.

This course does not offer a certificate upon completion.",https://www.coursera.org/learn/cs-algorithms-theory-machines,Coursera
253,"HTML, CSS, and Javascript for Web Developers","Do you realize that the only functionality of a web application that the user directly interacts with is through the web page? Implement it poorly and, to the user, the server-side becomes irrelevant! Today’s user expects a lot out of the web page: it has to load fast, expose the desired service, and be comfortable to view on all devices: from a desktop computers to tablets and mobile phones. In this course, we will learn the basic tools that every web page coder needs to know. We will start from the ground up by learning how to implement modern web pages with HTML and CSS. We will then advance to learning how to code our pages such that its components rearrange and resize themselves automatically based on the size of the user’s screen. You’ll be able to code up a web page that will be just as useful on a mobile phone as on a desktop computer. No “pinch and zoom” required! Last but certainly not least, we will get a thorough introduction to the most ubiquitous, popular, and incredibly powerful language of the web: Javascript. Using Javascript, you will be able to build a fully functional web application that utilizes Ajax to expose server-side functionality and data to the end user.",https://www.coursera.org/learn/html-css-javascript-for-web-developers,Coursera
254,Learn to Program: The Fundamentals,"Behind every mouse click and touch-screen tap, there is a computer program that makes things happen. This course introduces the fundamental building blocks of programming and teaches you how to write fun and useful programs using the Python language.",https://www.coursera.org/learn/learn-to-program,Coursera
255,Introduction to Software Engineering,"Are you curious about the lucrative field that is software engineering and how you might be a part of it? This is the course for you! By taking this course you will gain foundational knowledge of software development, programming, and the many exciting job roles and career paths that the IT industry offers.  Learn about the power of the Software Development Lifecycle (SDLC), and modern software development frameworks methodologies like Agile and Scrum. Explore fundamental programming principles and foundations of design, architecture, and deployment. The course offers a number of labs that will help you get important hands-on experience. These include, getting started with an IDE, basics of programming in Python, and Hello World in 10 languages.  

The field of software engineering is growing at an estimated rate of 22% according to the US Bureau of Labor and Statistics. In addition to aspiring software engineers, front-end, back-end, full stack developers and DevOps professionals, this course is also suitable for those in related careers such as Product and Project Managers, IT Managers, Information Developers, UI/UX designers and others who communicate and interact with software engineers.   

You will learn about the different job opportunities and possible career paths in the software engineering field and also hear from industry professionals about what they do on a day-to-day basis.  

Professionals in the software engineering field are in great demand and now is a great time to learn more about this exciting domain. Start by enrolling now!",https://www.coursera.org/learn/introduction-to-software-engineering,Coursera
256,Introduction to TCP/IP,"You use the Internet through your PC (Personal Computer), laptop, tablet, smartpad, and smartphone every day in everything you do. Through your own PC/laptop, you can easily learn everything about the Internet, and that is what this course is focused on. In this course ‘Introduction to TCP/IP,’ you will learn the operational functions of Internet technologies (which include IPv4, IPv6, TCP, UDP, addressing, routing, domain names, etc.) and your PC/laptop's security and gateway Internet setup and basic principles. In addition, through a simple Wireshark experiment, you will see the TCP/IP packets and security systems in action that are serving your PC/laptop, that serves you.",https://www.coursera.org/learn/tcpip,Coursera
257,Foundations of Cybersecurity,"This is the first course in the Google Cybersecurity Certificate. These courses will equip you with the skills you need to prepare for an entry-level cybersecurity job.  In this course, you will be introduced to the world of cybersecurity through an interactive curriculum developed by Google. You will identify significant events that led to the development of the cybersecurity field, explain the importance of cybersecurity in today's business operations, and explore the job responsibilities and skills of an entry-level cybersecurity analyst. 

Google employees who currently work in cybersecurity will guide you through videos, provide hands-on activities and examples that simulate common cybersecurity tasks, and help you build your skills to prepare for jobs. 

Learners who complete the eight courses in the Google Cybersecurity Certificate will be equipped to apply for entry-level cybersecurity roles. No previous experience is necessary.

By the end of this course, you will: 
- Identify how security attacks impact business operations.
- Explore the job responsibilities and core skills of an entry-level cybersecurity analyst.
- Recognize how past and present attacks on organizations led to the development of the cybersecurity field.
- Learn the CISSP eight security domains.
- Identify security domains, frameworks, and controls.
- Explain security ethics.
- Recognize common tools used by cybersecurity analysts.",https://www.coursera.org/learn/foundations-of-cybersecurity,Coursera
258,Code Yourself! An Introduction to Programming,"Have you ever wished you knew how to program, but had no idea where to start from? This course will teach you how to program in Scratch, an easy to use visual programming language. More importantly, it will introduce you to the fundamental principles of computing and it will help you think like a software engineer.",https://www.coursera.org/learn/intro-programming,Coursera
259,Computational Thinking for Problem Solving,"Computational thinking is the process of approaching a problem in a systematic manner and creating and expressing a solution such that it can be carried out by a computer.  But you don't need to be a computer scientist to think like a computer scientist!  In fact, we encourage students from any field of study to take this course.  Many quantitative and data-centric problems can be solved using computational thinking and an understanding of computational thinking will give you a foundation for solving problems that have real-world, social impact.    In this course, you will learn about the pillars of computational thinking, how computer scientists develop and analyze algorithms, and how solutions can be realized on a computer using the Python programming language.  By the end of the course, you will be able to develop an algorithm and express it to the computer by writing a simple Python program. 

This course will introduce you to people from diverse professions who use computational thinking to solve problems. You will engage with a unique community of analytical thinkers and be encouraged to consider how you can make a positive social impact through computational thinking.",https://www.coursera.org/learn/computational-thinking-problem-solving,Coursera
260,Cybersecurity for Everyone,"Cybersecurity affects everyone, including in the delivery of basic products and services. If you or your organization want to better understand how to address your cybersecurity, this is the course for you and your colleagues to take -- from seasoned professionals to your non-technical colleagues. Your instructor, Dr. Charles Harry, has served on the front lines with the NSA (National Security Agency) and as an expert advising corporate and institutional leaders on managing cybersecurity risk. And he brings a rare and engaging perspective to help you learn cybersecurity from the ground up.

Cybersecurity for Everyone lays the groundwork to understand and explore the key issues facing policy makers attempting to manage the problem of cybersecurity, from its technical foundations to the domestic and international policy considerations surrounding governance, privacy, and risk management, to applications for achieving the goals of an enterprise, an institution, or a nation. This course is designed for students with some or no background in information technology, whether a novice or active in the cybersecurity field (engineers and computer scientists will learn the broader context and business aspects of cybersecurity), and will provide the principles to understand the current debates shaping a rapidly evolving security landscape.",https://www.coursera.org/learn/cybersecurity-for-everyone,Coursera
261,Foundations of Computer Science,"Welcome to Introduction to Programming: Visual Basic.  In the course sequence you will learn to write programs that utilize both procedural and object oriented techniques to solve business problems.   In the first course in the sequence we will provide you with a solid foundation in the computer science topics that are important to understand when programming Visual Basic. In courses two through four, we will role up our sleeves and start coding in Visual Basic. In these courses you need to have access to a computer that is running Windows, macOS or Linux with the .NET 5 installed.  We will show you how to install .NET 5.",https://www.coursera.org/learn/computer-science-foundations,Coursera
262,How Computers Work,"Computers are everywhere, they aren't just the desktops and laptops we use for work but the phones in our pockets and even the watches on our wrists are also computers. You probably use a computer every day and in fact you are reading this on a computer!  Just because we use computers all the time, doesn't mean that we understand them, or find them easy to use. Computer Science is the science of computers, it is the field of knowledge that experts use to understand computer systems. Knowing a little computer science will help you understand the computers all around you. 

This isn't a how-to course for a particular piece of software, instead you will learn some fundamental concepts that you can apply to any software or computer system. You'll apply these concepts to the kind of computer systems we use every day, including word processing applications, e-commerce, the internet and web sites. You will learn how to apply computer science concepts to solve problems in daily computer use and generally be a better computer user. 

Taking this course could be the start of your career in computer science, and the course is an introduction to the Bachelors in Computer Science from University of London, but it is also for you if you just want to learn a little computer science to help you better understand the computers you use in your ordinary life.",https://www.coursera.org/learn/how-computers-work,Coursera
263,"Programming Languages, Part A","This course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language “fits together” to make you more effective programming in any language -- and in learning new ones. This course is neither particularly theoretical nor just about programming specifics -- it will give you a framework for understanding how to use language constructs effectively and how to design correct and elegant programs. By using different languages, you will learn to think more deeply than in terms of the particular syntax of one language. The emphasis on functional programming is essential for learning how to write robust, reusable, composable, and elegant programs. Indeed, many of the most important ideas in modern languages have their roots in functional programming. Get ready to learn a fresh and beautiful way to look at software and how to have fun building it.

The course assumes some prior experience with programming, as described in more detail in the first module.

The course is divided into three Coursera courses: Part A, Part B, and Part C.  As explained in more detail in the first module of Part A, the overall course is a substantial amount of challenging material, so the three-part format provides two intermediate milestones and opportunities for a pause before continuing.  The three parts are designed to be completed in order and set up to motivate you to continue through to the end of Part C.  The three parts are not quite equal in length: Part A is almost as substantial as Part B and Part C combined.

Week 1 of Part A has a more detailed list of topics for all three parts of the course, but it is expected that most course participants will not (yet!) know what all these topics mean.",https://www.coursera.org/learn/programming-languages,Coursera
264,Interactive Computer Graphics,"Computer graphics can be a powerful tool for supporting visual problem solving, and interactivity plays a central role in harnessing the users' creativity. This course will introduce various interactive tools developed in computer graphics research field with their design rationales and algorithms. Examples include enhancements to graphical user interfaces, authoring tools for 2D drawings and 3D animations, and interactive computer-aided design systems. Rich live demonstrations and course assignments will give you insights and skills to design and implement such tools for your own problems.",https://www.coursera.org/learn/interactive-computer-graphics,Coursera
265,Information Technology (IT) Fundamentals for Everyone,"This course will guide you through fundamental concepts and skills to confidently navigate various aspects of IT and the digital world. You will be introduced to the vast field of IT, covering a wide range of topics to build your IT knowledge. You will delve into hardware, operating systems technology, software, programming, databases, networking, storage, cybersecurity, cloud computing, and support and operations. Designed to summarize the IT Fundamentals and Cloud specialization courses, this course is ideal for individuals seeking non-IT practitioner roles, such as project managers. It provides essential insights into the IT field, equipping you to collaborate effectively with IT teams and make informed decisions within your role. Each lesson contains materials such as hands-on labs and interactive activities to practice your newfound skills, glossaries to help you learn new vocabulary, as well as practice and graded quizzes to assess what you’ve learned.

If you seek a non-technical role in the IT industry, this course provides you with a strong foundation so you can thrive in the ever-evolving IT landscape.",https://www.coursera.org/learn/information-technology-it-fundamentals-for-everyone,Coursera
266,Programming Fundamentals,"Programming is an increasingly important skill, whether you aspire to a career in software development, or in other fields. This course is the first in the specialization Introduction to Programming in C, but its lessons extend to any language you might want to learn. This is because programming is fundamentally about figuring out how to solve a class of problems and writing the algorithm, a clear set of steps to solve any problem in its class. This course will introduce you to a powerful problem-solving process—the Seven Steps—which you can use to solve any programming problem. In this course, you will learn how to develop an algorithm, then progress to reading code and understanding how programming concepts relate to algorithms.",https://www.coursera.org/learn/programming-fundamentals,Coursera
267,Computer Hardware and Software,"This course provides foundational understanding of how computers process information through hardware and software. You will investigate the world of Information Technology (IT) and survey hardware components, mobile devices, operating systems, programs and apps, network fundamentals, the Internet, and touch on security and ethics.",https://www.coursera.org/learn/computer-hardware-software,Coursera
268,An Introduction to Logic for Computer Science,"Logic plays a fundamental role in computer science. This course is designed to equip you with a solid understanding of the fundamental principles of logic and their relevance in the field of computer science.  In this course, you'll explore proposition logic and discover its practical applications in problem-solving, algorithm design, and the development of intelligent systems. By engaging in hands-on exercises, exploring real-world examples, and participating in discussions, you'll develop strong logical reasoning and critical thinking skills. 

Join this course to build a solid foundation in logic, enhance your problem-solving abilities, and unlock new opportunities in the world of computer science.

This course is one of many, offered by Click Start, a UK training programme designed to help young people develop digital skills. Click Start offers a limited number of scholarships giving free access to young people in the UK. Check the FAQs to see more detail and follow the link to check if you are eligible for free access today.",https://www.coursera.org/learn/an-introduction-to-logic-in-computer-science,Coursera
269,Python Programming Fundamentals,"This introductory course is designed for beginners and individuals with limited programming experience who want to embark on their software development or data science journey using Python. Throughout the course, learners will gain a solid understanding of algorithmic thinking, Python syntax, code testing, debugging techniques, and modular code development--essential skills for a successful career in software engineering, development, or data science.  By the end of this course, you will learn to:

- Gain a stepwise approach to problem-solving using algorithms and programming logic.
- Apply common functions, conditional statements, and loops to build Python scripts and programs.
- Work with the VS Code programming environment to enhance coding proficiency.
- Use testing and debugging strategies to ensure code reliability.
- Perform logical and mathematical operations on datasets.

In the final week of the course you will apply your new algorithm design and programming skills to a data analysis problem: analyzing heart rate data.",https://www.coursera.org/learn/python-programming-fundamentals,Coursera
270,Mathematical Thinking in Computer Science,"Mathematical thinking is crucial in all areas of computer science: algorithms, bioinformatics, computer graphics, data science, machine learning, etc. In this course, we will learn the most important tools used in discrete mathematics: induction, recursion, logic, invariants, examples, optimality. We will use these tools to answer typical programming questions like: How can we be certain a solution exists? Am I sure my program computes the optimal answer? Do each of these objects meet the given requirements? In the online course, we use a try-this-before-we-explain-everything approach: you will be solving many interactive (and mobile friendly) puzzles that were carefully designed to allow you to invent many of the important ideas and concepts yourself.

Prerequisites: 
1. We assume only basic math (e.g., we expect you to know what is a square or how to add fractions), common sense and curiosity. 
2. Basic programming knowledge is necessary as some quizzes require programming in Python.",https://www.coursera.org/learn/what-is-a-proof,Coursera
271,Introduction to Python Programming,"This course provides an introduction to programming and the Python language.  Students are introduced to core programming concepts like data structures, conditionals, loops, variables, and functions.  This course includes an overview of the various tools available for writing and running Python, and gets students coding quickly.  It also provides hands-on coding exercises using commonly used data structures, writing custom functions, and reading and writing to files. This course may be more robust than some other introductory python courses, as it delves deeper into certain essential programming topics.",https://www.coursera.org/learn/python-programming-intro,Coursera
272,Cryptography I,"Cryptography is an indispensable tool for protecting information in computer systems. In this course you will learn the inner workings of cryptographic systems and how to correctly use them in real-world applications. The course begins with a detailed discussion of how two parties who have a shared secret key can communicate securely when a powerful adversary eavesdrops and tampers with traffic. We will examine many deployed protocols and analyze mistakes in existing systems. The second half of the course discusses public-key techniques that let two parties generate a shared secret key. Throughout the course participants will be exposed to many exciting open problems in the field and work on fun (optional) programming projects. In a second course (Crypto II) we will cover more advanced cryptographic tasks such as zero-knowledge, privacy mechanisms, and other forms of encryption.",https://www.coursera.org/learn/crypto,Coursera
273,Introduction to Agile Development and Scrum,"Get started with using Agile Development and Scrum with this self-paced introductory course! After successfully completing this course, you will be able to embrace the Agile concepts of adaptive planning, iterative development, and continuous improvement - resulting in early deliveries and value to customers.  You will look at Scrum as a framework and learn how to apply it alongside Agile. You will also become familiar with related methodologies like Waterfall, Extreme Programming (XP), and Kanban. 

Apply Agile practices derived from lean manufacturing concepts, like test-driven development. Learn how a scrum team functions. Also learn about the importance of Agile iterative planning and enable yourself to write good user stories and track your team’s progress using a kanban board.  

Create and refine a product backlog collaboratively with the team and the customer, in a flexible and blameless culture. You'll also learn how to use burndown charts, achieve sprint goals, and conduct the sprint review and retrospective. This approach will lead you to higher levels of efficiency, with the ability to plan and execute sprints with your development team, measuring success with actionable metrics.  

This course is about more than facts and processes. It is about working collaboratively on a self-organizing team, coached by a scrum master, and building what is needed, rather than simply following a plan. Developed and taught by an experienced Agile practitioner, the course includes hands-on practice through realistic scenario-based labs using GitHub and ZenHub. 

The course will benefit anyone who wants to get started with working the Agile way or transform the organizational culture to adopt and realize the benefits of Scrum. This includes Project Managers, Product Managers, and Executives. It is particularly suitable for IT practitioners such as software developers, development managers, and IT Scrum Masters.",https://www.coursera.org/learn/agile-development-and-scrum,Coursera
274,Programming for Everybody (Getting Started with Python),"This course aims to teach everyone the basics of programming computers using Python. We cover the basics of how one constructs a program from a series of simple instructions in Python.  The course has no pre-requisites and avoids all but the simplest mathematics. Anyone with moderate computer experience should be able to master the materials in this course. This course will cover Chapters 1-5 of the textbook “Python for Everybody”.  Once a student completes this course, they will be ready to take more advanced programming courses. This course covers Python 3.",https://www.coursera.org/learn/python,Coursera
275,"Problem Solving, Python Programming, and Video Games","This course is an introduction to computer science and programming in Python.  Upon successful completion of this course, you will be able to: 1.  Take a new computational problem and solve it, using several problem solving techniques including abstraction and problem decomposition.
2.  Follow a design creation process that includes: descriptions, test plans, and algorithms.
3.  Code, test, and debug a program in Python, based on your design.

Important computer science concepts such as problem solving (computational thinking), problem decomposition, algorithms, abstraction, and software quality are emphasized throughout.

This course uses problem-based learning. The Python programming language and video games are used to demonstrate computer science concepts in a concrete and fun manner. The instructional videos present Python using a conceptual framework that can be used to understand any programming language. This framework is based on several general programming language concepts that you will learn during the course including: lexics, syntax, and semantics.

Other approaches to programming may be quicker, but are more focused on a single programming language, or on a few of the simplest aspects of programming languages. The approach used in this course may take more time, but you will gain a deeper understanding of programming languages. After completing the course,  in addition to learning Python programming, you will be able to apply the knowledge and skills you acquired to: non-game problems, other programming languages, and other computer science courses.

You do not need any previous programming, Python, or video game experience.  However, several basic skills are needed: computer use (e.g., mouse, keyboard, document editing), elementary mathematics, attention to detail (as with many technical subjects), and a “just give it a try” spirit will be keys to your success.  Despite the use of video games for the main programming project, PVG is not about computer games.  For each new programming concept, PVG uses non-game examples to provide a basic understanding of computational principles, before applying these programming concepts to video games.

The interactive learning objects (ILO) of the course provide automatic, context-specific guidance and feedback, like a virtual teaching assistant, as you develop problem descriptions, functional test plans, and algorithms.  The course forums are supported by knowledgeable University of Alberta personnel, to help you succeed.

All videos, assessments, and ILOs are available free of charge.  There is an optional Coursera certificate available for a fee.",https://www.coursera.org/learn/problem-solving-programming-video-games,Coursera
276,Introduction to Java,"This Course is the first of a series of courses that make up the Core Java Specialization.  The Core Java Specialization, in turn, is part of a series of programming specializations, derived from LearnQuest's private Java Bootcamps, designed to provide the skill set necessary to be hired as an IT developer using Java in many corporate environments. This course includes hands-on practice and will give you a solid knowledge of the Java language. After completing this course, you will be able to identify Java’s benefits, program in basic Java syntax using Java data types, and incorporate branches and loops.

The audience for this course:
-    Anyone interested in learning Java
-    Programmers
-    Technical Managers
-    Application Developers

Prerequisites: To be successful with this course, you should understand the fundamentals of software development in either a procedural or object-oriented language.",https://www.coursera.org/learn/java-introduction,Coursera
277,Basic Mathematics,"Welcome to Basic Mathematics course! This course provides elementary introduction to basic mathematics concepts and their applications. In this course, you will be introduced to Complex Numbers, Quadratic Equations, Trigonometry, Matrices, Differential Calculus, Integral Calculus and Ordinary Differential Equations along with the applications of each concept. After completing this course, you will be able to use basic mathematics concepts effectively and also will be able to apply the concepts in real-world problems.",https://www.coursera.org/learn/basicmathematics,Coursera
278,"Dynamic Programming, Greedy Algorithms","This course covers basic algorithm design techniques such as divide and conquer, dynamic programming, and greedy algorithms. It concludes with a brief introduction to intractability (NP-completeness) and using linear/integer programming solvers for solving optimization problems. We will also cover some advanced topics in data structures. This course can be taken for academic credit as part of CU Boulder’s MS in Data Science or MS in Computer Science degrees offered on the Coursera platform. These fully accredited graduate degrees offer targeted courses, short 8-week sessions, and pay-as-you-go tuition. Admission is based on performance in three preliminary courses, not academic history. CU degrees on Coursera are ideal for recent graduates or working professionals. Learn more: 

MS in Data Science: https://www.coursera.org/degrees/master-of-science-data-science-boulder 

MS in Computer Science: https://coursera.org/degrees/ms-computer-science-boulder",https://www.coursera.org/learn/dynamic-programming-greedy-algorithms,Coursera
279,Introduction to Back-End Development,"Welcome to Introduction to Back-End Development, the first course in the Meta Back-End Developer program.   This course is a good place to start if you want to become a web developer. You will learn about the day-to-day responsibilities of a web developer and get a general understanding of the core and underlying technologies that power the internet. You will learn how front-end developers create websites and applications that work well and are easy to maintain. 

You’ll be introduced to the core web development technologies like HTML and CSS and get opportunities to practice using them. You will also be introduced to modern UI frameworks such as Bootstrap and React that make it easy to create interactive user experiences. 

By the end of the course, you will be able to: 
- Describe the front-end developer role 
- Explain the core and underlying technologies that power the internet 
- Use HTML to create a simple webpage 
- Use CSS to control the appearance of a simple webpage 
- Explain what React is 
- Describe the applications and characteristics of the most popular UI frameworks 

For the final project in this course, you will create and edit a webpage using HTML and the Bootstrap CSS framework. Using a responsive layout grid, you will construct a responsive webpage containing text and images that looks great on any size screen. 

This is a beginner course intended for learners eager to learn the fundamentals of web development. To succeed in this course, you do not need prior web development experience, only basic internet navigation skills and an eagerness to get started with coding.",https://www.coursera.org/learn/introduction-to-back-end-development,Coursera
280,Introduction to User Experience Design ,"The focus of this course is to introduce the learner to User Experience (UX) Design User Experience design is design that is user centered. The goal is to design artifacts that allow the users to meet their needs in the most effective efficient and satisfying manner. The course introduces the novice to a cycle of discovery and evaluation and a set of techniques that meet the user's needs.

This course is geared toward the novice. It is for learners that have heard about ""user experience"" or ""user interface"" design but don't really know much about these disciplines.

The course mantra is that “Design is a systematic and data driven process.” Design is systematic because it is based on a set of techniques and also on a cycle of discovery.

In this course the learner is introduced to the four step user interface design cycle. Along the way learners are exposed to a set of techniques to gather information about a) what the user needs b)how to design and model interfaces based on these and then how to evaluate the design to ascertain that the user's goals are met. These techniques are tools that are used in a standardized manner and give us the data we use in our design.

This means that anyone (regardless of their current training) that is willing to learn these techniques and follow the proposed cycle can be a UX designer!",https://www.coursera.org/learn/user-experience-design,Coursera
281,APIs,"Delve deeper into the processes and concepts behind APIs and their infrastructure. Explore the key concepts that underpin API development and the principles of representational state transfer architectural style (REST) architecture. Build basic API and REST data backbones for web apps using Django. Discover emerging API technology and practice other ways to build and work with APIs. Finally, you will test, optimize and develop documentation for an API. By the end of this course you will be able to:

• Work with and build APIs
• Build basic API and REST data backbones for web apps using Django
• Discover emerging API technology 
• Test, optimize and develop documentation for an API

To complete this course, you will need Django experience.  Additionally, it always helps to have a can-do attitude!",https://www.coursera.org/learn/apis,Coursera
282,An Introduction to Programming using Python,"Maximise your employability, by learning the basics of coding in Python. Python is a versatile programming language used for developing websites and software, task automation, data analysis and more.  In this course, you'll embark on an exciting journey into the world of Python and gain valuable skills that will enable you to start thinking about a career in programming.

Through exercises and practical projects, you will gain confidence and deepen your understanding of coding in Python. By the end of the course, you will be able to showcase your skills by programming a small robot to navigate obstacles. 

Join us on this transformative journey and unlock the boundless potential of Python programming to discover the opportunities awaiting you in the world of development.

This course is offered by Click Start, a nationwide training programme designed to help young people develop digital skills. Click Start offers a limited number of scholarships giving free access to young people in the UK. Follow the link in the Click Start bio to check if you are eligible for free access!",https://www.coursera.org/learn/an-introduction-to-programming-using-python,Coursera
283,"Introduction to Web Development with HTML, CSS, JavaScript","Want to take the first steps to become a Web Developer? This course will help you discover the languages, frameworks, and tools that you will need to create interactive and engaging websites right from the beginning.   You will begin by learning about the roles of front-end, back-end, and full-stack developers and how they work together on development projects. Through this, you will also become familiar with the terminology and skills needed in your career as a web developer.  

Next, you will explore the languages needed for developing websites or applications. You will gain a thorough understanding of HTML and CSS and learn how a combination of both technologies can help developers create the structure and style of their websites.  

Finally, you will learn how JavaScript can make your webpages dynamic with features that include interactive forms, dynamic content modification, and sophisticated menu systems. 

By learning the fundamentals of HTML5, CSS, and JavaScript you will be able to combine them to:  
- create the basic structure of a website  
- create format and layout for web applications 
- enhance your website and create rich, interactive applications 
- increase user interactivity and enhance user experience 
- give your website a real wow factor! 

In this course you will practice what you learn with numerous hands-on labs. Lastly, you will complete a final project where you will create a webpage to showcase your skills and have a great addition to your portfolio!",https://www.coursera.org/learn/introduction-to-web-development-with-html-css-javacript,Coursera
284,C++ Basics: Selection and Iteration,"Code and run your first C++ program in minutes without installing anything! This course is designed for learners with no coding experience, providing a solid foundation of not just C++, but core Computer Science topics that can be transferred to other languages. The modules in this course cover printing, operators, iteration (i.e., loops), and selection (i.e., conditionals).

To allow for a truly hands-on, self-paced learning experience, this course is video-free. Assignments contain short explanations with images and runnable code examples with suggested edits to explore code examples further, building a deeper understanding by doing. You'll benefit from instant feedback from a variety of assessment items along the way, gently progressing from quick understanding checks (multiple choice, fill in the blank, and un-scrambling code blocks) to small, approachable coding exercises that take minutes instead of hours.",https://www.coursera.org/learn/codio-cpp-basics,Coursera
285,Introduction to Programming,"Designed for the not-yet-experienced programmer, this course will provide you with a structured foundation for developing complex programs in the fields of computer science or data science. If you are a self-taught programmer with scattered bits of understanding, or a complete novice, this is the course for you. Here, you will gain a thorough understanding of how to write programs to solve problems, through structured, scaffolded, hands-on exercises with many examples and opportunities to practice. You will learn the foundational concepts of computer science by developing programs in the python programming language (one of the most commonly used languages).  

We will also use many of the most common python packages -- why reinvent the wheel when you can use well-tested, flexible, pre-built solutions? While these packages can save significant time, it is also important to understand how they do their magic, and if your particular problem is the right fit to be solved by these potential tools.  You will encounter the following python packages: numpy, scipy, matplotlib, pandas, seaborn, re (for regular expressions), textblob, nltk, and others.

In the process of learning how to program, we will explore different topics at the introductory level, including natural language processing and data analytics.

By the end of this course, you will be confident in your ability to solve a problem using the python programming language -- and how to verify that your solution is accurate.",https://www.coursera.org/learn/ball-state-university-introduction-to-programming-open-content,Coursera
286,Software Defined Networking,"In this course, you will learn about software defined networking and how it is changing the way communications networks are managed, maintained, and secured.",https://www.coursera.org/learn/sdn,Coursera
287,C for Everyone: Structured Programming,"In the new world we live in, coding is a universally valuable skill, whether you're a scientist, artist, or a humanist. Algorithms are everywhere, and we all have to understand how they work. The C language is particularly well suited as an introduction to coding: It's a tried-and-true language, and it allows you to understand computing processes at a deep level. You will also get an introduction to more advanced programming in C++ in the final module.  This is a continuation of C for Everyone: Fundamentals, which you should take before beginning this course. 
The time estimated time commitment for this course is five hours a week for five weeks.",https://www.coursera.org/learn/c-structured-programming,Coursera
288,Calculus for Machine Learning and Data Science,"After completing this course, learners will be able to: •  Analytically optimize different types of functions commonly used in machine learning using properties of derivatives and gradients 
•  Approximately optimize different types of functions commonly used in machine learning using first-order (gradient descent) and second-order (Newton’s method) iterative methods
• Visually interpret differentiation of different types of functions commonly used in machine learning
• Perform gradient descent in neural networks with different activation and cost functions 

Mathematics for Machine Learning and Data science is a foundational online program created by DeepLearning.AI and taught by Luis Serrano. This beginner-friendly program is where you’ll master the fundamental mathematics toolkit of machine learning.

Many machine learning engineers and data scientists need help with mathematics, and even experienced practitioners can feel held back by a lack of math skills. This Specialization uses innovative pedagogy in mathematics to help you learn quickly and intuitively, with courses that use easy-to-follow plugins and visualizations to help you see how the math behind machine learning actually works. 

Upon completion, you’ll understand the mathematics behind all the most common algorithms and data analysis techniques — plus the know-how to incorporate them into your machine learning career.

This is a beginner-friendly program, with a recommended background of at least high school mathematics (functions, basic algebra). We also recommend a basic familiarity with Python (loops, functions, if/else statements, lists/dictionaries, importing libraries) , as labs use Python and Jupyter Notebooks to demonstrate learning objectives in the environment where they’re most applicable to machine learning and data science.",https://www.coursera.org/learn/machine-learning-calculus,Coursera
289,Sound the Alarm: Detection and Response,"This is the sixth course in the Google Cybersecurity Certificate. These courses will equip you with the skills you need to apply for an entry-level cybersecurity job. You’ll build on your understanding of the topics that were introduced in the fifth Google Cybersecurity Certificate course. In this course, you will focus on incident detection and response. You'll define a security incident and explain the incident response lifecycle, including the roles and responsibilities of incident response teams. You'll analyze and interpret network communications to detect security incidents using packet sniffing tools to capture network traffic. By assessing and analyzing artifacts, you'll explore the incident investigation and response processes and procedures. Additionally, you'll practice using Intrusion Detection Systems (IDS) and Security Information Event Management (SIEM) tools.

Google employees who currently work in cybersecurity will guide you through videos, provide hands-on activities and examples that simulate common cybersecurity tasks, and help you build your skills to prepare for jobs. 

Learners who complete this certificate will be equipped to apply for entry-level cybersecurity roles. No previous experience is necessary.

By the end of this course, you will: 
- Explain the lifecycle of an incident.
- Describe the tools used in documentation, detection, and management of incidents.
- Analyze packets to interpret network communications.
- Perform artifact investigations to analyze and verify security incidents.
- Identify the steps to contain, eradicate, and recover from an incident.
- Determine how to read and analyze logs during incident investigation.
- Interpret the basic syntax and components of signatures and logs in Intrusion Detection Systems (IDS) and Network Intrusion Detection Systems (NIDS) tools.
- Perform queries in Security Information and Event Management (SIEM) tools to investigate an event.",https://www.coursera.org/learn/detection-and-response,Coursera
290,Google Workspace Mail Management,"""Google Workspace Mail Management is the fourth course in the Google Workspace Administration series. In this course you will learn how to protect your organization against spam, spoofing, phishing and malware attacks. You will configure email compliance and learn how to implement data loss prevention (DLP) for your organization. You will gain an understanding of the mail routing options available and learn how to allowlist and block senders. You will also become familiar with other mail options such as inbound and outbound gateways, 3rd party email archiving, and journaling to Vault.""",https://www.coursera.org/learn/google-workspace-mail-management,Coursera
291,Introduction to Computer Programming ,"This MOOC provides you with the foundational skill set required to write computer programs. If you are interested in learning how to write interactive, graphical programs from an introductory level in a real programming language, this is the course for you. You will begin by learning the basics of editing and running programs. Then you will learn how to create 2D graphics using shapes and coordinates. Finally, you will learn how to create interactive graphics that you can control with the mouse. You will even solve a set of interactive puzzles using your coding skills in the Sleuth game which has been created especially for this course. The course uses the Javascript language and the p5.js library.",https://www.coursera.org/learn/introduction-to-computer-programming,Coursera
292,International Cyber Conflicts,"By nature, cyber conflicts are an international issue that span across nation-state borders. By the end of the course, you will be able to apply the knowledge gained for analysis and management of international cyber incidents and conflicts including for activities such as development of policy related to cybercrime and cyberwarfare. Management of cyber incidents and conflicts requires an interdisciplinary perspective including an understanding of: 1) characteristics of the cyber threats and conflicts themselves, 2) international efforts to reduce and improve cyber security, and 3) psychological and sociopolitical factors.  The course is designed to reach an international audience and will encourage discussion on relevant current events among participants to enrich the experience with various personal and cultural perspectives on cutting-edge issues. In addition, assignments and other assessments will supplement video lectures and selected readings to ensure application of the material.


After taking this course you will be able to:

• Identify different types of actors involved in cyber threats (individuals, organizations & nation-states)
• Distinguish between different types of threats and issues in cyber security including, data theft, political espionage, critical infrastructure protection, and propaganda
• Detail the basic characteristics of the Internet infrastructure and international efforts to address Internet governance
• List several international efforts to address cyber crime and espionage
• Evaluate how principals that govern international conflicts might be applied in context of cyber security
• Apply different psychological theories of human motivation and cooperation and communication and political theories in analysis of different international issues related to cyber security including censorship, media operations and role of social technologies.


Grading:

Your grade is assessed based on discussion posts and quizzes. Individual taking this course for credit (i.e. students at the University at Albany y will be required to engage in additional activities communicated to them directly). 


Recommended Background:

No background knowledge or skills are necessary, but an understanding and familiarity of cyber security, Internet infrastructure and international law would be advantageous for anyone who participates in the course.


ACKNOWLEDGEMENTS

Ersin Dincelli and Nic DePaula were the instructional designers for the course who assisted in the recording of the videos, reviewing material, creating slides, assessments and some of the content. Without their tremendous effort this would not have been possible. We also acknowledge the financial support for the recordings from the University at Albany as well as the support from Media and Marketing. Finally, thanks to Lisa Stephens who is the SUNY liaison to Coursera for being a strong supporter of the MOOC.",https://www.coursera.org/learn/cyber-conflicts,Coursera
293,Introduction to HTML5,"Thanks to a growing number of software programs, it seems as if anyone can make a webpage. But what if you actually want to understand how the page was created? There are great textbooks and online resources for learning web design, but most of those resources require some background knowledge. This course is designed to help the novice who wants to gain confidence and knowledge.  We will explore the theory (what actually happens when you click on a link on a webpage?), the practical (what do I need to know to make my own page?), and the overlooked (I have the code, but how do I put it on the web to share with others?). Throughout the course there will be a strong emphasis on adhering to syntactic standards for validation and semantic standards to promote wide accessibility for users with disabilities.

This course will appeal to a wide variety of people, but specifically those who would like a step-by-step description of the basics. There are no prerequisites for this course and it is assumed that students have no prior programming skills or IT experience. The course will culminate in a small final project that will require the completion of a very simple page with links and images. The focus of this course is on the basics, not appearance. You can see a sample final HTML page at https://example-site-1--wd4ehtml.repl.co/ .

This is the first course in the Web Design For Everybody specialization. Subsequent courses focus on the marketable skills of styling the page with CSS3, adding interactivity with JavaScript and enhancing the styling with responsive design.",https://www.coursera.org/learn/html,Coursera
294,Python Data Structures,"This course will introduce the core data structures of the Python programming language. We will move past the basics of procedural programming and explore how we can use the Python built-in data structures such as lists, dictionaries, and tuples to perform increasingly complex data analysis. This course will cover Chapters 6-10 of the textbook “Python for Everybody”.  This course covers Python 3.",https://www.coursera.org/learn/python-data,Coursera
295,"Graph Search, Shortest Paths, and Data Structures","The primary topics in this part of the specialization are: data structures (heaps, balanced search trees, hash tables, bloom filters), graph primitives (applications of breadth-first and depth-first search, connectivity, shortest paths), and their applications (ranging from deduplication to social network analysis).",https://www.coursera.org/learn/algorithms-graphs-data-structures,Coursera
296,Build a Modern Computer from First Principles: Nand to Tetris Part II (project-centered course),"In this project-centered course you will build a modern software hierarchy, designed to enable the translation and execution of object-based, high-level languages on a bare-bone computer hardware platform. In particular, you will implement a virtual machine and a compiler for a simple, Java-like programming language, and you will develop a basic operating system that closes gaps between the high-level language and the underlying hardware platform. In the process, you will gain a deep, hands-on understanding of numerous topics in applied computer science, e.g. stack processing, parsing, code generation, and classical algorithms and data structures for memory management, vector graphics, input-output handling, and various other topics that lie at the very core of every modern computer system. This is a self-contained course: all the knowledge necessary to succeed in the course and build the various systems will be given as part of the learning experience. The only prerequisite is knowledge of programming at the level acquired in introduction to computer science courses. All the software tools and materials that are necessary to complete the course will be supplied freely after you enrol in the course.

This course is accompanied by the textbook ""The Elements of Computing Systems"" (Nisan and Schocken, MIT Press). While not required for taking the course, the book provides a convenient coverage of all the course topics. The book is available in either hardcopy or ebook form, and MIT Press is offering a 30% discount off the cover price by using the discount code MNTT30 at https://mitpress.mit.edu/books/elements-computing-systems. 

The course consists of six modules, each comprising a series of video lectures, and a project. You will need about 2-3 hours to watch each module's lectures, and about 15 hours to complete each one of the six projects. The course can be completed in six weeks, but you are welcome to take it at your own pace. You can watch a TED talk about this course by Googling ""nand2tetris TED talk"". 

*About Project-Centered Courses: Project-centered courses are designed to help you complete a personally meaningful real-world project, with your instructor and a community of learners with similar goals providing guidance and suggestions along the way. By actively applying new concepts as you learn, you’ll master the course content more efficiently; you’ll also get a head start on using the skills you gain to make positive changes in your life and career. When you complete the course, you’ll have a finished project that you’ll be proud to use and share.",https://www.coursera.org/learn/nand2tetris2,Coursera
297,Agile with Atlassian Jira,"This course discusses common foundational principles and practices used by agile methodologies, providing you with a flexible set of tools to use in your role (e.g. product owner, scrum master, project manager, team member) on an agile team. Learn agile and lean principles, including kanban and scrum, and use Jira Software Cloud as the tool to apply hands-on exercises in these topics. The course includes instruction on company-managed and team-managed Jira projects.  After completing this course, you will have a strong foundational understanding of agile principles and practices and hands-on experience with Jira Software Cloud. Site administrators will be able to perform basic administration tasks. You will be able to continuously configure your Jira projects to match your team's custom agile methodology.

Once completing this course, you will be prepared to earn your first Atlassian credential: https://go.atlassian.com/coursera-apb-330

*You can use a free Jira Software Cloud site to complete the hands-on labs associated with this course. This will require a Windows, Mac, or Linux computer.",https://www.coursera.org/learn/agile-atlassian-jira,Coursera
298,Programming for a Networked World ,"Want to learn the basics of computer programming in a fun and innovative way? This course introduces computer programming using an educational block-based visual programming environment called NetsBlox (https://editor.netsblox.org/), emphasizing modern computer science concepts like networking, the internet, and distributed computing. The curriculum is hands-on, focusing on translating ideas into working computer programs and developing a mastery of practical computational literacy. After completing this course, you will have a solid foundation to learn professional languages like Python, Java, etc. The course is especially suitable for K12 teachers and students who want to get a gentle introduction to computer science.",https://www.coursera.org/learn/programming-for-a-networked-world,Coursera
299,Software Architecture Patterns for Big Data,"The course is intended for individuals looking to understand the architecture patterns necessary to take large software systems that make use of big data to production. You will transform big data prototypes into high quality tested production software. After measuring the performance characteristics of distributed systems, you will identify trouble areas and implement scalable solutions to improve performance. Upon completion of the course you will know how to scale production data stores to perform under load, designing load tests to ensure applications meet performance requirements.

This course can be taken for academic credit as part of CU Boulder’s MS in Data Science or MS in Computer Science degrees offered on the Coursera platform. These fully accredited graduate degrees offer targeted courses, short 8-week sessions, and pay-as-you-go tuition. Admission is based on performance in three preliminary courses, not academic history. CU degrees on Coursera are ideal for recent graduates or working professionals. Learn more: 

MS in Data Science: https://www.coursera.org/degrees/master-of-science-data-science-boulder 

MS in Computer Science: https://coursera.org/degrees/ms-computer-science-boulder",https://www.coursera.org/learn/software-architecture-patterns-for-big-data,Coursera
300,Search Engines for Web and Enterprise Data,"This course introduces the technologies behind web and search engines, including document indexing, searching and ranking. You will also learn different performance metrics for evaluating search quality, methods for understanding user intent and document semantics, and advanced applications including recommendation systems and summarization. Real-life examples and case studies are provided to reinforce the understanding of search algorithms.",https://www.coursera.org/learn/search-engine,Coursera
301,Hands-on Introduction to Linux Commands and Shell Scripting,"This course provides a practical understanding of common Linux / UNIX shell commands. In this beginner friendly course, you will learn about the Linux basics, Shell commands, and Bash shell scripting.    You will begin this course with an introduction to Linux and explore the Linux architecture. You will interact with the Linux Terminal, execute commands, navigate directories, edit files, as well as install and update software. 

Next, you’ll become familiar with commonly used Linux commands. You will work with general purpose commands like id, date, uname, ps, top, echo, man; directory management commands such as pwd, cd, mkdir, rmdir, find, df; file management commands like cat, wget, more, head, tail, cp, mv, touch, tar, zip, unzip; access control command chmod; text processing commands - wc, grep, tr; as well as networking commands - hostname, ping, ifconfig and curl.  

You will then move on to learning the basics of shell scripting to automate a variety of tasks. You’ll create simple to more advanced shell scripts that involve Metacharacters, Quoting, Variables, Command substitution, I/O Redirection, Pipes & Filters, and Command line arguments. You will also schedule cron jobs using crontab. 

The course includes both video-based lectures as well as hands-on labs to practice and apply what you learn. You will have no-charge access to a virtual Linux server that you can access through your web browser, so you don't need to download and install anything to complete the labs. 

You’ll end this course with a final project as well as a final exam. In the final project you will demonstrate your knowledge of course concepts by performing your own Extract, Transform, and Load (ETL) process and create a scheduled backup script. 

This course is ideal for data engineers, data scientists, software developers, and cloud practitioners who want to get familiar with frequently used commands on Linux, MacOS and other Unix-like operating systems as well as get started with creating shell scripts.",https://www.coursera.org/learn/hands-on-introduction-to-linux-commands-and-shell-scripting,Coursera
302,Operations Research (1): Models and Applications,"Operations Research (OR) is a field in which people use mathematical and engineering methods to study optimization problems in Business and Management, Economics, Computer Science, Civil Engineering, Industrial Engineering, etc. This course introduces frameworks and ideas about various types of optimization problems in the business world. In particular, we focus on how to formulate real business problems into mathematical models that can be solved by computers.",https://www.coursera.org/learn/operations-research-modeling,Coursera
303,Introduction to Medical Software,"In this class, we present a broad overview of the field of medical software.  You will learn from Yale professors and a series of industry experts who connect the course concepts to their real world applications. We begin by discussing medical device regulatory structures, data privacy and cybersecurity regulations, and key support technologies such quality management systems and risk management. We then take a detailed look at the medical software life cycle, starting with identifying user needs, mapping these to system requirements and then the process of software design, coding, testing and validation. We continue by exploring issues related to the use of machine learning techniques in medical applications from both a software engineering and a regulatory perspective. We conclude with a discussion of the business and management issues in this area focusing on the impact on digital health on modern healthcare and issues related to starting new ventures.

This is a class aimed at either third- or fourth-year undergraduates in computer science, biomedical engineering, and related fields, and to junior software engineers currently either working in, or interested in moving to, the medical device industry.",https://www.coursera.org/learn/introduction-to-medical-software,Coursera
304,Getting Started with Git and GitHub,"Get started with Git and GitHub in this self-paced, introductory course! You’ll become familiar with collaborative version control and popular Git platforms. Collaboration and social coding are crucial parts of contemporary Software Engineering practices and the DevOps culture.  You will begin this course with an overview of Git and Github fundamentals and explore key Git concepts such as branching and repositories, as well as the use of Git commands. You will also learn and practice various Git concepts such as forking, cloning and merging workflows using hands-on labs. And you’ll learn to use GitHub to work effectively as a team, and perform common Git operations, from both the Web UI and command line. 

The course wraps up with a final project where you will start building your portfolio by creating and sharing a public/open-source GitHub project. By completing this course you will demonstrate your Git and Github skills as well as add a project to your resume! 

All hands-on activities in this course can be performed using web-browser based tools and interfaces. Installation of any specialized software is NOT required on your own computer in order to complete the course.",https://www.coursera.org/learn/getting-started-with-git-and-github,Coursera
305,Monitoring and Observability for Development and DevOps,"Application developers and DevOps professionals must ensure their app works at its best. However, these app may need help with bugs, slow speed, or subpar performance. Professionals need to monitor and observe its performance continually. Application monitoring involves identifying, measuring, and evaluating the effectiveness of an application. On the other hand, Observability refers to how well an app can be monitored by the data obtained from monitoring. Both monitoring and observability are necessary to gain insights into the system and ensure its proper functioning.

This course thoroughly introduces monitoring and observability, covering fundamental concepts and popular tools like Prometheus, Grafana, Mezmo (LogDNA), and Instana. You will also learn about the three pillars of observability and tracing for container applications and gain hands-on experience with the OpenTelemetry framework.

Throughout the course, you will complete interactive hands-on labs to apply your knowledge, and gain experience with the tools and techniques used by software and DevOps professionals.

By the end of this course, you will be able to demonstrate your knowledge of monitoring and observability, and you will gain the confidence to perform these tasks in a practical setting.",https://www.coursera.org/learn/monitoring-and-observability-for-development-and-devops,Coursera
306,Programming with JavaScript,"JavaScript is the programming language that powers the modern web. In this course, you will learn the basic concepts of web development with JavaScript. You will work with functions, objects, arrays, variables, data types, the HTML DOM, and much more. You will learn how to use JavaScript and discover interactive possibilities with modern JavaScript technologies. Finally, you will learn about the practice of testing code and how to write a unit test using Jest.",https://www.coursera.org/learn/programming-with-javascript,Coursera
307,Principles of UX/UI Design,"Learn the fundamentals of User Experience (UX) research and design. Become immersed in the UX process of identifying problems and iterating and testing designs to find appropriate solutions. You’ll learn how to empathize with users through best-practice research approaches, and create common UX artifacts such as user personas. And you’ll use UX insights to make appropriate design decisions.  By utilizing the User Interface (UI) design process, you will be able to create wireframes for features in Figma, and turn them into Minimum Viable Product (MVP) style prototypes from your mockups. You’ll also learn the core principles of design such as hierarchy and the use of grids.

By the end of this course you will be able to: 

• Design digital products that create value and solve a user's problems in meaningful ways. 
• Recognize what constitutes successful UX UI and evaluate existing interfaces for design consistency and quality.
•  Identify best practice interaction design methods and evaluate and improve your own and others' designs.
•  Create, share and test your UX UI designs following best practice guidelines.

This is a beginner course for learners who would like to prepare themselves for a career in UX  UI development. To succeed in this course, you do not need prior development experience, only basic internet navigation skills and an eagerness to learn.",https://www.coursera.org/learn/principles-of-ux-ui-design,Coursera
308,Introduction to High-Performance and Parallel Computing,"This course introduces the fundamentals of high-performance and parallel computing. It is targeted to scientists, engineers, scholars, really everyone seeking to develop the software skills necessary for work in parallel software environments. These skills include big-data analysis, machine learning, parallel programming, and optimization. We will cover the basics of Linux environments and bash scripting all the way to high throughput computing and parallelizing code. We recommend you are familiar with either Fortran 90, C++, or Python to complete some of the programming assignments.  After completing this course, you will familiar with:

*The components of a high-performance distributed computing system
*Types of parallel programming models and the situations in which they might be used
*High-throughput computing
*Shared memory parallelism
*Distributed memory parallelism
*Navigating a typical Linux-based HPC environment
*Assessing and analyzing application scalability including weak and strong scaling
*Quantifying the processing, data, and cost requirements for a computational project or workflow

This course can be taken for academic credit as part of CU Boulder’s Master of Science in Data Science (MS-DS) degree offered on the Coursera platform. The MS-DS is an interdisciplinary degree that brings together faculty from CU Boulder’s departments of Applied Mathematics, Computer Science, Information Science, and others. With performance-based admissions and no application process, the MS-DS is ideal for individuals with a broad range of undergraduate education and/or professional experience in computer science, information science, mathematics, and statistics. Learn more about the MS-DS program at https://www.coursera.org/degrees/master-of-science-data-science-boulder.",https://www.coursera.org/learn/introduction-high-performance-computing,Coursera
309,Developing Back-End Apps with Node.js and Express,"In a recent Stack Overflow survey, Node.js was used by about 50% of the developers who answered the survey, making it the most used server-side technology. Express ranked as the fourth most popular web technology overall, making it the most popular server-side web framework.    In this course, you will focus on Node.js and Express. Specifically, you will 

- develop applications using asynchronous callbacks and promises

- create REST APIs and perform CRUD operations

- implement authentication and session management

Throughout the course, you will complete numerous hands-on labs to gain practical experience. At the end of the course, you will demonstrate your Node skills with a final project to build your portfolio.
 
This course will help you succeed as a back-end or full-stack developer. It suits those in IT looking to step up in their careers or new graduates seeking to establish their server-side skills. This course suits those who need to manage cloud-centric projects.

Note: This course requires knowledge of JavaScript and Git.",https://www.coursera.org/learn/developing-backend-apps-with-nodejs-and-express,Coursera
310,Coding Interview Preparation,"The final course in this program will help prepare you for the unique aspects of a coding job interview, with approaches to problem-solving and computer science foundations needed to land the job. Ultimately you’ll gain strategic insights and tips for successful interviewing.  By the end of this course, you'll have knowledge of:
•  Appropriate communication during a coding interview
•  Successful interviewing strategies
• Using pseudocode
•  The fundamentals of computer science
• The capabilities of data structures and how to implement them
• How to review data structures in the context of coding interviews
•  The concept of algorithms and common approaches to working with them
•  How to visualize an algorithm
•  Combining new and previously learned coding patterns to solve problems

Ideally, you should have completed all the courses in this professional certificate.",https://www.coursera.org/learn/coding-interview-preparation,Coursera
311,Computer Vision Basics,"By the end of this course, learners will understand what computer vision is, as well as its mission of making computers see and interpret the world as humans do, by learning core concepts of the field and receiving an introduction to human vision capabilities. They are equipped to identify some key application areas of computer vision and understand the digital imaging process. The course covers crucial elements that enable computer vision: digital signal processing, neuroscience and artificial intelligence. Topics include color, light and image formation; early, mid- and high-level vision; and mathematics essential for computer vision. Learners will be able to apply mathematical techniques to complete computer vision tasks.  This course is ideal for anyone curious about or interested in exploring the concepts of computer vision. It is also useful for those who desire a refresher course in mathematical concepts of computer vision. Learners should have basic programming skills and experience (understanding of for loops, if/else statements), specifically in MATLAB (Mathworks provides the basics here: https://www.mathworks.com/learn/tutorials/matlab-onramp.html). Learners should also be familiar with the following: basic linear algebra (matrix vector operations and notation), 3D co-ordinate systems and transformations, basic calculus (derivatives and integration) and basic probability (random variables).  

Material includes online lectures, videos, demos, hands-on exercises, project work, readings and discussions. Learners gain experience writing computer vision programs through online labs using MATLAB* and supporting toolboxes.

 * A free license to install MATLAB for the duration of the course is available from MathWorks.",https://www.coursera.org/learn/computer-vision-basics,Coursera
312,Introduction to 3D Modeling,"On this four-week practical course from the University of Michigan, you’ll not only learn how to use the Rhino software to create your 3D models, but you’ll also gain basic design skills to help bring your imagination to life. This course will guide you through 3D modeling within Rhino, so you’ll cover the fundamentals of the software as well as 3D modeling in general. You’ll first look at how to navigate the user interface and the different tools that you’ll be using to create models throughout this course. You’ll familiarize yourself with the 3D space and 3D objects before jumping straight in to create your own objects and building blocks.  Design is a vital part of 3D modeling. You can be a master of the software but if you aren’t aware of fundamental design concepts, you won’t be able to truly unleash your potential. You’ll build your basic design skills by looking at line, shape, form, and space, before creating and editing 2D line forms that you’ll transform into patterned mandalas and 3D tile wall designs. 

This course will guide you through the concept of profile modeling and will allow you to utilize 3D surface and 3D solid modeling tools to create and edit more complex designs. To round out your foundational knowledge, you’ll dive into 3D rendering and creating 3D printable models. Then, once you’ve completed each step of the course, you can bring your newfound skills together into one final 3D modeling project.

This course has been designed for anyone interested in 3D design and learning how to use 3D modeling software. You don’t need any previous knowledge or experience to benefit from this course. It will be particularly useful to Architects, Designers, Engineers, or anyone studying in these fields.",https://www.coursera.org/learn/introduction-to-3d-modeling,Coursera
313,Learn to Program: Crafting Quality Code,"Not all programs are created equal.  In this course, we'll focus on writing quality code that runs correctly and efficiently.  We'll design, code and validate our programs and learn how to compare programs that are addressing the same task.",https://www.coursera.org/learn/program-code,Coursera
314,Building Web Applications in PHP,"In this course, you'll explore the basic structure of a web application, and how a web browser interacts with a web server. You'll be introduced to the request/response cycle, including GET/POST/Redirect. You'll also gain an introductory understanding of Hypertext Markup Language (HTML), as well as the basic syntax and data structures of the PHP language, variables, logic, iteration, arrays, error handling, and superglobal variables, among other elements. An introduction to Cascading Style Sheets (CSS) will allow you to style markup for webpages. Lastly, you'll gain the skills and knowledge to install and use an integrated PHP/MySQL environment like XAMPP or MAMP.",https://www.coursera.org/learn/web-applications-php,Coursera
315,React Basics,"React is a powerful JavaScript library that you can use to build user interfaces for web and mobile applications (apps). In this course, you will explore the fundamental concepts that underpin the React library and learn the basic skills required to build a simple, fast, and scalable app. By the end of this course, you will be able to:
• Use reusable components to render views where data changes over time
• Create more scalable and maintainable websites and apps 
• Use props to pass data between components 
• Create dynamic and interactive web pages and apps
• Use forms to allow users to interact with the web page 
• Build an application in React

You’ll gain experience with the following tools and software: 
• React.js
• JSX
• React
• HTML, CSS and JavaScript 
• VSCode

You will be able to leverage the potential of this course to develop new skills, improve productivity, act effectively with data and boost your career.

This is a beginner course for learners who would like to prepare themselves for a career in mobile development. To succeed in this course, you do not need prior development experience, only basic internet navigation skills and an eagerness to get started with coding.",https://www.coursera.org/learn/react-basics,Coursera
316,Cryptography,"This course will introduce you to the foundations of modern cryptography, with an eye toward practical applications.",https://www.coursera.org/learn/cryptography,Coursera
317,Design Computing: 3D Modeling in Rhinoceros with Python/Rhinoscript,"Why should a designer learn to code? As our world is increasingly impacted by the use of algorithms, designers must learn how to use and create design computing programs. Designers must go beyond the narrowly focused use of computers in the automation of simple drafting/modeling tasks and instead explore the extraordinary potential digitalization holds for design culture/practice.

Structured around a series of fundamental design problems, this course will show you Python code in terms of its rules and syntax, and what we can do with it in its application and design. So, by the end of this course, you will know the fundamentals of Python and Rhino script, but importantly, through the lens of their application in geometrically focused design lessons and exercises.


Subjects covered in this course
- An introduction to Design Computing as a subject and why designers should learn to code.

- The fundamentals of coding in the Python scripting language. By the end of the course students will be familiar with the basic structure and syntax of this language.

- The understanding and application of Rhinoscriptsyntax, a native coding language in Rhinoceros that’s imported into Python, which allows one to create and control geometries through authoring code.

- The application of Procedural Logics - the structuring of coding systems to produce variable geometric form.

- The output of geometries in still and animate forms.",https://www.coursera.org/learn/3d-modeling-rhinoscript,Coursera
318,VFX with Adobe After Effects from Novice to Expert,"Embark on a transformative journey into Adobe After Effects, gaining fundamental and advanced skills. Explore the intricacies of the interface, create compositions and master timeline dynamics. Dive into hands-on experiences, shaping proficiency in animation, advanced text techniques, and masking for enhanced visual effects. Discover the profound impact of light, colors, and perspective, refining chroma keying, compositing, and motion tracking skills. Immerse yourself in 3D integration, lighting, and tracking for dynamic storytelling. Master advanced techniques like Graph Editor precision, keyframe intricacies, and 3D text creation. Elevate skills in keying, particle systems, and cutting-edge special effects, crafting polished compositions. Conclude with foundational color correction, Lumetri Panel mastery, and effective portfolio building. By the end of this course, you'll:

1) Acquire a robust set of skills in Adobe After Effects. 
2) Proficiently navigate the After Effects interface, master the art of composition creation and effectively manipulate the timeline for seamless animations. 
3) Understand the profound impact of light, colors, and perspective, employing chroma keying, compositing, and motion tracking for impactful visual storytelling. 
4) Your skills will culminate in advanced keying, particle systems, and special effects, resulting in polished and visually engaging compositions. 

The course concludes with proficiency in color correction, mastery of the Lumetri Panel, and effective portfolio-building strategies, ensuring you are well-equipped for professional success in Adobe After Effects.",https://www.coursera.org/learn/vfx-with-adobe-after-effects-from-novice-to-expert,Coursera
319,The Arduino Platform and C Programming,"The Arduino is an open-source computer hardware/software platform for building digital devices and interactive objects that can sense and control the physical world around them. In this class you will learn how the Arduino platform works in terms of the physical board and libraries and the IDE (integrated development environment). You will also learn about shields, which are smaller boards that plug into the main Arduino board to perform other functions such as sensing light, heat, GPS tracking, or providing a user interface display. The course will also cover programming the Arduino using C code and accessing the pins on the board via the software to control external devices. Please note that this course does not include discussion forums. Upon completing this course, you will be able to:
1.       Outline the composition of the Arduino development board
2.       Describe what it means to program the board's firmware
3.       Read board schematics
4.       Install Arduino IDE
5.       Describe what ""shields"" are and how they are used
6.       Specify the role of libraries in the use of shields
7.       Compile and run a program
8.       Name C Variables and Types
9.       Name common C operators
10.     Use conditionals and loops
11.     Explain functions, their definition and invocation
12.     Explain the implications of global variables
13.     Undertake the Arduino build process
14.     Describe the role of the tools behind the IDE
15.     Describe how to invoke functions in classes
16.     Explain the structure of an Arduino sketch
17.     Access the pins of the Arduino
18.     Differentiate between digital and analog pin
19.     Debug embedded software
20.     Explain the importance of controllability and observability in the debugging process
21.     Describe common debugging architectures for embedded systems
22.     Explain how the UART Serial communication protocol works
23.     Describe how the Arduino Serial library performs serial communication",https://www.coursera.org/learn/arduino-platform,Coursera
320,"Introduction to Software, Programming, and Databases ","Take the next step in your IT professional journey with this self-paced, beginner friendly course! This course covers the basics of software, cloud computing, web browsers, application development concepts, programming languages, and database fundamentals.  You will first be introduced to computing platforms and software applications. You’ll learn about the software lifecycle, software compatibility across different platforms, and software versioning. You'll also learn about installing and managing web browsers, using extensions and plug-ins, and keeping them secure and updated. 

Next you will learn about basic programming concepts, coding logic, and the different programming languages like Python. You’ll move on to data and database fundamentals and learn how to use, interface with, access and backup databases. 

After completing this course, you'll have a better grasp of software processes and feel more confident about using and securing applications. From mobile phone operating systems to workplace database applications, this course covers a wide range of software. Discover the benefits of cloud-based technologies and see how using the cloud can help businesses create and deploy applications faster.  

To solidify your understanding and put your skills to the test, the course includes numerous hands-on labs. It ends with a final project where you’ll showcase your newfound expertise and demonstrate your understanding of software, programming, and databases.  

Enroll now to take the next step in developing expertise in IT Fundamentals.",https://www.coursera.org/learn/introduction-software-programming-and-databases,Coursera
321,"Divide and Conquer, Sorting and Searching, and Randomized Algorithms","The primary topics in this part of the specialization are: asymptotic (""Big-oh"") notation, sorting and searching, divide and conquer (master method, integer and matrix multiplication, closest pair), and randomized algorithms (QuickSort, contraction algorithm for min cuts).",https://www.coursera.org/learn/algorithms-divide-conquer,Coursera
322,Discrete Optimization,"Tired of solving Sudokus by hand? This class teaches you how to solve complex search problems with discrete optimization concepts and algorithms, including constraint programming, local search, and mixed-integer programming. Optimization technology is ubiquitous in our society. It schedules planes and their crews, coordinates the production of steel, and organizes the transportation of iron ore from the mines to the ports. Optimization clears the day-ahead and real-time markets to deliver electricity to millions of people. It organizes kidney exchanges and cancer treatments and helps scientists understand the fundamental fabric of life, control complex chemical reactions, and design drugs that may benefit billions of individuals.

This class is an introduction to discrete optimization and exposes students to some of the most fundamental concepts and algorithms in the field. It covers constraint programming, local search, and mixed-integer programming from their foundations to their applications for complex practical problems in areas such as scheduling, vehicle routing, supply-chain optimization, and resource allocation.",https://www.coursera.org/learn/discrete-optimization,Coursera
323,"C++ For C Programmers, Part A",This course is for experienced C programmers who want to program in C++. The examples and exercises require a basic understanding of algorithms and object-oriented software.,https://www.coursera.org/learn/c-plus-plus-a,Coursera
324,Cyber Security Fundamentals,"This course is intended to provide a general introduction to key concepts in cyber security. It is aimed at anyone with a good general knowledge of information and communications technology. The nature, scope and importance of cyber security are explained, and key concepts are justified and explored. This includes examining the types of threat that cyber security must address, as well as the range of mechanisms, both technological and procedural, that can be deployed. The role of cryptography in providing security is explored, including how algorithms and keys play their part in enabling cyber security. The key supporting function played by key management is identified, including why the use of cryptographic functions depends on it.

The need for security management in an organisation is explained, and its main elements are introduced - including the key role played by risk management. The importance of standardised approaches to security management is explained, as is the notion of compliance.",https://www.coursera.org/learn/cyber-security-fundamentals,Coursera
325,Problem Solving Using Computational Thinking,"Have you ever heard that computers ""think""? Believe it or not, computers really do not think. Instead, they do exactly what we tell them to do. Programming is, ""telling the computer what to do and how to do it."" Before you can think about programming a computer, you need to work out exactly what it is you want to tell the computer to do. Thinking through problems this way is Computational Thinking. Computational Thinking allows us to take complex problems, understand what the problem is, and develop solutions. We can present these solutions in a way that both computers and people can understand.

The course includes an introduction to computational thinking and a broad definition of each concept, a series of real-world cases that illustrate how computational thinking can be used to solve complex problems, and a student project that asks you to apply what they are learning about Computational Thinking in a real-world situation. This project will be completed in stages (and milestones) and will also include a final disaster response plan you'll share with other learners like you.

This course is designed for anyone who is just beginning programming, is thinking about programming or simply wants to understand a new way of thinking about problems critically. No prior programming is needed. The examples in this course may feel particularly relevant to a High School audience and were designed to be understandable by anyone.

You will learn:
-To define Computational Thinking components including abstraction, problem identification, decomposition, pattern recognition, algorithms, and evaluating solutions
-To recognize Computational Thinking concepts in practice through a series of real-world case examples
-To develop solutions through the application of Computational Thinking concepts to real world problems",https://www.coursera.org/learn/compthinking,Coursera
326,Operations Research (2): Optimization Algorithms,"Operations Research (OR) is a field in which people use mathematical and engineering methods to study optimization problems in Business and Management, Economics, Computer Science, Civil Engineering, Electrical Engineering, etc. The series of courses consists of three parts, we focus on deterministic optimization techniques, which is a major part of the field of OR.
As the second part of the series, we study some efficient algorithms for solving linear programs, integer programs, and nonlinear programs.
We also introduce the basic computer implementation of solving different programs, integer programs, and nonlinear programs and thus an example of algorithm application will be discussed.",https://www.coursera.org/learn/operations-research-algorithms,Coursera
327,Introduction to Computers and Office Productivity Software,"In this course, you will learn the following essential computer skills for the digital age: Major hardware components of a computer system
Different types of software on a computer system
Photo Editing using GIMP
Word processing applications, including MS Word, MS Excel, and MS PowerPoint",https://www.coursera.org/learn/introduction-to-computers-and-office-productivity-software,Coursera
328,Python Basics,"This course introduces the basics of Python 3, including conditional execution and iteration as control structures, and strings and lists as data structures. You'll program an on-screen Turtle to draw pretty pictures. You'll also learn to draw reference diagrams as a way to reason about program executions, which will help to build up your debugging skills. The course has no prerequisites. It will cover Chapters 1-9 of the textbook ""Fundamentals of Python Programming,"" which is the accompanying text (optional and free) for this course. The course is for you if you're a newcomer to Python programming, if you need a refresher on Python basics, or if you may have had some exposure to Python programming but want a more in-depth exposition and vocabulary for describing and reasoning about programs.

This is the first of five courses in the Python 3 Programming Specialization.",https://www.coursera.org/learn/python-basics,Coursera
329,Building AI Powered Chatbots Without Programming,"This course will teach you how to create useful chatbots without the need to write any code. Leveraging IBM Watson's Natural Language Processing capabilities, you'll learn how to plan, implement, test, and deploy chatbots that delight your users, rather than frustrate them.

True to our promise of not requiring any code, you'll learn how to visually create chatbots with Watson Assistant (formerly Watson Conversation) and how to deploy them on your own website through a handy WordPress plugin. Don't have a website? No worries, one will be provided to you.

Chatbots are a hot topic in our industry and are about to go big. New jobs requiring this specific skill are being added every day, consultants demand premium rates, and the interest in chatbots is quickly exploding.

Gartner predicts that by 2020, 85% of customer interactions with the enterprise will be through automated means (that's chatbots and related technologies).

Here is your chance to learn this highly in demand set of skills with a gentle introduction to the topic that leaves no stone unturned.",https://www.coursera.org/learn/building-ai-powered-chatbots,Coursera
330,Application Development using Microservices and Serverless ,"Welcome to this introductory course on microservices and serverless, essential technologies for cloud native and application modernization workloads.  Rather than building large applications, known as monoliths, that perform all the functionality, microservices break down larger applications into smaller pieces that are independently maintainable and scalable, providing a host of benefits. This architecture is now used in the largest software organizations in the world, because it provides cost benefits, team autonomy, and other advantages. 

Likewise, serverless has emerged as an increasingly popular compute option in the cloud era. Giving developers and operators the ability to run applications without managing underlying infrastructure.  

In this course, you will create microservices using various methodologies. You will create REST APIs using Python and Flask. Next, you will learn the basics of Serverless applications, and how to run your applications on the IBM Cloud Code Engine.  

The course contains several hands-on labs which allow you to practice and apply the content you learn in the course. 

In the final project, you will create a front-end application composed of several microservices and deploy them on the Cloud using serverless.",https://www.coursera.org/learn/applications-development-microservices-serverless-openshift,Coursera
331,Connect and Protect: Networks and Network Security,"This is the third course in the Google Cybersecurity Certificate. These courses will equip you with the skills you need to apply for an entry-level cybersecurity job. You’ll build on your understanding of the topics that were introduced in the second Google Cybersecurity Certificate course. In this course, you will explore how networks connect multiple devices and allow them to communicate. You'll start with the fundamentals of modern networking operations and protocols. For example, you'll learn about the Transmission Control Protocol / Internet Protocol (TCP/IP) model and how network hardware, like routers and modems, allow your computer to send and receive information on the internet. Then, you'll learn about network security. Organizations often store and send valuable information on their networks, so networks are common targets of cyber attacks. By the end of this course, you'll be able to recognize network-level vulnerabilities, and explain how to secure a network using firewalls, system hardening, and virtual private networks. 

Google employees who currently work in cybersecurity will guide you through videos, provide hands-on activities and examples that simulate common cybersecurity tasks, and help you build your skills to prepare for jobs. 

Learners who complete this certificate will be equipped to apply for entry-level cybersecurity roles. No previous experience is necessary.

By the end of this course, you will: 
- Describe the structure of different computer networks.
- Illustrate how data is sent and received over a network.
- Recognize common network protocols.
- Identify common network security measures and protocols.
- Explain how to secure a network against intrusion tactics.
- Compare and contrast local networks to cloud computing.
- Explain the different types of system hardening techniques.",https://www.coursera.org/learn/networks-and-network-security,Coursera
332,Introduction to Technical Writing,"Technical Writing seamlessly blends the art of communication with the nuances of technology. Tailored for a diverse audience, including writers, communicators, engineers, and IT professionals, this course serves as a beacon, guiding participants toward the creation of effective technical documents tailored to specialized audiences. Starting with the fundamentals of technical writing, participants will delve into its history, discern its unique features, and grasp the core elements. This segment emphasizes audience-centric content, the journey from planning to publishing, and the importance of continuous feedback.

Transitioning to design principles and tools, the course sharpens participants' skills in document aesthetics from typography to layouts. They'll also explore essential modern tools, including advanced word processors and collaboration platforms like GitHub.

The next phase introduces a range of technical documents, from user manuals to API documentation, emphasizing the ethical responsibilities of writers. It underscores creating accessible, globally resonant content with cultural sensitivity and localization insights.

Concluding with advanced topics and career advancement, participants will tackle complex documentation challenges, embrace multimedia elements, and explore writing for platforms like VR and AR. This segment also preps participants to build a strong technical writing portfolio and foster professional networks.

By the course's end, participants will emerge as proficient technical writers, skilled in varied writing forms, contemporary tools, and ethical documentation, ready to showcase their expertise and embark on a rewarding career journey.

This is a beginner to advance level of course, intended for learners with a background in Computer Science and Technology and professionals looking to upgrade their skills in Technical Writing.",https://www.coursera.org/learn/technical-writing-introduction,Coursera
333,Object-Oriented Design,"This course takes Java beginners to the next level by covering object-oriented analysis and design. You will discover how to create modular, flexible, and reusable software, by applying object-oriented design principles and guidelines. And, you will be able to communicate these designs in a visual notation known as Unified Modelling Language (UML). You will be challenged in the Capstone Project to apply your knowledge of object-oriented design by evolving and documenting the Java codebase for an Android application with corresponding UML documentation.

After completing this course, you will be able to: 
• Apply the Class Responsibility Collaborator (CRC) technique to analyze and design the object-oriented model for a problem. 
• Explain and apply object-oriented modeling principles and their purpose (e.g., abstraction, encapsulation, decomposition, generalization).
• Explain and apply different types of inheritance
• Explain the difference between association, aggregation, and composition dependencies.
• Express object-oriented models as Unified Modeling Language (UML) class diagrams.
• Translate between UML class diagrams and equivalent Java code.
• Apply design guidelines for modularity, separation of concerns, information hiding, and conceptual integrity to create a flexible, reusable, maintainable design.
• Explain the tradeoff between cohesion and coupling.",https://www.coursera.org/learn/object-oriented-design,Coursera
334,Programming with Scratch,"Learning coding is not only about understanding the programming language being used, but also developing important computational thinking skills, which are useful for problem solving across many disciplinary areas. In this course, students will learn basic programming skills by creating interactive storybooks, animations, and games with Scratch, which is a block-based visual programming language for anyone new to coding.",https://www.coursera.org/learn/programming-with-scratch,Coursera
335,.Net Full Stack Foundation,"Embark on a deep dive into the dynamic universe of .Net Full Stack Development with this comprehensive course. This course is meticulously crafted for those venturing into the .Net domain, ensuring a solid foundational grasp. In the first module, Introduction to ASP.NET, dive into .Net development, acquainting yourself with the essence of ASP.NET, the .NET framework, and its synergy with the C# language. Experience first-hand the crafting of dynamic web applications and basic programming techniques using .Net tools.

Progressing to the second module, C# Programming Fundamentals, delve into C# essentials. This module introduces core elements like syntax, variables, and control structures, bolstered by hands-on assignments designed to enhance your programming skill set.

Finally, in the third module, Advanced C# Programming, explore deeper facets of C#. From LINQ, delegates, and events to intricate OOP principles, this module ensures you grasp advanced concepts and master key techniques for robust exception handling.

By the end of this course, you'll possess a profound mastery over .Net Full Stack Development, poised to craft efficient .Net applications and primed to explore even more advanced .Net technologies.",https://www.coursera.org/learn/dot-net-full-stack-foundation,Coursera
336,Introduction to Programming with MATLAB,"This course teaches computer programming to those with little to no previous experience. It uses the programming system and language called MATLAB to do so because it is easy to learn, versatile and very useful for engineers and other professionals. MATLAB is a special-purpose language that is an excellent choice for writing moderate-size programs that solve problems involving the manipulation of numbers. The design of the language makes it possible to write a powerful program in a few lines. The problems may be relatively complex, while the MATLAB programs that solve them are relatively simple: relative, that is, to the equivalent program written in a general-purpose language, such as C++ or Java. As a result, MATLAB is being used in a wide variety of domains from the natural sciences, through all disciplines of engineering, to finance, and beyond, and it is heavily used in industry. Hence, a solid background in MATLAB is an indispensable skill in today’s job market. Nevertheless, this course is not a MATLAB tutorial. It is an introductory programming course that uses MATLAB to illustrate general concepts in computer science and programming. Students who successfully complete this course will become familiar with general concepts in computer science, gain an understanding of the general concepts of programming, and obtain a solid foundation in the use of MATLAB.

Students taking the course will get a MATLAB Online license free of charge for the duration of the course. The students are encouraged to consult the eBook that this course is based on. More information about these resources can be found on the Resources menu on the right.",https://www.coursera.org/learn/matlab,Coursera
337,Generative AI with Large Language Models,"In Generative AI with Large Language Models (LLMs), you’ll learn the fundamentals of how generative AI works, and how to deploy it in real-world applications. By taking this course, you'll learn to:
- Deeply understand generative AI, describing the key steps in a typical LLM-based generative AI lifecycle, from data gathering and model selection, to performance evaluation and deployment
- Describe in detail the transformer architecture that powers LLMs, how they’re trained, and how fine-tuning enables LLMs to be adapted to a variety of specific use cases
- Use empirical scaling laws to optimize the model's objective function across dataset size, compute budget, and inference requirements
- Apply state-of-the art training, tuning, inference, tools, and deployment methods to maximize the performance of models within the specific constraints of your project 
- Discuss the challenges and opportunities that generative AI creates for businesses after hearing stories from industry researchers and practitioners

Developers who have a good foundational understanding of how LLMs work, as well the best practices behind training and deploying them, will be able to make good decisions for their companies and more quickly build working prototypes. This course will support learners in building practical intuition about how to best utilize this exciting new technology.

This is an intermediate course, so you should have some experience coding in Python to get the most out of it. You should also be familiar with the basics of machine learning, such as supervised and unsupervised learning, loss functions, and splitting data into training, validation, and test sets. If you have taken the Machine Learning Specialization or Deep Learning Specialization from DeepLearning.AI, you’ll be ready to take this course and dive deeper into the fundamentals of generative AI.",https://www.coursera.org/learn/generative-ai-with-llms,Coursera
338,Foundations of User Experience (UX) Design,"Foundations of User Experience (UX) Design is the first of a series of seven courses that will equip you with the skills needed to apply to entry-level jobs in user experience design. UX designers focus on the interactions that people have with products like websites, mobile apps, and physical objects. UX designers make those everyday interactions usable, enjoyable, and accessible. The role of an entry-level UX designer might include empathizing with users, defining their pain points, coming up with ideas for design solutions, creating wireframes, prototypes, and mockups, and testing designs to get feedback.  Current UX designers and researchers at Google will serve as your instructors, and you will complete hands-on activities that simulate real-world UX design scenarios.

Learners who complete the seven courses in this certificate program should be equipped to apply for entry-level jobs as UX designers. No previous experience is necessary.

By the end of this course, you will be able to: 
   - Define the field of UX and explain why it’s important for consumers and businesses.
   - Understand foundational concepts in UX design, such as user-centered design, the design thinking framework, accessibility, and equity-focused design. 
   - Identify the factors that contribute to great user experience design.
   - Review common job responsibilities of entry-level UX designers and teams that they work with.
   - Explore job opportunities and career paths within the field of user experience.  
   - Explain why design sprints are an important and useful part of a UX designer’s work.
  - Describe common UX research methods. 
   - Identify and account for biases in UX research.",https://www.coursera.org/learn/foundations-user-experience-design,Coursera
339,Play It Safe: Manage Security Risks,"This is the second course in the Google Cybersecurity Certificate. These courses will equip you with the skills you need to apply for an entry-level cybersecurity job. You’ll build on your understanding of the topics that were introduced in the first Google Cybersecurity Certificate course. In this course, you will take a deeper dive into concepts introduced in the first course, with an emphasis on how cybersecurity professionals use frameworks and controls to protect business operations. In particular, you'll identify the steps of risk management and explore common threats, risks, and vulnerabilities. Additionally, you'll explore Security Information and Event Management (SIEM) data and use a playbook to respond to identified threats, risks, and vulnerabilities. Finally, you will take an important step towards becoming a cybersecurity professional and practice performing a security audit.

Google employees who currently work in cybersecurity will guide you through videos, provide hands-on activities and examples that simulate common cybersecurity tasks, and help you build your skills to prepare for jobs. 

Learners who complete this certificate will be equipped to apply for entry-level cybersecurity roles. No previous experience is necessary.

By the end of this course, you will: 
- Identify the common threats, risks, and vulnerabilities to business operations.
- Understand the threats, risks, and vulnerabilities that entry-level cybersecurity analysts are most focused on.
- Comprehend the purpose of security frameworks and controls.
- Describe the confidentiality, integrity, and availability (CIA) triad.
- Explain the National Institute of Standards and Technology (NIST) framework.
- Explore and practice conducting a security audit.
- Use a playbook to respond to threats, risks, and vulnerabilities.",https://www.coursera.org/learn/manage-security-risks,Coursera
340,"Start the UX Design Process: Empathize, Define, and Ideate","Start the UX Design Process: Empathize, Define, Ideate is the second course in a certificate program that will equip you with the skills needed to apply to entry-level jobs in user experience (UX) design. In this course, you’ll complete the first phases of the design process for a project that you’ll be able to include in your portfolio. You will learn how to empathize with users and understand their pain points, define user needs using problem statements, and come up with lots of ideas for solutions to those user problems.  Current UX designers and researchers at Google will serve as your instructors, and you will complete hands-on activities that simulate real-world UX design scenarios.

Learners who complete the seven courses in this certificate program should be equipped to apply for entry-level jobs as UX designers. No previous experience is necessary.

By the end of this course, you will be able to:
   - Empathize with users to understand their needs and pain points.
   - Create empathy maps, personas, user stories, and user journey maps to understand user needs.
   - Develop problem statements to define user needs. 
   - Generate ideas for possible solutions to user problems. 
   - Conduct competitive audits.
   - Start designing a mobile app, a new project to include in your professional UX portfolio.",https://www.coursera.org/learn/start-ux-design-process,Coursera
341,Tools of the Trade: Linux and SQL,"This is the fourth course in the Google Cybersecurity Certificate. These courses will equip you with the skills you need to apply for an entry-level cybersecurity job. You’ll build on your understanding of the topics that were introduced in the third Google Cybersecurity Certificate course. In this course, you will explore computing skills that you’ll use on-the-job as a cybersecurity analyst. First, you'll practice using Linux, an operating system commonly used by cybersecurity professionals. For example, you'll use the Linux command line through the Bash shell to navigate and manage the file system and authenticate users. Then, you'll use SQL to communicate with a database. 

Google employees who currently work in cybersecurity will guide you through videos, provide hands-on activities and examples that simulate common cybersecurity tasks, and help you build your skills to prepare for jobs. 

Learners who complete this certificate will be equipped to apply for entry-level cybersecurity roles. No previous experience is necessary.

By the end of this course, you will: 
- Explain the relationship between operating systems, applications, and hardware.
- Compare a graphical user interface to a command line interface.
- Identify the unique features of common Linux distributions.
- Navigate and manage the file system using Linux commands via the Bash shell.
- Use Linux commands via the Bash shell to authenticate and authorize users.
- Describe how a relational database is organized.
- Use SQL to retrieve information from a database.
- Apply filters to SQL queries and use joins to combine multiple tables.",https://www.coursera.org/learn/linux-and-sql,Coursera
342,Linear Algebra for Machine Learning and Data Science,"Newly updated for 2024!  After completing this course, learners will be able to:

• Represent data as vectors and matrices and identify their properties using concepts of singularity, rank, and linear independence, etc.
• Apply common vector and matrix algebra operations like dot product, inverse, and determinants 
• Express certain types of matrix operations as linear transformations 
• Apply concepts of eigenvalues and eigenvectors to machine learning problems

Mathematics for Machine Learning and Data science is a foundational online program created in by DeepLearning.AI and taught by Luis Serrano. This beginner-friendly program is where you’ll master the fundamental mathematics toolkit of machine learning.

Many machine learning engineers and data scientists need help with mathematics, and even experienced practitioners can feel held back by a lack of math skills. This Specialization uses innovative pedagogy in mathematics to help you learn quickly and intuitively, with courses that use easy-to-follow plugins and visualizations to help you see how the math behind machine learning actually works. 

Upon completion, you’ll understand the mathematics behind all the most common algorithms and data analysis techniques — plus the know-how to incorporate them into your machine learning career.

This is a beginner-friendly program, with a recommended background of at least high school mathematics (functions, basic algebra). We also recommend a basic familiarity with Python (loops, functions, if/else statements, lists/dictionaries, importing libraries), as labs use Python and Jupyter Notebooks to demonstrate learning objectives in the environment where they’re most applicable to machine learning and data science. If you are already familiar with the concepts of linear algebra, Course 1 will provide a good review, or you can choose to take Course 2: Calculus for Machine Learning and Data Science and Course 3: Probability and Statistics for Machine Learning and Data Science, of this specialization.",https://www.coursera.org/learn/machine-learning-linear-algebra,Coursera
343,Build Wireframes and Low-Fidelity Prototypes,"Build Wireframes and Low-Fidelity Prototypes is the third course in a certificate program that will equip you with the skills you need to apply to entry-level jobs in user experience (UX) design. In this course, you’ll continue to design a mobile app for your professional UX portfolio. You’ll start by creating storyboards and getting familiar with the basics of drawing. Then, you'll create paper wireframes and digital wireframes using the design tool Figma. You’ll also create a paper prototype and a digital low-fidelity prototype in Figma.  Current UX designers and researchers at Google will serve as your instructors, and you will complete hands-on activities that simulate real-world UX design scenarios. Learners who complete the seven courses in this certificate program should be equipped to apply for entry-level jobs as UX designers.

By the end of this course, you will be able to:
   - Develop a goal statement. 
   - Create two types of storyboards: big picture and close-up. 
   - Understand the difference between low-fidelity and high-fidelity design. 
   - Apply the basics of drawing. 
   - Apply the principles of information architecture to organize a mobile app. 
   - Create paper wireframes for a mobile app design. 
   - Develop digital wireframes in the design tool Figma. 
   - Build a paper prototype to add interactivity to designs. 
   - Design a low-fidelity prototype in Figma. 
   - Recognize implicit bias and deceptive patterns in design. 
   - Continue to design a mobile app to include in your professional portfolio. 

To be successful in this course, you should complete the previous two courses in this certificate program, or have an ability to conduct user research to inform the creation of empathy maps, personas, user stories, user journey maps, problem statements, and value propositions. You will also need paper and a pen or pencil.",https://www.coursera.org/learn/wireframes-low-fidelity-prototypes,Coursera
344,Automate Cybersecurity Tasks with Python,"This is the seventh course in the Google Cybersecurity Certificate. These courses will equip you with the skills you need to apply for an entry-level cybersecurity job. You’ll build on your understanding of the topics that were introduced in the sixth Google Cybersecurity Certificate course. In this course, you will be introduced to the Python programming language and apply it in a cybersecurity setting to automate tasks. You'll start by focusing on foundational Python programming concepts, including data types, variables, conditional statements, and iterative statements. You'll also learn to work with Python effectively by developing functions, using libraries and modules, and making your code readable. In addition, you'll work with string and list data, and learn how to import, parse and debug files.  

Google employees who currently work in cybersecurity will guide you through videos, provide hands-on activities and examples that simulate common cybersecurity tasks, and help you build your skills to prepare for jobs. 

Learners who complete this certificate will be equipped to apply for entry-level cybersecurity roles. No previous experience is necessary.

By the end of this course, you will: 
- Explain how the Python programming language is used in cybersecurity.
- Write conditional and iterative statements in Python.
- Create new, user-defined Python functions.
- Use Python to work with strings and lists.
- Use regular expressions to extract information from text.
- Use Python to open and read the contents of a file.
- Identify best practices to improve code readability.
- Practice debugging code.",https://www.coursera.org/learn/automate-cybersecurity-tasks-with-python,Coursera
345,Introduction to Front-End Development,"Welcome to Introduction to Front-End Development, the first course in the Meta Front-End Developer program.   This course is a good place to start if you want to become a web developer. You will learn about the day-to-day responsibilities of a web developer and get a general understanding of the core and underlying technologies that power the internet. You will learn how front-end developers create websites and applications that work well and are easy to maintain. 

You’ll be introduced to the core web development technologies like HTML and CSS and get opportunities to practice using them. You will also be introduced to modern UI frameworks such as Bootstrap and React that make it easy to create interactive user experiences. 

By the end of the course, you will be able to: 
- Describe the front-end developer role 
- Explain the core and underlying technologies that power the internet 
- Use HTML to create a simple webpage 
- Use CSS to control the appearance of a simple webpage 
- Explain what React is 
- Describe the applications and characteristics of the most popular UI frameworks 

For the final project in this course, you will create and edit a webpage using HTML and the Bootstrap CSS framework. Using a responsive layout grid, you will construct a responsive webpage containing text and images that looks great on any size screen. 

This is a beginner course intended for learners eager to learn the fundamentals of web development. To succeed in this course, you do not need prior web development experience, only basic internet navigation skills and an eagerness to get started with coding.",https://www.coursera.org/learn/introduction-to-front-end-development,Coursera
346,Create High-Fidelity Designs and Prototypes in Figma,"Create High-Fidelity Designs and Prototypes in Figma is the fifth course in a certificate program that will equip you with the skills you need to apply to entry-level jobs in user experience (UX) design. In this course, you will follow step-by-step tutorials to learn how to create high-fidelity designs, called mockups, in Figma, a popular design tool. Then, you’ll turn those designs into an interactive prototype that works like a finished product. You’ll conduct research to collect feedback about your designs and make improvements. Finally, you’ll learn how to share your designs with development teams and highlight your work in your professional UX portfolio. Current UX designers and researchers at Google will serve as your instructors, and you will complete hands-on activities that simulate real-world UX design scenarios. Learners who complete the seven courses in this certificate program should be equipped to apply for entry-level jobs as UX designers. 

By the end of this course, you will be able to:
   - Build mockups and high-fidelity prototypes in Figma.
   - Define and apply common visual design elements and principles.
   - Demonstrate how design systems can be used to organize, standardize, and enhance designs.
   - Understand the role of design critique sessions and feedback while iterating on designs. 
   - Learn how to hand off finished design projects to engineering teams. 
   - Complete mobile app designs to include in a professional UX portfolio. 

This course is suitable for beginner-level UX designers who have completed the previous four courses of the Google UX Design Certificate. Alternatively, learners who have not completed the previous courses should have a strong understanding of the design process, how to create low-fidelity designs on paper and in Figma, and how to conduct usability studies.",https://www.coursera.org/learn/high-fidelity-designs-prototype,Coursera
347,"Introduction to TensorFlow for Artificial Intelligence, Machine Learning, and Deep Learning","If you are a software developer who wants to build scalable AI-powered algorithms, you need to understand how to use the tools to build them. This course is part of the upcoming Machine Learning in Tensorflow Specialization and will teach you best practices for using TensorFlow, a popular open-source framework for machine learning.  The Machine Learning course and Deep Learning Specialization from Andrew Ng teach the most important and foundational principles of Machine Learning and Deep Learning. This new deeplearning.ai TensorFlow Specialization teaches you how to use TensorFlow to implement those principles so that you can start building and applying scalable models to real-world problems. To develop a deeper understanding of how neural networks work, we recommend that you take the Deep Learning Specialization.",https://www.coursera.org/learn/introduction-tensorflow,Coursera
348,Build Dynamic User Interfaces (UI) for Websites,"Build Dynamic User Interfaces (UI) for Websites is the sixth course in a program that will equip you with the skills you need to apply to entry-level jobs in user experience (UX) design. In this course, you will plan a design for a website, create wireframes and prototypes, and test your designs to get feedback. Additionally, you will learn about engaging in design critique sessions and how to give and receive feedback. By the end of this course, you will have a new design project to include in your professional UX portfolio. In addition, you’ll learn how to search for entry-level UX design jobs, create a resume that highlights your skills and accomplishments, and build your professional portfolio website.  Current UX designers and researchers at Google will serve as your instructors, and you will complete hands-on activities that simulate real-world UX design scenarios. Learners who complete the seven courses in this certificate program should be equipped to apply for entry-level jobs as UX designers.

By the end of this course, you will be able to:
   - Apply each step of the UX design thinking framework (empathize, define, ideate, prototype, test) to create a responsive website.
   - Plan information architecture and create sitemaps for website designs. 
   - Apply common layouts for web pages. 
   - Plan and conduct a usability study to gather feedback about designs. 
   - Iterate on designs based on research insights. 
   - Work with design systems.
   - Add a new design project to your professional UX portfolio. 
   - [Optional] Create or update a UX-focused resume. 
   - [Optional] Learn how to search for and apply to introductory-level jobs in the field of UX.

This course is suitable for beginner-level UX designers who have completed the previous five courses of the Google UX Design Certificate. Alternatively, learners need to have a strong foundational understanding of the design process; experience creating wireframes, mockups, and prototypes; and the ability to conduct usability studies. No previous experience with Figma is required.",https://www.coursera.org/learn/responsive-web-design-adobe-xd,Coursera
349,Build a Modern Computer from First Principles: From Nand to Tetris (Project-Centered Course),"What you’ll achieve: In this project-centered course* you will build a modern computer system, from the ground up. We’ll divide this fascinating journey into six hands-on projects that will take you from constructing elementary logic gates all the way through creating a fully functioning general purpose computer. In the process, you will learn - in the most direct and constructive way - how computers work, and how they are designed.

What you’ll need:
This is a self-contained course: all the knowledge necessary to succeed in the course and build the computer system will be given as part of the learning experience. Therefore, we assume no previous computer science or engineering knowledge, and all learners are welcome aboard. You will need no physical materials, since you will build the computer on your own PC, using a software-based hardware simulator, just like real computers are designed by computer engineers in the field. The hardware simulator, as well as other software tools, will be supplied freely after you enroll in the course.

Course format:
The course consists of six modules, each comprising a series of video lectures, and a project. You will need about 2-3 hours to watch each module's lectures, and about 5-10 hours to complete each one of the six projects. The course can be completed in six weeks, but you are welcome to take it at your own pace. You can watch a TED talk about this course by Googling ""nand2tetris TED talk"".

*About Project-Centered Courses: Project-centered courses are designed to help you complete a personally meaningful real-world project, with your instructor and a community of learners with similar goals providing guidance and suggestions along the way. By actively applying new concepts as you learn, you’ll master the course content more efficiently; you’ll also get a head start on using the skills you gain to make positive changes in your life and career. When you complete the course, you’ll have a finished project that you’ll be proud to use and share.",https://www.coursera.org/learn/build-a-computer,Coursera
350,Probability & Statistics for Machine Learning & Data Science,"Mathematics for Machine Learning and Data science is a foundational online program created by DeepLearning.AI and taught by Luis Serrano. This beginner-friendly program is where you’ll master the fundamental mathematics toolkit of machine learning. After completing this course, learners will be able to:

•  Describe and quantify the uncertainty inherent in predictions made by machine learning models, using the concepts of probability, random variables, and probability distributions.
•  Visually and intuitively understand the properties of commonly used probability distributions in machine learning and data science like Bernoulli, Binomial, and Gaussian distributions
•  Apply common statistical methods like maximum likelihood estimation (MLE) and maximum a priori estimation (MAP) to machine learning problems
•  Assess the performance of machine learning models using interval estimates and margin of errors 
•  Apply concepts of statistical hypothesis testing to commonly used tests in data science like AB testing
•  Perform Exploratory Data Analysis on a dataset to find, validate, and quantify patterns.

Many machine learning engineers and data scientists struggle with mathematics. Challenging interview questions often hold people back from leveling up in their careers, and even experienced practitioners can feel held by a lack of math skills. 

This specialization uses innovative pedagogy in mathematics to help you learn quickly and intuitively, with courses that use easy-to-follow plugins and visualizations to help you see how the math behind machine learning actually works. Upon completion, you’ll understand the mathematics behind all the most common algorithms and data analysis techniques — plus the know-how to incorporate them into your machine learning career.",https://www.coursera.org/learn/machine-learning-probability-and-statistics,Coursera
351,Design a User Experience for Social Good & Prepare for Jobs,"Design a User Experience for Social Good and Prepare for Jobs is the seventh and final course in a program that will equip you with the skills you need to become an entry-level UX designer. In this course, you will design a dedicated mobile app and a responsive website focused on social good. You will showcase all that you’ve learned during the certificate program to complete the design process from beginning to end: empathizing with users, defining their pain points, coming up with ideas for design solutions, creating wireframes and prototypes, and testing designs to get feedback. By the end of this course, you will have a new cross-platform design project to include in your professional UX portfolio.  This course will also prepare you to land your first job as a UX designer. You’ll learn how to interview for entry-level UX design positions. You’ll get tips from Googlers based on their own interview experiences and their unique perspectives as hiring managers. And, you’ll polish the professional UX portfolio you’ve been building throughout the program so that it’s ready for job applications. 

Current UX designers and researchers at Google will serve as your instructors, and you will complete hands-on activities that simulate real-world UX design scenarios. Learners who complete the seven courses in this certificate program should be equipped to apply for entry-level jobs as UX designers. 

By the end of this course, you will be able to:
   - Apply each step of the UX design process (empathize, define, ideate, prototype, test) to create designs focused on social good.
   - Identify the differences between dedicated mobile apps and responsive web apps.
   - Understand progressive enhancement and graceful degradation approaches for designing across devices. 
   - Build wireframes, mockups, and low-fidelity and high-fidelity prototypes. 
   - Add a new design project to your professional UX portfolio. 
   - Create your portfolio of design work for job applications. 
   - Join and participate in online UX communities.
   - Interview for an entry-level UX design job. 
   - Determine if freelance design work is a good career fit for you.

This course is suitable for beginner-level UX designers who have completed the previous six courses of the Google UX Design Certificate.",https://www.coursera.org/learn/ux-design-jobs,Coursera
352,Gamification,"Gamification is the application of game elements and digital game design techniques to non-game problems, such as business and social impact challenges. This course will teach you the mechanisms of gamification, why it has such tremendous potential, and how to use it effectively. For additional information on the concepts described in the course, you can purchase Professor Werbach's book For the Win: How Game Thinking Can Revolutionize Your Business in print or ebook format in several languages.",https://www.coursera.org/learn/gamification,Coursera
353,Version Control,"Learn how modern software developers collaborate across the world without messing up each other's code. You will look at the different version control systems and how to create an effective software development workflow. You will be introduced to some of the most commonly used Linux commands that you can use to work with files on your hard drive and create powerful workflows that will automate your work, saving you time and effort.  Finally, you will see how Git can be used in software development projects to manage team files. And you will create a repository that can manage code revisions.",https://www.coursera.org/learn/introduction-to-version-control,Coursera
354,Object-Oriented Data Structures in C++,"This course teaches learners how to write a program in the C++ language, including how to set up a development environment for writing and debugging C++ code and how to implement data structures as C++ classes. It is the first course in the Accelerated CS Fundamentals specialization, and subsequent courses in this specialization will be using C++ as the language for implementing the data structures covered in class.",https://www.coursera.org/learn/cs-fundamentals-1,Coursera
355,Introduction to DevOps,"Get started with your DevOps journey with this beginner-friendly course! DevOps skills are high in demand and expected to be one of the fastest-growing skills in the software industry. This course is designed to be a first step in obtaining those valuable skills.   This self-paced introductory course explores DevOps as a cultural movement. It describes the business case for DevOps, and covers its essentials. This course teaches new ways of thinking, working, organizing, and measuring to fully realize the benefits of DevOps. By applying DevOps practices, you will be able to build better products for your users.  

You will learn how breaking down silos and organizing developers and operators into single cross-functional teams is necessary for truly adopting DevOps. Having everyone contributing and everyone being responsible for success is at the heart of DevOps. You will see how building a culture of shared responsibility and transparency is the foundation of every high-performing DevOps teams. 

You’ll learn how you can use cloud native architecture to build resilience in your products and learn about helpful DevOps tools like horizontal scaling and independently deployable microservices. You will explore how Agile Methodologies like Scrum are crucial to DevOps as well as learn about Continuous Integration and Continuous Delivery (CI/CD), which enables frequent deployments and working as a team to create high-quality code. 

This course concludes with case studies about DevOps-based scenarios, which you will analyze and relate to DevOps concepts learnt throughout this course. 

This course is designed for those new to DevOps as well as those looking to increase their current knowledge of DevOps.",https://www.coursera.org/learn/intro-to-devops,Coursera
356,Using Python to Access Web Data,"This course will show how one can treat the Internet as a source of data.  We will scrape, parse, and read web data as well as access data using web APIs.  We will work with HTML, XML, and JSON data formats in Python.  This course will cover Chapters 11-13 of the textbook “Python for Everybody”. To succeed in this course, you should be familiar with the material covered in Chapters 1-10 of the textbook and the first two courses in this specialization.  These topics include variables and expressions, conditional execution (loops, branching, and try/except), functions, Python data structures (strings, lists, dictionaries, and tuples), and manipulating files.  This course covers Python 3.",https://www.coursera.org/learn/python-network-data,Coursera
357,Advanced React,"Learn how to use more advanced React concepts and features, become proficient in JSX, and confidently test your applications. You’ll examine different types of React components and learn various characteristics and when to use them. You’ll dig into more advanced hooks and create your own. You’ll look into building forms with React. You’ll explore component composition and new patterns, such as Higher Order Components and Render Props. You’ll create a web application that consumes API data and get familiar with the most commonly used React framework integrations, tools, and testing techniques.

By the end of this course, you will be able to:
• Render lists and form components efficiently in React.
• Lift shared state up when several components need the updated data.
• Leverage React Context to share global state for a tree of components.
• Fetch data from a remote server.
• Use advanced hooks in React, and put them to use within your application.
• Build your own custom hooks.
• Understand JSX in depth.
• Embrace component composition techniques
• Use advanced patterns to encapsulate common behavior via Higher Order Components and Render Props.
• Test your React components.
• Build a portfolio using React.

You’ll gain experience with the following tools and software: 
• React.js
• JSX
• React
• HTML, CSS, and JavaScript 
• VSCode

You will be able to leverage the potential of this course to develop new skills, improve productivity, act effectively with data and boost your career.

To take this course, you should understand the basics of React, HTML, CSS, and JavaScript. Additionally, it always helps to have a can-do attitude!",https://www.coursera.org/learn/advanced-react,Coursera
358,Algorithmic Toolbox,"This online course covers basic algorithmic techniques and ideas for computational problems arising frequently in practical applications: sorting and searching, divide and conquer, greedy algorithms, dynamic programming. We will learn a lot of theory: how to sort data and how it helps for searching; how to break a large problem into pieces and solve them recursively; when it makes sense to proceed greedily; how dynamic programming is used in genomic studies. You will practice solving computational problems, designing new algorithms, and implementing solutions efficiently (so that they run in less than a second).",https://www.coursera.org/learn/algorithmic-toolbox,Coursera
359,HTML and CSS in depth,"In this course, you’ll use software development tools like HTML to build attractive web pages that work well—and you’ll use structured semantic data to control how websites appear to the end user.  You will then dive deeper into CSS by applying increasingly specific styling to various elements. You’ll learn to use Bootstrap’s grid system to create layouts and work with components and themes. Finally, you’ll explore debugging and learn how it can be utilized to banish common front-end errors.

By the end of this course you will be able to:

• Create a simple form with a responsive layout using HTML5 and CSS
• Create a responsive layout using CSS 
• Create a UI using Bootstrap
• Implement debugging tools

This is a beginner course for learners who would like to prepare themselves for a career in front-end development. To succeed in this course, you do not need prior development experience, only basic internet navigation skills and an eagerness to get started with coding.",https://www.coursera.org/learn/html-and-css-in-depth,Coursera
360,Developing AI Applications with Python and Flask,"This mini course is intended to apply basic Python skills for developing Artificial Intelligence (AI) enabled applications. In this hands-on project you will assume the role of a developer and perform tasks including:   - Develop functions and application logic 
- Exchange data using Watson AI libraries
- Write unit tests, and 
- Package the application for distribution. 

You will demonstrate your foundational Python skills by employing different techniques to develop web applications and AI powered solutions. After completing this course, you will have added another project to your portfolio and gained the confidence to begin developing AI enabled applications using Python and Flask, Watson AI libraries, build and run unit tests, and package the application for distribution out in the real world.",https://www.coursera.org/learn/python-project-for-ai-application-development,Coursera
361,Django Web Framework ,"It's time to build something bigger. In this course, you will use the Django web framework to build, secure and administer a web server. You will have the opportunity to create, design and configure a web app using the Django framework in-line with best practices.  Explore the usage of models in Django and their relationship to databases. Use views to render requested data to meaningful template structures for a composed user interface (UI). Implement proactive security practices and mitigate common security risks.

By the end of the course you will be able to:

• Design a Django web application using Python, HTML and CSS.
• Describe and implement the HTTP request response cycle by creting views, routes and templates.
• Describe and build a data model to create database tabless and dynamic web forms.
• Explore the Django Template Language to create dyanamic webpages that display data stored in a database.
• Create, share and test your web application by using industry standard best practice and guidelines.  

To succeed in this course, you are required to have a fundamental knowledge of the following:
HTML and CSS
Python
MySQL

You also require basic internet navigation skills and an eagerness to get started with coding in Django!",https://www.coursera.org/learn/django-web-framework,Coursera
362,Building Scalable Java Microservices with Spring Boot and Spring Cloud,"""¨Microservices"""" describes a software design pattern in which an application is a collection of loosely coupled services. These services are fine-grained, and can be individually maintained and scaled. The microservices architecture is ideal for the public cloud, with its focus on elastic scaling with on-demand resources. In this course, you will learn how to build Java applications using Spring Boot and Spring Cloud on Google Cloud.  You'll use Spring Cloud Config to manage your application's configuration. You'll send and receive messages with Pub/Sub and Spring Integration. You'll also use Cloud SQL as a managed relational database for your Java applications, and learn how to migrate to Cloud Spanner, which is Google Cloud's globally-distributed strongly consistent database service. You'll also learn about tracing and debugging your Spring applications with Google Cloud's operations suite.

To succeed in this course, you should be familiar with the Java programming language and building Java applications with tools such as Maven or Gradle. You should also have general knowledge of Google Cloud.""

>>> By enrolling in this course you agree to the Qwiklabs Terms of Service as set out in the FAQ and located at: https://qwiklabs.com/terms_of_service <<<",https://www.coursera.org/learn/google-cloud-java-spring,Coursera
363,Kotlin for Java Developers,"The Kotlin programming language is a modern language that gives you more power for your everyday tasks. Kotlin is concise, safe, pragmatic, and focused on interoperability with Java code. It can be used almost everywhere Java is used today: for server-side development, Android apps, and much more. Kotlin is 100% compatible with all existing Java frameworks, and has good tooling support. It’s a pragmatic language with a very low learning curve, and can be quickly grasped by Java developers. Kotlin code might be compiled not only to JVM bytecode but to JavaScript and Native code as well, but this course is focused on Kotlin/JVM. This course aims to share with you the power and the beauty of Kotlin. We'll have a basic overview of the language, as well as a discussion of many corner cases, especially concerning Java interoperability. The course is based on your Java experience; it shows the similarities between the two languages and focuses on what's going to be different. 
Note that this course won't cover the programming fundamentals. We'll discuss: basic syntax, nullability, functional programming with Kotlin, object-oriented programming with Kotlin, the power of the Kotlin standard library, and Java interoperability.",https://www.coursera.org/learn/kotlin-for-java-developers,Coursera
364,Developing Front-End Apps with React,"React is one of the most popular frameworks  in the Web and Front-end application Development category.    In this course, you will    
- build rich Front-End applications with React and ES6   
- connect React components using data and state   
- write rich React components with advanced features like Hooks and Redux   

In addition, you will explore how to access the React web framework user interface (UI) library and run rich React applications. You will find ways to use React components and change their properties and states in a dynamic user interface. You will learn to connect to an external server from a React page. The course introduces different testing tools that you can use to test the component without manual verification.  

Throughout the course, you will complete numerous hands-on labs to gain practical experience. At the end of the course, you will demonstrate your React skills with a final project to add to your portfolio.    

This course will help you succeed as a front-end or full-stack developer. It suits those in IT looking to step up in their careers or new graduates seeking to establish their client-side skills.  

Note: This course requires knowledge of HTML, CSS, JavaScript, and Git/GitHub",https://www.coursera.org/learn/developing-frontend-apps-with-react,Coursera
365,Introduction to Self-Driving Cars,"Welcome to Introduction to Self-Driving Cars, the first course in University of Toronto’s Self-Driving Cars Specialization.  This course will introduce you to the terminology, design considerations and safety assessment of self-driving cars.  By the end of this course, you will be able to: 
- Understand commonly used hardware used for self-driving cars
- Identify the main components of the self-driving software stack
- Program vehicle modelling and control  
- Analyze the safety frameworks and current industry practices for vehicle development

For the final project in this course, you will develop control code to navigate a self-driving car around a racetrack in the CARLA simulation environment. You will construct longitudinal and lateral dynamic models for a vehicle and create controllers that regulate speed and path tracking performance using Python. You’ll test the limits of your control design and learn the challenges inherent in driving at the limit of vehicle performance.

This is an advanced course, intended for learners with a background in mechanical engineering, computer and electrical engineering, or robotics. To succeed in this course, you should have programming experience in Python 3.0, familiarity with Linear Algebra (matrices, vectors, matrix multiplication, rank, Eigenvalues and vectors and inverses), Statistics (Gaussian probability distributions), Calculus and Physics (forces, moments, inertia, Newton's Laws).

You will also need certain hardware and software specifications in order to effectively run the CARLA simulator: Windows 7 64-bit (or later) or Ubuntu 16.04 (or later), Quad-core Intel or AMD processor (2.5 GHz or faster), NVIDIA GeForce 470 GTX or AMD Radeon 6870 HD series card or higher, 8 GB RAM, and OpenGL 3 or greater (for Linux computers).",https://www.coursera.org/learn/intro-self-driving-cars,Coursera
366,Agile Meets Design Thinking,"Despite everyone's good intentions, hard work and solid ideas, too many teams end up creating products that no one wants, no one can use, and no one buys. But it doesn't have to be this way. Agile and design thinking offer a different--and effective--approach to product development, one that results in valuable solutions to meaningful problems. In this course, you’ll learn how to determine what's valuable to a user early in the process--to frontload value--by focusing your team on testable narratives about the user and creating a strong shared perspective.  This course is supported by the Batten Institute at UVA’s Darden School of Business. The Batten Institute’s mission is to improve the world through entrepreneurship and innovation: www.batteninstitute.org.",https://www.coursera.org/learn/uva-darden-getting-started-agile,Coursera
367,Using Databases with Python,"This course will introduce students to the basics of the Structured Query Language (SQL) as well as basic database design for storing data as part of a multi-step data gathering, analysis, and processing effort.  The course will use SQLite3 as its database.  We will also build web crawlers and multi-step data gathering and visualization processes.  We will use the D3.js library to do basic data visualization.  This course will cover Chapters 14-15 of the book “Python for Everybody”. To succeed in this course, you should be familiar with the material covered in Chapters 1-13 of the textbook and the first three courses in this specialization. This course covers Python 3.",https://www.coursera.org/learn/python-databases,Coursera
368,Data Structures,"A good algorithm usually comes together with a set of good data structures that allow the algorithm to manipulate the data efficiently. In this online course, we consider the common data structures that are used in various computational problems. You will learn how these data structures are implemented in different programming languages and will practice implementing them in our programming assignments. This will help you to understand what is going on inside a particular built-in implementation of a data structure and what to expect from it. You will also learn typical use cases for these data structures. A few examples of questions that we are going to cover in this class are the following:
1. What is a good strategy of resizing a dynamic array?
2. How priority queues are implemented in C++, Java, and Python?
3. How to implement a hash table so that the amortized running time of all operations is O(1) on average?
4. What are good strategies to keep a binary tree balanced? 

You will also learn how services like Dropbox manage to upload some large files instantly and to save a lot of storage space!",https://www.coursera.org/learn/data-structures,Coursera
369,Introduction to Scrum Master Training,"This course is designed to help Scrum beginners learn the foundational knowledge to become proficient with Agile Scrum. Throughout the course, learners will explore Agile methodologies and benefits of building incrementally. They will also learn about the roles within Scrum teams, events that happen during a Sprint, Agile artifacts, and the Definition of Done for a Sprint.",https://www.coursera.org/learn/introduction-to-certified-scrum-master,Coursera
370,Version Control with Git,"The Version Control with Git course provides  you with a solid, hands-on foundation for understanding the Git version control system.  Git is open source software originally created by Linus Torvalds. Git manages team files for large and small projects. This allows the team to continuously improve its product. It is used by most major technology companies, and is assumed knowledge for many modern programming and IT jobs.  It is a core component of DevOps, continuous delivery pipelines and cloud-native computing. You could also use Git to manage the many continuously improving revisions of that book that you are writing.  In this course, you will not learn everything there is to know about Git, but you will build a strong conceptual understanding of the technology, and afterward will be able to confidently dig deeper on any topic that interests you. This course assumes no previous knowledge of Git, but if you do have experience with it, you may find this course to be both useful and challenging. This is especially true if you currently ""know just enough Git to be dangerous"". 

There are two paths in this course. Both rely heavily on hands-on labs. One path assumes that you have experience using a command line interface, and the other path uses the Sourcetree graphical client. If you are not experienced with a command line, we highly suggest that you go through the Sourcetree path. Eventually, you might want to go through both paths, so that you can decide which tool to use for specific tasks. Besides, repetition is good for learning :)

You can watch the videos and take the quizzes from your phone if you want, but the hands-on labs require you to have a Windows or Mac computer. If you use the command line path through the course, you can also use Linux. 

This course uses Bitbucket (bitbucket.org) as the hosted provider for remote Git repositories. Bitbucket is free for teams of up to 5 people, including private repositories. However, most of the knowledge that you gain in this course applies to Git itself, and you can apply this knowledge to other hosted Git providers (such as GitHub). 

This course tries to be as concise as possible. It will probably take you about 5-10 hours to go through one of the two paths, but your mileage may vary.",https://www.coursera.org/learn/version-control-with-git,Coursera
371,Ordered Data Structures,"In this course, you will learn new data structures for efficiently storing and retrieving data that is structured in an ordered sequence. Such data includes an alphabetical list of names, a family tree, a calendar of events or an inventory organized by part numbers. The specific data structures covered by this course include arrays, linked lists, queues, stacks, trees, binary trees, AVL trees, B-trees and heaps. This course also shows, through algorithm complexity analysis, how these structures enable the fastest algorithms to search and sort data.",https://www.coursera.org/learn/cs-fundamentals-2,Coursera
372,Introduction to Cybersecurity Careers,"There is a great demand for cybersecurity professionals and expected to continue into the foreseeable future. Thus making it the right time to launch into a cybersecurity career.  This course gives an insight into the various career options in cybersecurity. It is designed to give you the knowledge required to find and secure the right career for you in the information security (Infosec) industry. The course begins by addressing the widening employment gap in cybersecurity, detailing the various roles and responsibilities associated with different career levels. 

You will learn the importance of both technical and soft skills, providing a balanced approach to professional development. In addition, you will also become familiar with the most recognized certifications in the field provided by organizations such as CompTIA, ISC2 like A+ and CISSP and so on. 

Throughout this course you will hear from several cybersecurity experts sharing their insights and experiences on how to start a career in cybersecurity.

This course is suitable for anyone who aspires to launch a rewarding career in cybersecurity.  It does not require any prior degree or cybersecurity background.",https://www.coursera.org/learn/introduction-to-cybersecurity-careers,Coursera
373,Introduction to Generative AI Studio,"This course introduces Vertex AI Studio, a tool for prototyping and customizing generative AI models. Through immersive lessons, engaging demos, and a hands-on lab, you'll explore the generative AI workflow and learn how to leverage Vertex AI Studio for Gemini multimodal applications, prompt design, and model tuning. The aim is to enable you to unlock the potentials of these models in your projects with Vertex AI Studio.",https://www.coursera.org/learn/introduction-to-generative-ai-studio,Coursera
374,C for Everyone: Programming Fundamentals,"This course is for everyone. In the new world we live in, coding is a universally valuable skill, whether you're a scientist, artist, or a humanist. Algorithms are everywhere, and we all have to understand how they work. The C language is particularly well suited as an introduction to coding: It's a tried-and-true language, and it allows you to understand computing processes at a deep level.  No prior knowledge of coding is needed for this course. We'll start at the beginning.
The time estimated time commitment for this course is five hours a week for five weeks.",https://www.coursera.org/learn/c-for-everyone,Coursera
375,Introduction to Google Workspace Administration,"Introduction to Google Workspace Administration is the first course in the Google Workspace Administration series of courses. This series will serve as the starting place for any new Google Workspace admin as they begin their journey of managing and establishing Google Workspace best practices for their organization. These courses together will leave you feeling confident to utilize the basic functions of the admin console to manage users, control access to services, configure security settings, and much more.

Through a series of readings and step-by-step hands-on exercises, and knowledge checks, learners can expect to leave this training with all of the skills they need to get started as Google Workspace administrators.

In this course you will sign up for a Google Workspace account and configure your DNS records for Google Workspace. You will learn how to provision and manage your users, and will create groups and calendar resources for your organization. You will be introduced to your Cloud Directory and will learn how to split your organization into organizational units to simplify user and service management. Finally you will learn how to delegate admin privileges to other users in your organization.

IMPORTANT - To get the most out of this training course, learners should be prepared to:

- Purchase a new domain through a registrar such as enom or GoDaddy. Note: If you already have a domain that you would like to use for the trial you can do this but this course does not provide detailed steps on how to associate an existing domain with a Google Workspace trial account. For detailed instructions on how to do that, please refer to this Help Center article: https://support.google.com/a/topic/9196
- Provide credit card details as part of the Google Workspace account setup. You will be using a 14 day trial Google Workspace account during this course. As part of the sign up flow you will be required to provide credit card details. No charges for Google Workspace are made to your credit card until the trial period has ended. You must ensure that you CANCEL YOUR SUBSCRIPTION before the trial period ends to avoid and charges. This is very IMPORTANT so don't forget!
- Install and be ready to use the latest version of Chrome web browser available at https://www.google.com/chrome/",https://www.coursera.org/learn/introduction-google-workspace,Coursera
376,Java Programming: Solving Problems with Software,"Learn to code in Java and improve your programming and problem-solving skills. You will learn to design algorithms as well as develop and debug programs. Using custom open-source classes, you will write programs that access and transform images, websites, and other types of data. At the end of the course you will build a program that determines the popularity of different baby names in the US over time by analyzing comma separated value (CSV) files.  After completing this course you will be able to:
1. Edit, compile, and run a Java program;
2. Use conditionals and loops in a Java program;
3. Use Java API documentation in writing programs. 
4. Debug a Java program using the scientific method;
5. Write a Java method to solve a specific problem;
6. Develop a set of test cases as part of developing a program;
7. Create a class with multiple methods that work together to solve a problem; and
8. Use divide-and-conquer design techniques for a program that uses multiple methods.",https://www.coursera.org/learn/java-programming,Coursera
377,Linux System Programming and Introduction to Buildroot,"This course provides an overview of System Programming for the Linux operating system, or software which is interfacing directly with the Linux Kernel and C library. The basic components of a Linux Embedded System, including kernel and root filesystem details are discussed. The Buildroot build system is introduced, which students use to build their own custom Embedded Linux system through programming assignments. Linux System Programming and Introduction to Buildroot can also be taken for academic credit as ECEA 5305, part of CU Boulder’s Master of Science in Electrical Engineering.",https://www.coursera.org/learn/linux-system-programming-introduction-to-buildroot,Coursera
378,"Excel/VBA for Creative Problem Solving, Part 1","""Excel/VBA for Creative Problem Solving, Part 1"" is aimed at learners who are seeking to augment, expand, optimize, and increase the efficiency of their Excel spreadsheet skills by tapping into the powerful programming, automation, and customization capabilities available with Visual Basic for Applications (VBA).   This course is the first part of a three-part series and Specialization that focuses on the application of computing techniques in Excel/VBA to solve problems.  In this course (Part 1), you will: 1) create macros to automate procedures in Excel; 2) define your own user-defined functions; 3) create basic subroutines to interface with the user; 4) learn the basic programming structures in VBA; and 5) automate Excel’s Goal Seek and Solver tools and use numerical techniques to create “live solutions” to solve targeting and optimization problems.

New to computer programming?  The extremely intuitive and visual nature of VBA lends itself nicely to teaching and learning - what a fun way to learn to code!  No prior knowledge in programming nor advanced math skills are necessary yet seasoned programmers will pick up new and creative spreadsheet problem solving strategies.

After you have learned the basics of VBA, each module will introduce foundational and broad problems inspired by situations that you might encounter in the real world.  To pass each module, you'll need to pass a mastery quiz and complete a problem solving assignment.  This course is unique in that the weekly assignments are completed in-application (i.e., on your own computer in Excel), providing you with valuable hands-on training.",https://www.coursera.org/learn/excel-vba-for-creative-problem-solving-part-1,Coursera
379,Llama for Python Programmers,"Llama for Python Programmers is designed for programmers who want to leverage the Llama 2 large language model (LLM) and take advantage of the generative artificial intelligence (AI) revolution. In this course, you’ll learn how open-source LLMs can run on self-hosted hardware, made possible through techniques such as quantization by using the llama.cpp package. You’ll explore how Meta’s Llama 2 fits into the larger AI ecosystem, and how you can use it to develop Python-based LLM applications. Get hands-on skills using methods such as few-shot prompting and grammars to improve and constrain Llama 2 output, allowing you to get more robust data interchanges between Python application code and LLM inference. Lastly, gain insight into the different Llama 2 model variants, how they were trained, and how to interact with these models in Python. This course does not require a data science or statistics background. It is developed specifically for Python application developers who are interested in integrating generative AI, such as Llama 2, into their work.",https://www.coursera.org/learn/llama-for-python-programmers,Coursera
380,Machine Learning for All,"Machine Learning, often called Artificial Intelligence or AI, is one of the most exciting areas of technology at the moment. We see daily news stories that herald new breakthroughs in facial recognition technology, self driving cars or computers that can have a conversation just like a real person. Machine Learning technology is set to revolutionise almost any area of human life and work, and so will affect all our lives, and so you are likely to want to find out more about it. Machine Learning has a reputation for being one of the most complex areas of computer science, requiring advanced mathematics and engineering skills to understand it. While it is true that working as a Machine Learning engineer does involve a lot of mathematics and programming, we believe that anyone can understand the basic concepts of Machine Learning, and given the importance of this technology, everyone should. The big AI breakthroughs sound like science fiction, but they come down to a simple idea: the use of data to train statistical algorithms. In this course you will learn to understand the basic idea of machine learning, even if you don't have any background in math or programming. Not only that, you will get hands on and use user friendly tools developed at Goldsmiths, University of London to actually do a machine learning project: training a computer to recognise images. This course is for a lot of different people. It could be a good first step into a technical career in Machine Learning, after all it is always better to start with the high level concepts before the technical details, but it is also great if your role is non-technical. You might be a manager or other non-technical role in a company that is considering using Machine Learning. You really need to understand this technology, and this course is a great place to get that understanding. Or you might just be following the news reports about AI and interested in finding out more about the hottest new technology of the moment. Whoever you are, we are looking forward to guiding you through you first machine learning project. NB this course is designed to introduce you to Machine Learning without needing any programming. That means that we don't cover the programming based machine learning tools like python and TensorFlow.",https://www.coursera.org/learn/uol-machine-learning-for-all,Coursera
381,Front-End Developer Capstone ,"The Capstone project enables you to demonstrate multiple skills from the Certificate by solving an authentic real-world problem. Each module includes a brief recap of, and links to, content that you have covered in previous courses in this program.  This course will test your knowledge and understanding, and provide you with a platform to show off your new abilities in front-end web development using React. During this course, you will be guided through the process of building an app, combining all the skills and technologies you've learned throughout this program to solve the problem at hand. 

On completion of the Capstone project, you’ll have a job-ready portfolio that you can show to recruiters, demonstrate during interviews and impress potential employers.

To complete this course, you will need front-end developer experience.  Additionally, it always helps to have a can-do attitude!",https://www.coursera.org/learn/meta-front-end-developer-capstone,Coursera
382,Introduction to Web Development,"This course is designed to build your skills in web development and design, no matter how little experience or technical knowledge you currently have. You probably visit several websites every day, whether for business, entertainment or education. But have you ever wondered how these websites actually work? How are they built? How do browsers, computers, and mobile devices interact with the web? What skills are necessary to build a website? With a billion websites now on the internet, the answers to these questions could be your first step toward a better understanding of the internet and developing a new set of internet skills.   By the end of this course you’ll be able to describe the structure and functionality of the world wide web, create static web pages using HTML and CSS, select an appropriate web hosting service, and publish your webpages for the world to see. Finally, you’ll be able to develop a working model for creating your own personal or business websites in the future and launch yourself on a learning journey in web development.",https://www.coursera.org/learn/web-development,Coursera
383,Blockchain: Foundations and Use Cases,"This course is the definitive introduction to blockchain for both the developer and non-developer audience. Beyond the technology, this course will introduce you to some of the philosophy behind decentralization and why there is so much excitement around it. Join ConsenSys Academy and course instructor Nick Nelson in this rich-media introduction to the foundations of blockchain. During the first three modules, you'll be introduced to blockchain and the technology behind it. In module four, we'll go beyond bitcoin and delve deeper into a next-generation blockchain called Ethereum to introduce you to what modern blockchains can do. The use cases featured in the final module are drawn from among the businesses in ConsenSys portfolio. We believe we're uniquely positioned to present you with a valuable behind-the-scenes look at the people and companies working in this space to help give you a better understanding of the business side of blockchain.

Together, we'll examine businesses use cases, hear from industry leaders, and give you the opportunity to develop and analyze a use case yourself. With this course, not only will you be the one who is able to explain blockchain to your colleagues, you'll be well on your way to making educated business decisions with your new, foundational understanding of the technology.",https://www.coursera.org/learn/blockchain-foundations-and-use-cases,Coursera
384,Web3 and Blockchain Fundamentals,"There is a lot of hype around Web3 and blockchain. As with any disruptive technology, there are many competing sources of information. But if we look beyond the hype and mania—not to mention the fear, uncertainty, and doubt—we see something profound happening. We are witnessing one of the largest transformations of wealth in human history—from paper-based analog assets to digital ones. Blockchain represents the first native digital medium for value, and is foundational to the next generation of the Internet—also known as Web3. In this short course you’ll learn what Web3 is, and how it differs from Web1 and Web2 in important ways. You’ll explore blockchain as the foundational technology for the Web3 era, and will learn about key concepts, such as digital assets (tokens), smart contracts, decentralized autonomous organizations (DAOs), and the blockchain “trilemma.” You will be able to describe seven principles for the design of blockchain-based systems, and seven challenge areas associated with implementing blockchain technology. You will be able to identify the questions one must consider when deciding whether or not blockchain is appropriate for a particular problem or use-case, and you will be able to describe some real-world examples of companies that have integrated blockchain into their business models. 

This course is non-technical (i.e. no coding required) and is intended for a broad audience. The video material for these courses includes content from our “Blockchain Revolution Specialization” and “Web3 and Blockchain in Global Commerce Specialization,” which has been remixed and re-edited for the purposes of this short course.",https://www.coursera.org/learn/web3-blockchain-fundamentals,Coursera
385,"Introduction to HTML, CSS, & JavaScript","Want to take the first steps to become a Web Developer? This course will help you discover the languages, frameworks, and tools that you will need to create interactive and engaging websites right from the beginning.   You will begin by learning about the roles of front-end, back-end, and full-stack developers and how they work together on development projects. Through this, you will also become familiar with the terminology and skills needed in your career as a web developer.  

Next, you will explore the languages needed for developing websites or applications. You will gain a thorough understanding of HTML and CSS and learn how a combination of both technologies can help developers create the structure and style of their websites.  

Finally, you will learn how JavaScript can make your webpages dynamic with features that include interactive forms, dynamic content modification, and sophisticated menu systems. 

By learning the fundamentals of HTML5, CSS, and JavaScript you will be able to combine them to:  
- create the basic structure of a website  
- create format and layout for web applications 
- enhance your website and create rich, interactive applications 
- increase user interactivity and enhance user experience 
- give your website a real wow factor! 

In this course you will practice what you learn with numerous hands-on labs. Lastly, you will complete a final project where you will create a webpage to showcase your skills and have a great addition to your portfolio!",https://www.coursera.org/learn/introduction-html-css-javascript,Coursera
386,Introduction to Software Testing,"After completing this course, you will have an understanding of the fundamental principles and processes of software testing. You will have actively created test cases and run them using an automated testing tool. You will being writing and recognizing good test cases, including input data and expected outcomes. After completing this course, you will be able to…
- Describe the difference between verification and validation.
- Explain the goal of testing.
- Use appropriate test terminology in communication; specifically: test fixture, logical test case, concrete test case, test script, test oracle, and fault.
- Describe the motivations for white and black box testing.
- Compare and contrast test-first and test-last development techniques.
- Measure test adequacy using statement and branch coverage.
- Reason about the causes and acceptability of and poor coverage
- Assess the fault-finding effectiveness of a functional test suite using mutation testing.
- Critique black-box and white-box testing, describing the benefits and use of each within the greater development effort.
- Distinguish among the expected-value (true), heuristic, consistency (as used in A/B regression), and probability test oracles and select the one best-suited to the testing objective.
- Craft unit and integration test cases to detect defects within code and automate these tests using JUnit.  To achieve this, students will employ test doubles to support their tests, including stubs (for state verification) and mocks (for behavioral verification) (https://martinfowler.com/articles/mocksArentStubs.html).

This course is primarily aimed at those learners interested in any of the following roles: Software Engineer, Software Engineer in Test, Test Automation Engineer, DevOps Engineer, Software Developer, Programmer, Computer Enthusiast. We expect that you should have an understanding of the Java programming language (or any similar object-oriented language and the ability to pick up Java syntax quickly) and some knowledge of the Software Development Lifecycle.",https://www.coursera.org/learn/introduction-software-testing,Coursera
387,"Everyday Excel, Part 1","""Everyday Excel, Part 1"" is aimed at learners who are seeking to learn Excel from the ground up.  No experience with Excel is necessary.  While this course is meant for beginners of Excel, advanced users will undoubtedly pick up new skills and tools. This course is the first part of a three-part series and Specialization that focuses on teaching introductory through very advanced techniques and tools in Excel.  In this course (Part 1), you will: 1) learn how to effectively navigate around the Excel environment; 2) edit and format Excel worksheets; 3) implement basic to advanced Excel functions (including financial, logical, and text functions); 4) learn how to manage data sets (filter, remove duplicates, consolidate data, sort data, and validate data); and 5) learn how to effectively visualize data through scatterplots, column charts, and pie charts.

New to Excel?  That is entirely fine!  This course is meant to be fun, thought-provoking, and appeal to a wide audience.  No prior knowledge in programming nor advanced math skills are necessary.  The course is organized into 5 Weeks (modules). 

To pass each module, you'll need to pass a mastery quiz and complete a problem solving assignment.  This course is unique in that the weekly assignments are completed in-application (i.e., on your own computer in Excel), providing you with valuable hands-on training.",https://www.coursera.org/learn/everyday-excel-part-1,Coursera
388,Fundamentals of Generative AI for Beginners,"Generative AI is a disruptive technology and its impact has been immense. It is causing businesses to rethink customer strategies and redesign their products, chipmakers are scrambling to keep up with the increased demand for processors, and in academia, educators are altering learning paths and curriculums in every field of study. The material presented in this course will introduce you to the world of generative AI and uncover some of the ingredients that make up this groundbreaking field. Using basic terms and a few simple examples, we will explain what generative AI is, what makes it work, and help build a foundation of knowledge that takes you to the next step on your learning journey. Throughout the course, you'll learn what large language models, neural networks, training data sets, and prompts are. You'll also become familiar with some tools and processes used to build generative AI applications. This course is designed for students, early career professionals, and non-Machine Learning practitioners eager to learn more about Generative AI. The material is ""code free"" and builds a foundation of knowledge that can be applied towards advanced learning in the areas of Generative AI and machine learning.",https://www.coursera.org/learn/aws-generative-ai-for-beginners,Coursera
389,State Estimation and Localization for Self-Driving Cars,"Welcome to State Estimation and Localization for Self-Driving Cars, the second course in University of Toronto’s Self-Driving Cars Specialization. We recommend you take the first course in the Specialization prior to taking this course.  This course will introduce you to the different sensors and how we can use them for state estimation and localization in a self-driving car. By the end of this course, you will be able to:
- Understand the key methods for parameter and state estimation used for autonomous driving, such as the method of least-squares
- Develop a model for typical vehicle localization sensors, including GPS and IMUs
- Apply extended and unscented Kalman Filters to a vehicle state estimation problem
- Understand LIDAR scan matching and the Iterative Closest Point algorithm 
- Apply these tools to fuse multiple sensor streams into a single state estimate for a self-driving car 

For the final project in this course, you will implement the Error-State Extended Kalman Filter (ES-EKF) to localize a vehicle using data from the CARLA simulator. 

This is an advanced course, intended for learners with a background in mechanical engineering, computer and electrical engineering, or robotics. To succeed in this course, you should have programming experience in Python 3.0, familiarity with Linear Algebra (matrices, vectors, matrix multiplication, rank, Eigenvalues and vectors and inverses), Statistics (Gaussian probability distributions), Calculus and Physics (forces, moments, inertia, Newton's Laws).",https://www.coursera.org/learn/state-estimation-localization-self-driving-cars,Coursera
390,Fundamentals of Software Architecture for Big Data,"The course is intended for individuals looking to understand the basics of software engineering as they relate to building large software systems that leverage big data. You will be introduced to software engineering concepts necessary to build and scale large, data intensive, distributed systems. Starting with software engineering best practices and loosely coupled, highly cohesive data microservices, the course takes you through the evolution of a distributed system over time. This course can be taken for academic credit as part of CU Boulder’s MS in Data Science or MS in Computer Science degrees offered on the Coursera platform. These fully accredited graduate degrees offer targeted courses, short 8-week sessions, and pay-as-you-go tuition. Admission is based on performance in three preliminary courses, not academic history. CU degrees on Coursera are ideal for recent graduates or working professionals. Learn more: 

MS in Data Science: https://www.coursera.org/degrees/master-of-science-data-science-boulder 

MS in Computer Science: https://coursera.org/degrees/ms-computer-science-boulder",https://www.coursera.org/learn/software-architecture-for-big-data-fundamentals,Coursera
391,Introduction to Software Product Management,"This course highlights the importance and role of software product management. It also provides an overview of the specialization, as well as its goals, structure, and expectations. The course explains the value of process, requirements, planning, and monitoring in producing better software.",https://www.coursera.org/learn/introduction-to-software-product-management,Coursera
392,Managing Google Workspace,"Managing Google Workspace is the second course in the Google Workspace Administration series. This course focuses on the Google Workspace core services such as Gmail, Calendar, and Drive & Docs. You will become familiar with the various service settings, and learn how to enable them for all or just a subset of your users. You will gain an understanding of Google Vault, Google’s ediscovery service. You will understand the various admin console reports that are available and be able to search and filter the information in these reports. Finally you will see how multiple domains can be used with Google Workspace and learn how to add a new domain to your account.",https://www.coursera.org/learn/managing-google-workspace,Coursera
393,Single Page Web Applications with AngularJS,"Do you want to write powerful, maintainable, and testable front end applications faster and with less code? Then consider joining this course to gain skills in one of the most popular Single Page Application (SPA) frameworks today, AngularJS. Developed and backed by Google, AngularJS is a very marketable skill to acquire. In this course, we will explore the core design of AngularJS 1.x (latest version of AngularJS 1), its components and code organization techniques. We will enhance the functionality of our web app by utilizing dependency injection to reuse existing services as well as write our own. We will create reusable HTML components that take advantage of AngularJS data binding as well as extend HTML syntax with a very powerful feature of AngularJS called directives. We’ll set up routing so our SPA can have multiple views. We will also learn how to unit test our functionality. At the end of this course, you will build a fully functional, well organized and tested web application using AngularJS and deploy it to the cloud.",https://www.coursera.org/learn/single-page-web-apps-with-angularjs,Coursera
394,Object Oriented Programming in Java,"Welcome to our course on Object Oriented Programming in Java using data visualization. People come to this course with many different goals -- and we are really excited to work with all of you! Some of you want to be professional software developers, others want to improve your programming skills to implement that cool personal project that you’ve been thinking about, while others of you might not yet know why you’re here and are trying to figure out what this course is all about. This is an intermediate Java course. We recommend this course to learners who have previous experience in software development or a background in computer science.  Our goal is that by the end of this course each and every one of you feels empowered to create a Java program that’s more advanced than any you have created in the past and that is personally interesting to you. In achieving this goal you will also learn the fundamentals of Object Oriented Programming, how to leverage the power of existing libraries, how to build graphical user interfaces, and how to use some core algorithms for searching and sorting data. And this course is project-based, so we’ll dive right into the project immediately!

We are excited to be offering a unique course structure, designed to support learners of different backgrounds in succeeding at their own pace. The first module explains how this will work and if this course is right for you. We also recommend taking a few minutes to explore the course site. A good place to start is the navigation bar on the left. Click Course Content to see what material we’ll cover each week, as well preview the assignments you’ll need to complete to pass the course. Click Discussions to see forums where you can discuss the course material with fellow students taking the class. Be sure to introduce yourself to everyone in the Meet and Greet forum.

This course should take about 6 weeks to complete. You can check out the recommended course schedule below to see a quick overview of the lessons and assignments you’ll complete each week.

We’re excited you’re here learning with us. Let’s get started!",https://www.coursera.org/learn/object-oriented-java,Coursera
395,Introduction to Structured Query Language (SQL),"In this course, you'll walk through installation steps for installing a text editor, installing MAMP or XAMPP (or equivalent) and creating a MySql Database. You'll learn about single table queries and the basic syntax of the SQL language, as well as database design with multiple tables, foreign keys, and the JOIN operation. Lastly, you'll learn to model many-to-many relationships like those needed to represent users, roles, and courses.",https://www.coursera.org/learn/intro-sql,Coursera
396,The Full Stack,"As you prepare for your role in back-end development, practice bringing together multiple skills to build a full-stack Django app. You’ll start by setting up an environment for a local practical project, and refactoring the front and back-ends of an existing application. You will then have the opportunity to create the front and back-ends of a new application using your full-stack developer skills. By the end of this course you will be able to:
- Explain common concepts related to full stack development
- Use HTML, CSS and JavaScript to develop well-structured, interactive and responsive websites
- Build a full stack application using Django that stores its data in models on a MySQL database and updates its pages with forms and API endpoints
- Describe the different environments that web applications are deployed to

To complete this course you will need previous experience with back-end development, Python, version control, databases, Django web framework and APIs.",https://www.coursera.org/learn/the-full-stack,Coursera
397,Product Analytics and AI,"Few capabilities focus agile like a strong analytics program. Such a program determines where a team should focus from one agile iteration (sprint) to the next. Successful analytics are rarely hard to understand and are often startling in their clarity. In this course, developed at the Darden School of Business at the University of Virginia, you'll learn how to build a strong analytics infrastructure for your team, integrating it with the core of your drive to value.",https://www.coursera.org/learn/uva-darden-agile-analytics,Coursera
398,Unordered Data Structures,"The Unordered Data Structures course covers the data structures and algorithms needed to implement hash tables, disjoint sets and graphs. These fundamental data structures are useful for unordered data. For example, a hash table provides immediate access to data indexed by an arbitrary key value, that could be a number (such as a memory address for cached memory), a URL (such as for a web cache) or a dictionary. Graphs are used to represent relationships between items, and this course covers several different data structures for representing graphs and several different algorithms for traversing graphs, including finding the shortest route from one node to another node. These graph algorithms will also depend on another concept called disjoint sets, so this course will also cover its data structure and associated algorithms.",https://www.coursera.org/learn/cs-fundamentals-3,Coursera
399,Introduction to AutoSAR,"This course covers every aspect of automotive software development, including the principles of AutoSAR, more complex AutoSAR ideas, non-AutoSAR use cases, and in-depth ECU abstraction development. You will examine the foundational software of AutoSAR, comprehend the subtleties of runnable, and develop knowledge of interfaces, connectors, and composition. Additionally, you will learn about real-time environments (RTE), such as sender-receiver, client-server, and communication RTE, and gain practical experience in planning events inside the RTE framework. The course also covers non-AutoSAR applications and goes beyond AutoSAR, concentrating on the Microcontroller Abstraction Layer (MCAL), ARXML configuration, and efficient project setup.  By the end of the course, you will have a variety of abilities in automotive software development and be well-equipped to handle challenging automotive software projects, whether inside or outside the AutoSAR framework.

This course is helpful for:

1) Engineers who work in creating automotive software, vehicle electronics, and systems engineering and wish to learn more about AUTOSAR and its use should take this course.

2) Software developers who want to embrace AUTOSAR-compliant development practices are responsible for developing software applications and components for automotive systems.

3) Engineers working on embedded systems in automobiles who want to include AUTOSAR principles into their work.

4) Systems Architects: Experts in the design and architecture of automotive systems interested in implementing AUTOSAR-compliant plans.

To be successful in this course, you should have a background in programming skills, software engineering, embedded systems, and the fundamentals of automotive technology.",https://www.coursera.org/learn/introduction-to-autosar,Coursera
400,Introduction to Databases for Back-End Development,"Back-end developers write applications that end-users use to interact with databases. Some common tasks that end-users carry out using these applications include storing, searching, extracting and manipulating data. Therefore, it’s essential that all back-end developers possess strong knowledge and experience with how databases work.

In this course, you’ll receive an introduction to databases and explore the different ways in which they can be used to store and manage data. You’ll also learn to distinguish between different types of database management systems. You’ll then practice basic creation and data selection tasks with the use of Structured Query Language (SQL) commands.

By the end of this course, you’ll be able to:

- Demonstrate a working knowledge of the concepts and principles that underpin how databases work
- Identify and explain the different types of core technology and management systems used in
   databases
- Identify and interpret basic SQL statements and commands
- Manipulate records in a database with the use of SQL statements and commands
- Outline alternatives to SQL
- and plan and design a simple relational database system

You’ll also gain experience with the following:
- Fundamental concepts in database 
- Basic MySQL syntax and commands
- Database management systems
- Relational databases",https://www.coursera.org/learn/intro-to-databases-back-end-development,Coursera
401,Hypothesis-Driven Development,"To deliver agile outcomes, you have to do more than implement agile processes- you have to create focus around what matters to your user and constantly test your ideas. This is easier said than done, but most of today’s high-functioning innovators have a strong culture of experimentation. In this course, you’ll learn how to identify the right questions at the right time, and pair them with the right methods to do just enough testing to make sure you minimize waste and maximize the outcomes you create with your user.

This course is supported by the Batten Institute at UVA’s Darden School of Business. The Batten Institute’s mission is to improve the world through entrepreneurship and innovation: www.batteninstitute.org.",https://www.coursera.org/learn/uva-darden-agile-testing,Coursera
402,VLSI CAD Part I: Logic,"A modern VLSI chip has a zillion parts -- logic, control, memory, interconnect, etc.  How do we design these complex chips?  Answer: CAD software tools.  Learn how to build thesA modern VLSI chip is a remarkably complex beast:  billions of transistors, millions of logic gates deployed for computation and control, big blocks of memory, embedded blocks of pre-designed functions designed by third parties (called “intellectual property” or IP blocks).  How do people manage to design these complicated chips?  Answer: a sequence of computer aided design (CAD) tools takes an abstract description of the chip, and refines it step-wise to a final design. This class focuses on the major design tools used in the creation of an Application Specific Integrated Circuit (ASIC) or System on Chip (SoC) design. Our focus in this first part of the course is on key Boolean logic representations that make it possible to synthesize, and to verify, the gate-level logic in these designs.  This is the first step of the design chain, as we move from logic to layout.    Our goal is for students to understand how the tools themselves work, at the level of their fundamental algorithms and data structures. Topics covered will include: Computational Boolean algebra, logic verification, and logic synthesis (2-level and multi-level). Recommended Background
Programming experience (C, C++, Java, Python, etc.) and basic knowledge of data structures and algorithms (especially recursive algorithms).  An understanding of basic digital design:  Boolean algebra, Kmaps, gates and flip flops, finite state machine design.  Linear algebra and calculus at the level of a junior or senior in engineering.  Exposure to basic VLSI at an undergraduate level is nice -- but it’s not necessary.  We will keep the course self-contained, but students with some VLSI will be able to skip some background material.e tools in this class.",https://www.coursera.org/learn/vlsi-cad-logic,Coursera
403,"Programming Foundations with JavaScript, HTML and CSS","Learn foundational programming concepts (e.g., functions, for loops, conditional statements) and how to solve problems like a programmer. In addition, learn basic web development as you build web pages using HTML, CSS, JavaScript. By the end of the course, will create a web page where others can upload their images and apply image filters that you create. After completing this course, you will be able to:
1. Think critically about how to solve a problem using programming;
2. Write JavaScript programs using functions, for loops, and conditional statements;
3. Use HTML to construct a web page with paragraphs, divs, images, links, and lists;
4. Add styles to a web page with CSS IDs and classes; and
5. Make a web page interactive with JavaScript commands like alert, onClick, onChange, adding input features like an image canvas, button, and slider.",https://www.coursera.org/learn/duke-programming-web,Coursera
404,Create Machine Learning Models in Microsoft Azure,"Machine learning is the foundation for predictive modeling and artificial intelligence. If you want to learn about both the underlying concepts and how to get into building models with the most common machine learning tools this path is for you. In this course, you will learn the core principles of machine learning and how to use common tools and frameworks to train, evaluate, and use machine learning models. This course is designed to prepare you for roles that include planning and creating a suitable working environment for data science workloads on Azure. You will learn how to run data experiments and train predictive models. In addition, you will manage, optimize, and deploy machine learning models into production.

From the most basic classical machine learning models, to exploratory data analysis and customizing architectures, you’ll be guided by easy -to-digest conceptual content and interactive Jupyter notebooks.

If you already have some idea what machine learning is about or you have a strong mathematical background this course is perfect for you. These modules teach some machine learning concepts, but move fast so they can get to the power of using tools like scikit-learn, TensorFlow, and PyTorch. This learning path is also the best one for you if you're looking for just enough familiarity to understand machine learning examples for products like Azure ML or Azure Databricks. It's also a good place to start if you plan to move beyond classic machine learning and get an education in deep learning and neural networks, which we only introduce here.

This program consists of 5 courses to help prepare you to take the Exam DP-100: Designing and Implementing a Data Science Solution on Azure. The certification exam is an opportunity to prove knowledge and expertise operate machine learning solutions at cloud scale using Azure Machine Learning. This specialization teaches you to leverage your existing knowledge of Python and machine learning to manage data ingestion and preparation, model training and deployment, and machine learning solution monitoring in Microsoft Azure . Each course teaches you the concepts and skills that are measured by the exam.",https://www.coursera.org/learn/create-machine-learning-models-in-microsoft-azure,Coursera
405,Blockchain Basics,"This first course of the Blockchain specialization provides a broad overview of the essential concepts of blockchain technology – by initially exploring the Bitcoin protocol followed by the Ethereum protocol – to lay the foundation necessary for developing applications and programming. You will be equipped with the knowledge needed to create nodes on your personal Ethereum blockchain, create accounts, unlock accounts, mine, transact, transfer Ethers, and check balances.        You will learn about the decentralized peer-to-peer network, an immutable distributed ledger and the trust model that defines a blockchain. This course enables you to explain basic components of a blockchain (transaction, block, block header, and the chain) its operations (verification, validation, and consensus model) underlying algorithms, and essentials of trust (hard fork and soft fork). Content includes the hashing and cryptography foundations indispensable to blockchain programming, which is the focus of two subsequent specialization courses, Smart Contracts and Decentralized Applications (Dapps). You will work on a virtual machine image, specifically created for this course, to build an Ethereum test chain and operate on the chain. This hands-on activity will help you understand the workings of a blockchain, its transactions, blocks and mining.

Main concepts are delivered through videos, demos and hands-on exercises.",https://www.coursera.org/learn/blockchain-basics,Coursera
406,COBOL Programming with VSCode,"Professor Tak Auyeung of American River College, said it beautifully, “A programming language is not a fashion statement” it is used for a purpose. Whether it is to add new features, modify logic, create APIs to integrate it into other applications, or implement modern development practices, businesses around the world need application developers who know COBOL. This introductory COBOL course helps a novice learn the Structure of COBOL programs, Data types & Variable Handling, Intrinsic Functions, Branching logic and more. The goal of the course is to enable the participant to be able to write basic COBOL programs. This is a fantastic compliment to the IBM z/OS Practitioner path for the IBM Mainframe.

Join the COBOL Fridays web series. These webinars are curated for first-time programmers, lifelong learners, and anyone who's interested in learning COBOL. http://ibm.biz/cfcoursera

On successful completion of this course, learners are eligible to earn their COBOL Programming with VSCode badge.",https://www.coursera.org/learn/cobol-programming-vscode,Coursera
407,Product Management: Foundations & Stakeholder Collaboration,"Product managers play a crucial role in driving the development and success of a product, serving as a critical link between customers, stakeholders, and the development team. They are responsible for understanding market requirements, defining product objectives and features, and overseeing the entire product lifecycle from conception to its release.

This course will provide you with valuable skills in fostering productive collaborations, engaging stakeholders effectively, and enhancing communication abilities.

You will learn about Kotler's Five Levels of product and market segmentation. In addition, you’ll explore the product manager's role in business development, SWOT analysis, and Porter's Five Forces Model for market assessment.

The course also helps you understand the concepts of innovation and ideation and equip you with crucial skills for effective communication and teamwork in the field of Product Management.

Throughout this course, several product management experts will share their insights and experiences in product management. Practice quizzes and graded quizzes will test your knowledge. You will be able to apply the concepts learned in the course in a final project.

This course is suitable for anyone who aspires to apply for product management jobs. It requires no prior experience or knowledge of product management.",https://www.coursera.org/learn/product-management-foundations-and-stakeholder-collaboration,Coursera
408,Software Processes and Agile Practices,"This course delves into a variety of processes to structure software development. It also covers the foundations of core Agile practices, such as Extreme Programming and Scrum.",https://www.coursera.org/learn/software-processes-and-agile-practices,Coursera
409,Introduction to iOS Mobile Application Development,"Learn about iOS development by learning about the OS and the development platform. Discover how to set up and prepare a local environment. Get acquainted with the Swift playground and write code in Swift.  By the end of this course, you’ll be able to: 
 
-Demonstrate a working knowledge of the general principles of mobile apps and the iOS ecosystem 
-Set up and explore the XCode environment  
-Demonstrate an understanding of how XCode is used in the Swift app development process 
-Write Swift code and create UI with the use of Swift playgrounds 
-Navigate the Swift UI 
-Manipulate data in Swift 
 
You’ll gain experience with the following tools and software: 
 
-Swift application and software 
-iOS software and development environment 
-Mobile OS 
-XCode 
-Objective-C 
-UI frameworks 
-Testflight 
-UI storyboard 
-MVC 
-APIs",https://www.coursera.org/learn/introduction-to-ios-mobile-application-development,Coursera
410,React Native,"React Native is an open-source framework for building cross-platform applications (apps) using React and the platform’s native capabilities. In this course, you will move from the basics of React to a more advanced implementation using React Native. You’ll review a wide range of different React components and ways of styling them. And you’ll get to practice using different mobile methods of interactivity with React Native. Some of the basics skills you will learn include:
• Building a single-page React Native app and styling it using basic components
• Building large lists and configuring user inputs within a React Native app
• Using the Pressable component to build buttons and other clickable areas
• Setting up an app with React Navigation and moving between screens

You’ll gain experience with the following tools and software: 
• React
• React Native
• Front End development languages (HTML, CSS and JavaScript)
• JSX
• Code editing programs, such as Expo and Visual Studio Code

This course is for learners who would like to prepare themselves for a career in mobile development. To succeed in this course, you will need foundational knowledge of React basics, internet navigation skills and an eagerness to code.",https://www.coursera.org/learn/react-native-course,Coursera
411,Designing User Interfaces and Experiences (UI/UX),"UI and UX design is a thriving industry with numerous prospects for anyone with the right skills. This course is designed for those who are interested in starting a career in designing UI and UX experiences as well as developers who want to create web and front-end applications. It emphasizes the key concepts, tools, and methodologies used in front-end development.   Web and mobile-accessible devices are transforming the world. Nowadays, everyone has a smartphone, tablet, smart TV, and/or laptop, which they use for communication and data searching. Companies are increasingly turning to front-end developers, mobile app developers, and UI/UX designers to assist them in producing user-friendly products. Therefore, it is crucial to provide users with a robust yet intuitive user interface and experience. 

In this course, you will learn about the best practices of visual design development and identify the differences between well-designed and poor user interfaces. You will explore typography, readability, and colour theory in UI design.  

You will gain insight into key methodologies in visual design like Responsive Web Design (RWD) and Progressive Web Design (PWD). 

You will gain exposure to tools like Figma, a collaborative cloud-based app used for interface design. You will discover the steps to set up a Figma account and learn about its configuration. In addition, you will explore the various components, styles, libraries, and layout grids used in Figma that are essential for design. 

Throughout this course, you will learn through videos, readings, activities, and quizzes designed to teach you the fundamentals of visual web and mobile design and development. You will gain a range of technical and practical knowledge and get insights and guidance from experts in the field. 
 
The practical knowledge you will gain from the hands-on labs will further strengthen your base and enable you to perform better. 

This is a beginner’s course, intended for learners with basic computer operating skills who have a fundamental knowledge of visual design development and are familiar with Figma.  

To be successful in this course, you should have a basic understanding of User Interface (UI) and User Experience (UX) design as well as website wireframes, familiarity with the different kinds of layouts and tools used for visual design in various devices, and familiarity with the Figma application.",https://www.coursera.org/learn/designing-user-interfaces-and-experiences-uiux,Coursera
412,Scrum Master Certification: Scrum Methodologies,"This course is designed to help Scrum beginners learn the foundational knowledge to become proficient with Agile Scrum. Throughout the course, learners will explore User Stories and how they are prioritized in Agile, Velocity, Backlog Refinement, and Market Actions. Learners will also learn about different Scrum Reports and methods of managing risks.",https://www.coursera.org/learn/csm-practice-process-management,Coursera
413,"Python Functions, Files, and Dictionaries","This course introduces the dictionary data structure and user-defined functions. You’ll learn about local and global variables, optional and keyword parameter-passing, named functions and lambda expressions. You’ll also learn about Python’s sorted function and how to control the order in which it sorts by passing in another function as an input. For your final project, you’ll read in simulated social media data from a file, compute sentiment scores, and write out .csv files. It covers chapters 10-16 of the textbook “Fundamentals of Python Programming,” which is the accompanying text (optional and free) for this course. The course is well-suited for you if you have already taken the ""Python Basics"" course and want to gain further fundamental knowledge of the Python language. Together, both courses are geared towards newcomers to Python programming, those who need a refresher on Python basics, or those who may have had some exposure to Python programming but want a more in-depth exposition and vocabulary for describing and reasoning about programs.

This is a follow-up to the ""Python Basics"" course (course 1 of the Python 3 Programming Specialization), and it is the second of five courses in the specialization.",https://www.coursera.org/learn/python-functions-files-dictionaries,Coursera
414,Database Design and Basic SQL in PostgreSQL,"In this course you will learn more about the historical design of databases and the use of SQL in the PostgreSQL environment. Using SQL techniques and common commands (INSERT INTO, WHERE, ORDER BY, ON DELETE CASCADE, etc) will enable you to create tables, column types and define the schema of your data in PostgreSQL.    You will learn about data modeling and how to represent one-to-many and many-to-many relationships in PostgreSQL.   Students will do hands-on assignments creating tables, inserting data, designing data models, creating relational structures and inserting and querying relational data in tables.",https://www.coursera.org/learn/database-design-postgresql,Coursera
415,Introduction to User Experience Principles and Processes,"This UX course provides an introduction to the fields of UX research and design. Learners will gain an understanding of what is involved in UX research, including conducting interviews, evaluating systems, and analyzing systems using principles of good design. Learners will also learn about the work involved in UX Design, including the generation of promising design solutions and the creation of prototypes at multiple levels of fidelity. By interleaving successive phases of UX Research and Design, learners will see how to learn from inevitable mistakes and improve towards a product with a great UX. What you'll learn:

- The skills needed for UX research and design 
- How UX researchers discover and assess user needs and assess possible designs 
- How to conduct a micro-usability test 
- How UX designers use sketching and prototyping to develop design concepts
- How to incorporate a user-centered focus into the design process 
- Key features of human behavior and describe their impact on the design of interactive systems 
- Techniques for critiquing and designing interactive systems based on human capabilities and behavior",https://www.coursera.org/learn/introtoux-principles-and-processes,Coursera
416,Introduction to Java and Object-Oriented Programming,"This course provides an introduction to the Java language and object-oriented programming, including an overview of Java syntax and how it differs from a language like Python.  Students will learn how to write custom Java classes and methods, and how to test their code using unit testing and test-driven development.  Topics include basic data structures like Arrays and ArrayLists and overloading methods.",https://www.coursera.org/learn/java-object-oriented-programming,Coursera
417,Getting Started with Front-End and Web Development,"Have you encountered a website with stunning design, user-friendly interactivity, and dynamic elements and wondered how it was put together? If so, this course is designed for you! It is tailored for aspiring front-end developers or those who want to get started in this field.  In this course, you will gain an understanding of front-end and web development, exploring the significance of User Interface (UI) and User Experience (UX) design. You will delve into the workings of web browsers and the internet, learning about the tools and technologies that enable you to create interactive and engaging websites and applications. Additionally, you'll explore No-Code development and be introduced to Content Management Systems (CMS). 

Throughout this course, we will provide step-by-step instructional guidance to help you engage in hands-on activities. You will also discover various job opportunities and potential career paths in the front-end development field and hear from industry professionals about their roles and experience as front-end developers. 

This course is designed for beginners in Front-end development and does not require prior programming or web development experience.",https://www.coursera.org/learn/getting-started-with-front-end-and-web-development,Coursera
418,Managing an Agile Team,"While agile has become the de facto standard for managing digital innovation teams, many wonder if they’re doing it ‘right’. Twitter is full of jokes about how teams say they do agile but don’t ‘really’ do it. The reality is that getting the most out of agile is less about observing specific procedures and more about how a team focuses and measures their progress.  Rather than just boring you with an accounting of agile methodologies, this course focuses on helping you better charter your team’s focus, definition of success, and practice of agile. While learning about agile mainstays like Scrum, XP, and kanban, you’ll also learn to help your team ask the right questions about how they’re working and facilitate good answers on how agile can help.    

This course is supported by the Batten Institute at UVA’s Darden School of Business. The Batten Institute’s mission is to improve the world through entrepreneurship and innovation: www.batteninstitute.org.",https://www.coursera.org/learn/uva-darden-agile-team-management,Coursera
419,Introduction to Augmented Reality and ARCore,"This class will teach you the fundamentals of augmented reality (AR), and how to build an AR experience using ARCore. Through the four week course, you'll learn: - How to identify different types of AR experiences 
- Tools and platforms used in the AR landscape 
- What makes AR feel ""real"" 
- Popular use cases for AR
- How to create an AR use flow 
- How AR experiences work
- Tools like Google Poly and Unity to build AR experiences 
- Next steps to start building an AR experience using ARCore and other tools  

This course will break down complex AR concepts to make them easy to understand, while also sharing expert tips and knowledge from Daydream's ARCore team. The course is great for beginners who are just getting started with AR or ARCore.",https://www.coursera.org/learn/ar,Coursera
420,Full Stack Application Development Capstone Project,"Show your mastery of full stack application development by completing this capstone project! In this course, you will apply your knowledge and skills to a real-life inspired challenge and use your expertise to develop a successful solution.  The project provides you with an opportunity to solidify your full stack proficiency. As you design a dynamic user experience, you will develop frontend pages, add user administration, build actions for database operations, create backend services, and configure CI/CD pipelines. You will boost your capabilities with HTML, CSS, JavaScript, Django, React, Node js and NoSQL (Mongo), Containerization, IBM Code Engine, Python, and Kubernetes. Then you will devise a solution for managing the containerized deployment of your application. 

This project is created for you to apply knowledge of relevant and in-demand skills such as:  
- Designing applications and their architecture 
- Creating web frontends with static and dynamic pages using HTML, CSS, JavaScript and REACT
- Implementing user management and authentication  
- Developing backend services and communicating with databases 
- Continuously Integrating and Deploying changes using CI/CD pipelines  
- Deploying serverless applications on Code Engine 
- Creating and invoking RESTful microservices 
- Deploying the entire solution on Cloud using Kubernetes 

When you complete this project, you will have a working Full Stack application showpiece that will impress potential employers. 

Before completing this project, it is highly recommended that you complete all the prior courses offered in the IBM Full Stack Software Developer Professional Certificate.",https://www.coursera.org/learn/ibm-cloud-native-full-stack-development-capstone,Coursera
421,Fundamentals of Java Programming,"Immerse yourself in the world of Java programming with this comprehensive course, consisting of three modules, has been designed for those who are completely new to Java programming and desire to develop a strong foundation in it. In the first module, Java Fundamentals, you'll be introduced to Java programming and its integral components such as the Java Virtual Machine (JVM), the Java Runtime Environment (JRE), and the Java class library. This module also provides an understanding of basic programming constructs and a hands-on experience with Java development tools.

Progressing to the second module, Core Java, you'll delve into the fundamental elements of the language. This segment emphasizes key concepts like Java Syntax, Variables, Methods, Operators, and Control Statements, supported by numerous practical assessments to refine your problem-solving skills.

Finally, in the third module, OOPS and other essential concepts, advanced aspects of Java programming are unfolded. Here, you'll learn about advanced Object-Oriented Programming (OOP) principles and critical exception handling techniques that enhance code reliability and robustness.

By the end of this course, you'll have a robust understanding of Java programming, with the ability to write efficient Java code and the readiness to delve into more advanced Java topics.",https://www.coursera.org/learn/fundamentals-of-java-programming,Coursera
422,Mastering Laravel Framework and PHP,"This is a Beginner to Advance level of course, intended for learners passionate about Web Development.  Welcome to Module 1: Introduction to PHP and Laravel! This module serves as your gateway to the world of web development using the dynamic PHP language and the powerful Laravel framework. Whether you're new to programming or looking to expand your skills, this module will equip you with a strong foundation in both PHP and Laravel, setting the stage for your journey towards building modern web applications.

Welcome to Module 2: Building Web Applications with Laravel! This module is designed to provide you with a comprehensive understanding of creating dynamic and feature-rich web applications using the powerful Laravel framework. From the fundamental basics to advanced concepts, you'll embark on a journey to master the intricacies of routing, controllers, views, database interactions, and more. By the end of this module, you'll have a solid foundation in building web applications that not only adhere to best practices but also deliver exceptional user experiences.

Welcome to Module 3: Integrating PHP with Laravel! This module offers a comprehensive exploration of how PHP, the backbone of Laravel, seamlessly integrates with the framework to create dynamic and secure web applications. By combining the power of PHP's backend capabilities with Laravel's elegant structure, you'll learn to build feature-rich applications while ensuring the highest standards of security. Through practical video lessons, you'll uncover the art of leveraging PHP for backend logic, incorporating external PHP libraries, and implementing essential security measures within the Laravel ecosystem.

Welcome to Module 4: The Project Series module in our Laravel with PHP project! This module is designed to help you understand the intricacies of managing and organizing projects within your Laravel application. Whether you're building a task management system, project portfolio, or any other project-related functionality, this module will equip you with the skills and knowledge needed to create a robust and efficient project management system using Laravel.",https://www.coursera.org/learn/laravel-framework-and-php,Coursera
423,Application Security for Developers and DevOps Professionals,"How vulnerable are your applications to security risks and threats? This course will help you identify vulnerabilities and monitor the health of your applications and systems. You’ll examine and implement secure code practices to prevent events like data breaches and leaks, and discover how practices like monitoring and observability can keep systems safe and secure.  You will gain extensive knowledge on various practices, concepts, and processes for maintaining a secure environment, including DevSecOps practices that automate security integration across the software development lifecycle (SDLC), Static Application Security Testing (SAST) for identifying security flaws, Dynamic Analysis, and Dynamic Testing. You’ll also learn about creating a Secure Development Environment, both on-premise and in the cloud. You’ll explore the Open Web Application Security Project (OWASP) top application security risks, including broken access controls and SQL injections.  

Additionally, you will learn how monitoring, observability, and evaluation ensure secure applications and systems. You’ll discover the essential components of a monitoring system and how application performance monitoring (APM) tools aid in measuring app performance and efficiency. You’ll analyze the Golden Signals of monitoring, explore visualization and logging tools, and learn about the different metrics and alerting systems that help you understand your applications and systems.  

Through videos, hands-on labs, peer discussion, and the practice and graded assessments in this course, you will develop and demonstrate your skills and knowledge for creating and maintaining a secure development environment.",https://www.coursera.org/learn/application-security-for-developers-devops,Coursera
424,Database Management Essentials,"Database Management Essentials provides the foundation you need for a career in database development, data warehousing, or business intelligence, as well as for the entire Data Warehousing for Business Intelligence specialization. In this course, you will create relational databases, write SQL statements to extract information to satisfy business reporting requests, create entity relationship diagrams (ERDs) to design databases, and analyze table designs for excessive redundancy. As you develop these skills, you will use either Oracle, MySQL, or PostgreSQL to execute SQL statements and a database diagramming tool such as the ER Assistant or Visual Paradigm to create ERDs. We’ve designed this course to ensure a common foundation for specialization learners. Everyone taking the course can jump right in with writing SQL statements in Oracle, MySQL, or PostgreSQL.",https://www.coursera.org/learn/database-management,Coursera
425,Applied ChatGPT for Cybersecurity,"There's a lot of talk about good and bad use of ChatGPT, but in this course we will dig into using ChatGPT to do some hands on introductory SOC analyst/incident response work, starting with basic packet analysis and moving to basic reverse engineering of a piece of malware. ChatGPT will be our guide as we do simple and intermediate level Wireshark packet analysis. We will reconstruct an entire attack and exfiltration campaign, then determine the exact commands used by the attacker. This work usually requires in-depth knowledge of SOC analyst and incident response tools, and of attack patterns in general, but we will see how having a subject matter expert create ChatGPT prompts to perform the investigation can make this a task something that even a novice SOC analyst would be able to complete. This will be a fun exercise, but remember to get your company's permission to do this in a environment or on a computer/virtual machine they approve of if using it at work. Since remnants of malware exist in the traffic, it could cause your antivirus or endpoint protection to alert.",https://www.coursera.org/learn/chatgpt-for-cybersecurity,Coursera
426,Introduction to C# Programming and Unity,"This course is all about starting to learn how to develop video games using the C# programming language and the Unity game engine on Windows or Mac. Why use C# and Unity instead of some other language and game engine? Well, C# is a really good language for learning how to program and then programming professionally. Also, the Unity game engine is very popular with indie game developers; Unity games were downloaded 16,000,000,000 times in 2016! Finally, C# is one of the programming languages you can use in the Unity environment. This course doesn't assume you have any previous programming experience. Don't worry if you've never written code before; we'll start at the very beginning and work our way up to building small games by the end of the course. Throughout the course you'll learn core programming concepts that apply to lots of programming languages, including C#, and you'll also learn how to apply those concepts when you develop games.

Computer programming is really fun in general, and programming games is even better!

Caution: Beginning (assuming no prior programming knowledge) is not the same as easy (not hard to do). Learning to program IS hard to do, especially since this course is essentially the first half of a freshman-level college course. Meeting the course challenges while you master the material will be rewarding to you, but doing that will require hard work and maybe even a few expletives along the way.

Module 1: Write your first C# console application and Unity script 
Module 2: Learn how we store data in our programs
Module 3: Learn how we use classes and objects to implement our code
Module 4: Learn the basics of Unity 2D games and take ""Final Exam""

“Unity” is a trademark or registered trademark of Unity Technologies or its affiliates in the U.S. and elsewhere.

This course is an independent work and is not sponsored by, authorized by, or affiliated with Unity Technologies or its affiliates",https://www.coursera.org/learn/introduction-programming-unity,Coursera
427,Getting Started with Go,"Learn the basics of Go, an open source programming language originally developed by a team at Google and enhanced by many contributors from the open source community. This course is designed for individuals with previous programming experience using such languages as C, Python, or Java, and covers the fundamental elements of Go. Topics include data types, protocols, formats, and writing code that incorporates RFCs and JSON. Most importantly, you’ll have a chance to practice writing Go programs and receive feedback from your peers. Upon completing this course, you'll be able to implement simple Go programs, which will prepare you for subsequent study at a more advanced level.",https://www.coursera.org/learn/golang-getting-started,Coursera
